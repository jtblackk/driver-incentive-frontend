[{"D:\\temp git repo\\Master\\src\\index.js":"1","D:\\temp git repo\\Master\\src\\reportWebVitals.js":"2","D:\\temp git repo\\Master\\src\\App.js":"3","D:\\temp git repo\\Master\\src\\aws-exports.js":"4","D:\\temp git repo\\Master\\src\\pages\\PageNotFoundPage.js":"5","D:\\temp git repo\\Master\\src\\pages\\IndexPage.js":"6","D:\\temp git repo\\Master\\src\\pages\\ProfilePage.js":"7","D:\\temp git repo\\Master\\src\\pages\\AccountSetupPage.js":"8","D:\\temp git repo\\Master\\src\\pages\\ApplicationPage.js":"9","D:\\temp git repo\\Master\\src\\Components\\LoadingIcon.js":"10","D:\\temp git repo\\Master\\src\\Components\\UserProfileCard.js":"11","D:\\temp git repo\\Master\\src\\Components\\AccountSetupCard.js":"12","D:\\temp git repo\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js":"13","D:\\temp git repo\\Master\\src\\Components\\DriverApplicationCard.js":"14","D:\\temp git repo\\Master\\src\\Components\\LeftDrawer.js":"15","D:\\temp git repo\\Master\\src\\Helpers\\Constants.js":"16","D:\\temp git repo\\Master\\src\\Components\\TopAppBar.js":"17","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\index.js":"18","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\reportWebVitals.js":"19","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\App.js":"20","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProfilePage.js":"21","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AccountSetupPage.js":"22","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\IndexPage.js":"23","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\PageNotFoundPage.js":"24","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicationPage.js":"25","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicantManagementPage.js":"26","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogManagementPage.js":"27","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogBrowsingPage.js":"28","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AuditLogPage.js":"29","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ViewSponsorsPage.js":"30","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationPage.js":"31","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationSetupPage.js":"32","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\UserContext.js":"33","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrderReviewPage.js":"34","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\CommonFunctions.js":"35","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LoadingIcon.js":"36","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\DriverManagementPage.js":"37","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\TopAppBar.js":"38","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\UserProfileCard.js":"39","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\Constants.js":"40","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LeftDrawer.js":"41","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\EditAccountCard.js":"42","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js":"43","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AccountSetupCard.js":"44","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ProfileSelectionDialog.js":"45","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplicationManagementDialog.js":"46","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTable.js":"47","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogItemsPanel.js":"48","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CatalogItemDialog.js":"49","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverApplicationCard.js":"50","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteCatalogItemDialog.js":"51","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddCatalogItemDialog.js":"52","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SetAllPointRatiosDialog.js":"53","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverManagementDialog.js":"54","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSetupCard.js":"55","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationContent.js":"56","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SuperSponsorOrganizationContent.js":"57","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorAsDriverDialog.js":"58","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CartDialog.js":"59","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogSponsorDialog.js":"60","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectableSpecial.js":"61","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSponsorManagementPanel.js":"62","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteSponsorshipDialog.js":"63","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplyAgainDialog.js":"64","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectable.js":"65","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorProfileDialog.js":"66","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddSponsorProfileDialog.js":"67","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\aws-exports.js":"68"},{"size":517,"mtime":1612907774401,"results":"69","hashOfConfig":"70"},{"size":375,"mtime":1612907774403,"results":"71","hashOfConfig":"70"},{"size":1181,"mtime":1613361824075,"results":"72","hashOfConfig":"70"},{"size":469,"mtime":1613361642212,"results":"73","hashOfConfig":"70"},{"size":266,"mtime":1612907774402,"results":"74","hashOfConfig":"70"},{"size":5070,"mtime":1613360663661,"results":"75","hashOfConfig":"70"},{"size":1536,"mtime":1613361824082,"results":"76","hashOfConfig":"70"},{"size":1777,"mtime":1613361824081,"results":"77","hashOfConfig":"70"},{"size":1789,"mtime":1613361824081,"results":"78","hashOfConfig":"70"},{"size":344,"mtime":1613361824077,"results":"79","hashOfConfig":"70"},{"size":2969,"mtime":1613361824079,"results":"80","hashOfConfig":"70"},{"size":4555,"mtime":1613361824076,"results":"81","hashOfConfig":"70"},{"size":1269,"mtime":1613361824080,"results":"82","hashOfConfig":"70"},{"size":4757,"mtime":1613361824076,"results":"83","hashOfConfig":"70"},{"size":2835,"mtime":1613361824076,"results":"84","hashOfConfig":"70"},{"size":28,"mtime":1613361824080,"results":"85","hashOfConfig":"70"},{"size":876,"mtime":1613361824078,"results":"86","hashOfConfig":"70"},{"size":517,"mtime":1617990258782,"results":"87","hashOfConfig":"88"},{"size":375,"mtime":1617990258797,"results":"89","hashOfConfig":"88"},{"size":3737,"mtime":1617998349086,"results":"90","hashOfConfig":"88"},{"size":6673,"mtime":1617993361896,"results":"91","hashOfConfig":"88"},{"size":1985,"mtime":1617996483569,"results":"92","hashOfConfig":"88"},{"size":5418,"mtime":1617996213213,"results":"93","hashOfConfig":"88"},{"size":1178,"mtime":1617994497172,"results":"94","hashOfConfig":"88"},{"size":1901,"mtime":1617996284629,"results":"95","hashOfConfig":"88"},{"size":9959,"mtime":1617996338845,"results":"96","hashOfConfig":"88"},{"size":9328,"mtime":1617993438839,"results":"97","hashOfConfig":"88"},{"size":13354,"mtime":1617995792258,"results":"98","hashOfConfig":"88"},{"size":1162,"mtime":1617990258790,"results":"99","hashOfConfig":"88"},{"size":10097,"mtime":1617992837783,"results":"100","hashOfConfig":"88"},{"size":5302,"mtime":1617994870540,"results":"101","hashOfConfig":"88"},{"size":1660,"mtime":1617994542000,"results":"102","hashOfConfig":"88"},{"size":89,"mtime":1617990258779,"results":"103","hashOfConfig":"88"},{"size":9410,"mtime":1617996045009,"results":"104","hashOfConfig":"88"},{"size":1009,"mtime":1617996546069,"results":"105","hashOfConfig":"88"},{"size":316,"mtime":1617990258759,"results":"106","hashOfConfig":"88"},{"size":13345,"mtime":1617996293438,"results":"107","hashOfConfig":"88"},{"size":1971,"mtime":1617996840729,"results":"108","hashOfConfig":"88"},{"size":1826,"mtime":1617996827174,"results":"109","hashOfConfig":"88"},{"size":40,"mtime":1617990258778,"results":"110","hashOfConfig":"88"},{"size":5734,"mtime":1617997315101,"results":"111","hashOfConfig":"88"},{"size":2345,"mtime":1617997400020,"results":"112","hashOfConfig":"88"},{"size":1269,"mtime":1617990258768,"results":"113","hashOfConfig":"88"},{"size":6884,"mtime":1617998337559,"results":"114","hashOfConfig":"88"},{"size":4024,"mtime":1617997157622,"results":"115","hashOfConfig":"88"},{"size":10222,"mtime":1617998109500,"results":"116","hashOfConfig":"88"},{"size":4354,"mtime":1617990258756,"results":"117","hashOfConfig":"88"},{"size":3681,"mtime":1617997761857,"results":"118","hashOfConfig":"88"},{"size":3914,"mtime":1617997896917,"results":"119","hashOfConfig":"88"},{"size":6811,"mtime":1617990258754,"results":"120","hashOfConfig":"88"},{"size":2848,"mtime":1617990258752,"results":"121","hashOfConfig":"88"},{"size":6523,"mtime":1617998228052,"results":"122","hashOfConfig":"88"},{"size":4305,"mtime":1617990258764,"results":"123","hashOfConfig":"88"},{"size":25514,"mtime":1617997633965,"results":"124","hashOfConfig":"88"},{"size":3870,"mtime":1617997222303,"results":"125","hashOfConfig":"88"},{"size":3941,"mtime":1617997287333,"results":"126","hashOfConfig":"88"},{"size":4381,"mtime":1617996936434,"results":"127","hashOfConfig":"88"},{"size":4028,"mtime":1617996742933,"results":"128","hashOfConfig":"88"},{"size":8694,"mtime":1617998039178,"results":"129","hashOfConfig":"88"},{"size":4403,"mtime":1617997585674,"results":"130","hashOfConfig":"88"},{"size":6569,"mtime":1617997329849,"results":"131","hashOfConfig":"88"},{"size":10883,"mtime":1617997189926,"results":"132","hashOfConfig":"88"},{"size":3090,"mtime":1617997512134,"results":"133","hashOfConfig":"88"},{"size":1774,"mtime":1617990258749,"results":"134","hashOfConfig":"88"},{"size":6284,"mtime":1617990258757,"results":"135","hashOfConfig":"88"},{"size":7797,"mtime":1617996608976,"results":"136","hashOfConfig":"88"},{"size":7533,"mtime":1617998148872,"results":"137","hashOfConfig":"88"},{"size":588,"mtime":1617990873783,"results":"138","hashOfConfig":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tc7ttx",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"1re6p0e",{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"175"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"175"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"175"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"175"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"175"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"175"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"175"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"175"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"175"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"D:\\temp git repo\\Master\\src\\index.js",[],"D:\\temp git repo\\Master\\src\\reportWebVitals.js",[],"D:\\temp git repo\\Master\\src\\App.js",[],"D:\\temp git repo\\Master\\src\\aws-exports.js",[],"D:\\temp git repo\\Master\\src\\pages\\PageNotFoundPage.js",[],"D:\\temp git repo\\Master\\src\\pages\\IndexPage.js",["285"],"D:\\temp git repo\\Master\\src\\pages\\ProfilePage.js",["286","287"],"D:\\temp git repo\\Master\\src\\pages\\AccountSetupPage.js",[],"D:\\temp git repo\\Master\\src\\pages\\ApplicationPage.js",[],"D:\\temp git repo\\Master\\src\\Components\\LoadingIcon.js",[],"D:\\temp git repo\\Master\\src\\Components\\UserProfileCard.js",["288"],"D:\\temp git repo\\Master\\src\\Components\\AccountSetupCard.js",[],"D:\\temp git repo\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js",[],"D:\\temp git repo\\Master\\src\\Components\\DriverApplicationCard.js",["289"],"D:\\temp git repo\\Master\\src\\Components\\LeftDrawer.js",[],"D:\\temp git repo\\Master\\src\\Helpers\\Constants.js",[],"D:\\temp git repo\\Master\\src\\Components\\TopAppBar.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\index.js",[],["290","291"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\reportWebVitals.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\App.js",["292"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProfilePage.js",["293","294"],"import React, { useState, useContext } from 'react'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport UserProfileCard from '../Components/UserProfileCard'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport { Button, Grid, Paper, Typography } from '@material-ui/core'\r\nimport EditAccountCard from '../Components/EditAccountCard'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport Amplify from 'aws-amplify'\r\nimport aws_exports from '../aws-exports'\r\n\r\nAmplify.configure(aws_exports)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}))\r\n\r\nfunction ProfilePageContent(props) {\r\n  const classes = useStyles()\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [newData, setNewData] = useState({\r\n    Username: props.userProfile.Username,\r\n    FirstName: props.userProfile.FirstName,\r\n    LastName: props.userProfile.LastName,\r\n    Bio: props.userProfile.Bio,\r\n    AccountType: props.userProfile.AccountType,\r\n    // SponsorEmailID: 'need to retrieve this',\r\n    // TotalPoints: 'need to retrieve this',\r\n    // ProfilePicture: 'need to retrieve this',\r\n  })\r\n  function setNewDataState(state) {\r\n    setNewData(state)\r\n  }\r\n\r\n  if (!isEditing) {\r\n    return (\r\n      <Grid container direction=\"row\" xs={12} justify=\"center\">\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          xs={12}\r\n          sm={8}\r\n          md={6}\r\n          lg={4}\r\n          xl={3}\r\n        >\r\n          <Paper className={classes.paper}>\r\n            <Grid item container justify=\"flex-end\">\r\n              {/* edit button */}\r\n              <Button\r\n                variant=\"text\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  setIsEditing(!isEditing)\r\n                }}\r\n              >\r\n                <Typography>Edit</Typography>\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <UserProfileCard userProfile={props.userProfile} />\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <br />\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container justify=\"center\">\r\n          <Grid item container xs={12} sm={8} md={6} lg={4} xl={3}>\r\n            <Paper className={classes.paper}>\r\n              <Grid container justify=\"flex-end\">\r\n                {/* cancel button */}\r\n                <Button\r\n                  variant=\"text\"\r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    ;(async () => {\r\n                      setNewData({\r\n                        Username: props.userProfile.Username,\r\n                        FirstName: props.userProfile.FirstName,\r\n                        LastName: props.userProfile.LastName,\r\n                        Bio: props.userProfile.Bio,\r\n                        AccountType: props.userProfile.AccountType,\r\n                      })\r\n                      setIsEditing(!isEditing)\r\n                    })()\r\n                  }}\r\n                >\r\n                  <Typography>Cancel</Typography>\r\n                </Button>\r\n\r\n                {/* submit button */}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setIsLoading(true)\r\n                    ;(async () => {\r\n                      // save the profile information\r\n                      props.setProfileState({\r\n                        Username: newData.Username,\r\n                        FirstName: newData.FirstName,\r\n                        LastName: newData.LastName,\r\n                        Bio: newData.Bio,\r\n                        AccountType: newData.AccountType,\r\n                      })\r\n\r\n                      let SAVE_USER_PROFILE_URL =\r\n                        'https://u902s79wa3.execute-api.us-east-1.amazonaws.com/dev/saveuserdetails'\r\n                      let requestOptions = {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({\r\n                          Username: newData.Username,\r\n                          FirstName: newData.FirstName,\r\n                          LastName: newData.LastName,\r\n                          Bio: newData.Bio,\r\n                          AccountType: newData.AccountType,\r\n                        }),\r\n                      }\r\n                      fetch(SAVE_USER_PROFILE_URL, requestOptions).then(() => {\r\n                        setIsLoading(false)\r\n                        setIsEditing(!isEditing)\r\n                      })\r\n                    })()\r\n                  }}\r\n                >\r\n                  <Typography>Save</Typography>\r\n                </Button>\r\n              </Grid>\r\n              <br></br>\r\n\r\n              {/* account info form */}\r\n              <Grid item>\r\n                <EditAccountCard\r\n                  userProfile={newData}\r\n                  setNewDataState={setNewDataState}\r\n                />\r\n              </Grid>\r\n\r\n              <br></br>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction ProfilePage() {\r\n  const classes = useStyles()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const userData = useContext(UserContext).user\r\n  const setUserData = useContext(UserContext).setUser\r\n\r\n  function setProfileState(state) {\r\n    setUserData(state)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* layout stuff */}\r\n      <LeftDrawer AccountType={userData.AccountType} />\r\n      <TopAppBar pageTitle=\"Your profile\" />\r\n\r\n      {/* content (starts after first div) */}\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {isLoading ? (\r\n          <LoadingIcon />\r\n        ) : (\r\n          <ProfilePageContent\r\n            userProfile={userData}\r\n            setProfileState={setProfileState}\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfilePage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AccountSetupPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\IndexPage.js",["295"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\PageNotFoundPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicationPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicantManagementPage.js",["296"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogManagementPage.js",["297","298"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport ChooseCatalogItemsPanel from '../Components/ChooseCatalogItemsPanel'\r\nimport CatalogItemDialog from '../Components/CatalogItemDialog'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport AddCatalogItemDialog from '../Components/AddCatalogItemDialog'\r\nimport DeleteCatalogItemDialog from '../Components/DeleteCatalogItemDialog'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nconst ProductCatalogManagementPage = () => {\r\n  const classes = useStyles()\r\n  const userData = useContext(UserContext).user\r\n\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const [itemTableData, setItemTableData] = useState(null)\r\n  function setItemTableDataState(state) {\r\n    setItemTableData(state)\r\n  }\r\n\r\n  const [allCatalogData, setAllCatalogData] = useState(null)\r\n  const setAllCatalogDataState = (state) => {\r\n    setAllCatalogData(state)\r\n  }\r\n\r\n  // dialog control\r\n  const [addItemDialogIsOpen, setAddItemDialogIsOpen] = useState(false)\r\n  function setAddItemDialogIsOpenState(state, refresh) {\r\n    setAddItemDialogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [deleteItemCatalogIsOpen, setDeleteItemCatalogIsOpen] = useState(false)\r\n  function setDeleteItemCatalogIsOpenState(state, refresh) {\r\n    setDeleteItemCatalogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [itemManagementDialogIsOpen, setItemManagementDialogIsOpen] = useState(\r\n    false,\r\n  )\r\n  function setItemManagementDialogIsOpenState(state, refresh) {\r\n    setItemManagementDialogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [pageUpdate, setPageUpdate] = useState(0)\r\n  function fullPageUpdateState() {\r\n    setPageUpdate(pageUpdate + 1)\r\n  }\r\n\r\n  const [selectedCatalogEntry, setSelectedCategoryEntry] = useState(null)\r\n  function setSelectedCategoryEntryState(state) {\r\n    setSelectedCategoryEntry(state)\r\n  }\r\n\r\n  const [checkedItems, setCheckedItems] = useState(null)\r\n  function setCheckedItemsState(state) {\r\n    setCheckedItems(state)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      let CATALOG_ITEMS_URL = `https://bfv61oiy3h.execute-api.us-east-1.amazonaws.com/dev/getcatalogitems?SponsorID=${userData.Username}`\r\n      let catalog_items_raw = await fetch(CATALOG_ITEMS_URL)\r\n      let catalog_items_json = await catalog_items_raw.json()\r\n      let catalog_items_array = await JSON.parse(\r\n        catalog_items_json.body.toString(),\r\n      )\r\n      let catalog_items_parsed = catalog_items_array.Items[0].ProductIDs.L\r\n      let catalog_items_formatted = catalog_items_parsed.map(\r\n        (element) => element.S,\r\n      )\r\n\r\n      let GET_EBAY_ITEMS_URL =\r\n        'https://emdjjz0xd8.execute-api.us-east-1.amazonaws.com/dev/getebayitemsbyproductids'\r\n      let requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          ProductIDs: catalog_items_formatted,\r\n        }),\r\n      }\r\n      let item_data_raw = await fetch(GET_EBAY_ITEMS_URL, requestOptions)\r\n      let item_data_json = await item_data_raw.json()\r\n      let item_data_parsed = await JSON.parse(item_data_json.body)\r\n\r\n      let item_data_array = item_data_parsed.Item.map((element) => {\r\n        return {\r\n          ProductID: element.ItemID,\r\n          Name: element.Title,\r\n          PhotoURL: element.PictureURL[0],\r\n          Stock: element.Quantity - element.QuantitySold,\r\n          Description: element.Description.slice(0, 550),\r\n          Price: element.ConvertedCurrentPrice.Value,\r\n          Location: element.Location,\r\n        }\r\n      })\r\n\r\n      let catalog_item_table_data = item_data_array.map((element) => {\r\n        return {\r\n          ProductID: element.ProductID,\r\n          PhotoURL: element.PhotoURL,\r\n          Name: element.Name,\r\n          Price: element.Price,\r\n          Stock: element.Stock,\r\n        }\r\n      })\r\n\r\n      setAllCatalogData(item_data_array)\r\n      setCheckedItems(\r\n        catalog_item_table_data.map((element) => {\r\n          return {\r\n            key: element.ProductID,\r\n            isChecked: false,\r\n          }\r\n        }),\r\n      )\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, [pageUpdate])\r\n\r\n  if (isLoading) {\r\n    return <LoadingIcon />\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        {/* layout stuff */}\r\n        <TopAppBar pageTitle=\"Catalog management\"></TopAppBar>\r\n        <LeftDrawer AccountType={userData.AccountType} />\r\n        {/* page content (starts after first div) */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <CatalogItemDialog\r\n            dialogProps={{\r\n              itemDialogIsOpen: itemManagementDialogIsOpen,\r\n              setItemDialogIsOpen: setItemManagementDialogIsOpenState,\r\n              fullPageUpdateState: fullPageUpdateState,\r\n              selectedCatalogEntry: selectedCatalogEntry\r\n                ? allCatalogData.find((element) => {\r\n                    return element.ProductID === selectedCatalogEntry.ProductID\r\n                  })\r\n                : null,\r\n              ActionSection: () => {\r\n                return (\r\n                  <Grid item container xs={12} spacing={1}>\r\n                    <Grid item>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        // style={{ backgroundColor: '#444444', color: 'White' }}\r\n                        onClick={() => {\r\n                          let new_checked_items = checkedItems.map(\r\n                            (element) => {\r\n                              if (\r\n                                element.key === selectedCatalogEntry.ProductID\r\n                              ) {\r\n                                return {\r\n                                  ...element,\r\n                                  isChecked: true,\r\n                                }\r\n                              } else {\r\n                                return element\r\n                              }\r\n                            },\r\n                          )\r\n\r\n                          setCheckedItems(new_checked_items)\r\n                          setItemManagementDialogIsOpenState(false)\r\n                        }}\r\n                      >\r\n                        Select item\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                )\r\n              },\r\n            }}\r\n          />\r\n          <AddCatalogItemDialog\r\n            dialogProps={{\r\n              addItemDialogIsOpen: addItemDialogIsOpen,\r\n              setAddItemDialogIsOpenState: setAddItemDialogIsOpenState,\r\n              fullPageUpdateState: fullPageUpdateState,\r\n              allCatalogData: allCatalogData,\r\n              setAllCatalogDataState: setAllCatalogDataState,\r\n            }}\r\n          />\r\n\r\n          <DeleteCatalogItemDialog\r\n            dialogProps={{\r\n              deleteItemCatalogIsOpen: deleteItemCatalogIsOpen,\r\n              setDeleteItemCatalogIsOpenState: setDeleteItemCatalogIsOpenState,\r\n              fullPageUpdateState: fullPageUpdateState,\r\n              allCatalogData: allCatalogData,\r\n              setAllCatalogDataState: setAllCatalogDataState,\r\n              checkedItems: checkedItems,\r\n            }}\r\n          />\r\n\r\n          <Grid container justify=\"center\">\r\n            <Grid item sm={12} md={11} lg={9} xl={7}>\r\n              <ChooseCatalogItemsPanel\r\n                tableProps={{\r\n                  data: allCatalogData,\r\n                  setDataState: setItemTableDataState,\r\n                  selectedRow: selectedCatalogEntry,\r\n                  setSelectedRow: setSelectedCategoryEntryState,\r\n                  dialogIsOpen: itemManagementDialogIsOpen,\r\n                  setDialogIsOpen: setItemManagementDialogIsOpenState,\r\n                  setCheckedItemsState: setCheckedItemsState,\r\n                  checkedItems: checkedItems,\r\n                }}\r\n                dialogProps={{\r\n                  itemManagementDialogIsOpen: itemManagementDialogIsOpen,\r\n                  setItemManagementDialogIsOpenState: setItemManagementDialogIsOpenState,\r\n                  addItemDialogIsOpen: addItemDialogIsOpen,\r\n                  setAddItemDialogIsOpenState: setAddItemDialogIsOpenState,\r\n                  allCatalogData: allCatalogData,\r\n                  setAllCatalogDataState: setAllCatalogDataState,\r\n                  setDeleteItemCatalogIsOpenState: setDeleteItemCatalogIsOpenState,\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProductCatalogManagementPage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogBrowsingPage.js",["299"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AuditLogPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ViewSponsorsPage.js",["300"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport { Button, Grid, Paper, Typography } from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport GenericTable from '../Components/GenericTable'\r\nimport { useHistory } from 'react-router'\r\nimport ViewSponsorAsDriverDialog from '../Components/ViewSponsorAsDriverDialog'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nlet table2HeadCells = [\r\n  {\r\n    id: 'Organization',\r\n    label: 'Organization',\r\n    isDate: false,\r\n    width: 50,\r\n  },\r\n  {\r\n    id: 'FirstName',\r\n    label: 'First name',\r\n    isDate: false,\r\n    width: 50,\r\n  },\r\n  {\r\n    id: 'LastName',\r\n    label: 'Last name',\r\n    isDate: false,\r\n    width: 50,\r\n  },\r\n  {\r\n    id: 'ApplicationDate',\r\n    label: 'Submitted on',\r\n    isDate: false,\r\n    width: 200,\r\n  },\r\n]\r\n\r\nconst ViewSponsorsPage = () => {\r\n  const classes = useStyles()\r\n  let history = useHistory()\r\n\r\n  const userData = useContext(UserContext).user\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [pageUpdate, setPageUpdate] = useState(0)\r\n\r\n  // dialog control\r\n  const [dialogIsOpen, setDialogIsOpen] = useState(false)\r\n  function setDialogIsOpenState(state, refresh) {\r\n    setDialogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [table1HeadCells, setTable1HeadCells] = useState(null)\r\n\r\n  const [table1Data, setTable1Data] = useState(null)\r\n  function setTable1DataState(state) {\r\n    setTable1Data(state)\r\n  }\r\n\r\n  const [table2Data, setTable2Data] = useState(null)\r\n  function setTable2DataState(state) {\r\n    setTable2Data(state)\r\n  }\r\n\r\n  const [selectedEntry, setSelectedEntry] = useState(null)\r\n  function setSelectedEntryState(state) {\r\n    setSelectedEntry(state)\r\n  }\r\n\r\n  const [allSponsorshipsData, setAllSponsorshipsData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      // get the sponsors that the driver is partnered to\r\n      let GET_DRIVERS_SPONSORS_URL = `https://8mhdaeq2kl.execute-api.us-east-1.amazonaws.com/dev/getuserdetails/?DriverID=${userData.Username}`\r\n      let partnered_sponsors_response = await fetch(GET_DRIVERS_SPONSORS_URL)\r\n      let partnered_sponsors_data = await partnered_sponsors_response.json()\r\n      let partnered_sponsors_array = JSON.parse(\r\n        partnered_sponsors_data.body.toString(),\r\n      ).Items\r\n\r\n      let partnered_sponsors_formatted = partnered_sponsors_array\r\n        .map((element) => {\r\n          return {\r\n            SponsorshipID: element.SponsorshipID.S,\r\n            SponsorID: element.SponsorID.S,\r\n            DriverID: element.DriverID.S,\r\n            AppDecisionDate: element.AppDecisionDate.S,\r\n            Points: parseInt(element.Points.N),\r\n            PointDollarRatio: parseFloat(element.PointDollarRatio.N),\r\n            FirstName: element.FirstName.S,\r\n            LastName: element.LastName.S,\r\n            Organization: element.Organization.S,\r\n            Status: parseInt(element.Status.N),\r\n            SponsorStatus: parseInt(element.AccountStatus.N),\r\n            AppSubmissionDate: element.AppSubmissionDate.S,\r\n            AppComments: element.AppComments.S,\r\n            AppDecisionReason: element.AppDecisionReason.S,\r\n            Bio: element.Bio.S,\r\n          }\r\n        })\r\n        .filter((element) => element.SponsorStatus === 1)\r\n\r\n      let active_sponsors_data = partnered_sponsors_formatted.filter(\r\n        (element) => element.Status === 2,\r\n      )\r\n\r\n      let active_sponsors_table_data = active_sponsors_data\r\n        .filter((element) => element)\r\n        .map((element) => {\r\n          return {\r\n            SponsorID: element.SponsorID,\r\n            Organization: element.Organization,\r\n            FirstName: element.FirstName,\r\n            LastName: element.LastName,\r\n            TotalPoints: parseInt(element.Points),\r\n            StartDate: element.AppDecisionDate,\r\n          }\r\n        })\r\n\r\n      let applied_sponsors_data = partnered_sponsors_formatted\r\n        .filter((element) => element.Status === 0)\r\n        .map((element) => {\r\n          return {\r\n            SponsorID: element.SponsorID,\r\n            Organization: element.Organization,\r\n            FirstName: element.FirstName,\r\n            LastName: element.LastName,\r\n            AppSubmissionDate: element.AppSubmissionDate,\r\n          }\r\n        })\r\n\r\n      let applied_sponsors_table_data = applied_sponsors_data\r\n        .filter((element) => element)\r\n        .map((element) => {\r\n          return {\r\n            SponsorID: element.SponsorID,\r\n            Organization: element.Organization,\r\n            FirstName: element.FirstName,\r\n            LastName: element.LastName,\r\n            StartDate: element.AppSubmissionDate,\r\n          }\r\n        })\r\n\r\n      setTable1Data(active_sponsors_table_data)\r\n      setTable2Data(applied_sponsors_table_data)\r\n      setAllSponsorshipsData(partnered_sponsors_formatted)\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n\r\n    setTable1HeadCells([\r\n      {\r\n        id: 'Organization',\r\n        label: 'Organization',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'FirstName',\r\n        label: 'First name',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'LastName',\r\n        label: 'Last name',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'TotalPoints',\r\n        label: 'Total Points',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'StartDate',\r\n        label: 'Sponsored since',\r\n        isDate: true,\r\n        width: 150,\r\n      },\r\n    ])\r\n  }, [pageUpdate])\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <div className={classes.root}>\r\n        {/* layout stuff */}\r\n        <TopAppBar pageTitle=\"Sponsors\"></TopAppBar>\r\n        <LeftDrawer AccountType={userData.AccountType} />\r\n\r\n        {/* page content (starts after first div) */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <ViewSponsorAsDriverDialog\r\n            dialogProps={{\r\n              dialogIsOpen: dialogIsOpen,\r\n              setDialogIsOpen: setDialogIsOpenState,\r\n              selectedEntry: selectedEntry,\r\n              allSponsorshipsData: allSponsorshipsData,\r\n            }}\r\n          />\r\n\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignContent=\"center\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={10} xl={6}>\r\n              <Paper>\r\n                <div style={{ padding: 20 }}>\r\n                  <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <Typography variant=\"h6\">Your sponsors</Typography>\r\n                      <Typography>\r\n                        A list of the sponsors you're registered to\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <br></br>\r\n                  <GenericTable\r\n                    headCells={table1HeadCells}\r\n                    data={table1Data}\r\n                    setDataState={setTable1DataState}\r\n                    tableKey=\"SponsorID\"\r\n                    showKey={false}\r\n                    initialSortedColumn=\"Organization\"\r\n                    initialSortedDirection=\"asc\"\r\n                    selectedRow={selectedEntry}\r\n                    setSelectedRow={setSelectedEntryState}\r\n                    dialogIsOpen={dialogIsOpen}\r\n                    setDialogIsOpenState={setDialogIsOpenState}\r\n                  />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={10} xl={6}>\r\n              <Paper>\r\n                <div style={{ padding: 20 }}>\r\n                  <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <Typography variant=\"h6\">Pending applications</Typography>\r\n                      <Typography>\r\n                        Sponsors who have not responded to your application\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                          history.push('/application')\r\n                        }}\r\n                      >\r\n                        Apply to more\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <br></br>\r\n                  <GenericTable\r\n                    headCells={table2HeadCells}\r\n                    data={table2Data}\r\n                    setDataState={setTable2DataState}\r\n                    tableKey=\"SponsorID\"\r\n                    showKey={false}\r\n                    initialSortedColumn=\"ApplicationDate\"\r\n                    initialSortedDirection=\"desc\"\r\n                    selectedRow={selectedEntry}\r\n                    setSelectedRow={setSelectedEntryState}\r\n                    dialogIsOpen={dialogIsOpen}\r\n                    setDialogIsOpenState={setDialogIsOpenState}\r\n                  />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <LoadingIcon />\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewSponsorsPage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationPage.js",["301"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport { Grid } from '@material-ui/core'\r\nimport SuperSponsorContent from '../Components/SuperSponsorOrganizationContent'\r\nimport OrganizationContent from '../Components/OrganizationContent'\r\n// set up styling\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nfunction OrganizationPage() {\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const classes = useStyles()\r\n  const userData = useContext(UserContext).user\r\n\r\n  const [organizationUsers, setOrganizationUsers] = useState(null)\r\n  function setOrganizationUsersState(state) {\r\n    setOrganizationUsers(state)\r\n  }\r\n\r\n  const [pageUpdate, setPageUpdate] = useState(0)\r\n  function fullPageUpdateState() {\r\n    setPageUpdate(pageUpdate + 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      let GET_ORG_USERS_URL = `https://xqgw415uwe.execute-api.us-east-1.amazonaws.com/dev/getorguserdata?Organization=${userData.Organization}`\r\n      let org_users_raw = await fetch(GET_ORG_USERS_URL)\r\n      let org_users_json = await org_users_raw.json()\r\n      let org_users_array = await JSON.parse(org_users_json.body.toString())\r\n\r\n      let org_users_array_formatted = org_users_array\r\n        .map((element) => {\r\n          if (element.AccountType.S === 'Sponsor') {\r\n            return {\r\n              Username: element.Username.S,\r\n              AccountType: element.AccountType.S,\r\n              AccountStatus: parseInt(element.AccountStatus.N),\r\n              FirstName: element.FirstName.S,\r\n              LastName: element.LastName.S,\r\n              Bio: element.Bio.S,\r\n              SignupDate: element.SignupDate.S.split('.')[0].replace(' ', 'T'),\r\n              Organization: element.Organization.S,\r\n            }\r\n          } else if (element.AccountType.S === 'Driver') {\r\n            return {\r\n              Username: element.Username.S,\r\n              AccountType: element.AccountType.S,\r\n              AccountStatus: parseInt(element.AccountStatus.N),\r\n              FirstName: element.FirstName.S,\r\n              LastName: element.LastName.S,\r\n              Bio: element.Bio.S,\r\n              SignupDate: element.SignupDate.S.split('.')[0].replace(' ', 'T'),\r\n              Status: parseInt(element.Status.N),\r\n              Points: parseInt(element.Points.N),\r\n              PointDollarRatio: parseFloat(element.PointDollarRatio.N),\r\n            }\r\n          } else {\r\n            return null\r\n          }\r\n        })\r\n        .filter((element) => {\r\n          return element && element.AccountStatus > 0\r\n        })\r\n\r\n      let not_banned_users = org_users_array_formatted.filter((element) => {\r\n        return element.AccountStatus < 3\r\n      })\r\n\r\n      setOrganizationUsers(not_banned_users)\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, [pageUpdate])\r\n\r\n  // show loading screen if data is still being fetched\r\n  if (isLoading) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n\r\n          <LoadingIcon />\r\n        </main>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        {/* layout stuff */}\r\n        <TopAppBar pageTitle=\"Your organization\"></TopAppBar>\r\n        <LeftDrawer AccountType={userData.AccountType} />\r\n\r\n        {/* page content (starts after first div) */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Grid container justify=\"center\">\r\n            <Grid item container xs={10} xl={6}>\r\n              <OrganizationContent\r\n                orgProps={{\r\n                  organizationUsers: organizationUsers,\r\n                  setOrganizationUsersState: setOrganizationUsersState,\r\n                }}\r\n                pageProps={{\r\n                  updateCount: pageUpdate,\r\n                  updatePage: fullPageUpdateState,\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid xs={12} item>\r\n              <br />\r\n            </Grid>\r\n\r\n            {/* supersponsor content: only renders for super sponsors */}\r\n            <Grid item container xs={10} xl={6}>\r\n              {userData.Username.includes('@') ? (\r\n                <SuperSponsorContent\r\n                  orgProps={{\r\n                    organizationUsers: organizationUsers,\r\n                    setOrganizationUsersState: setOrganizationUsersState,\r\n                  }}\r\n                  pageProps={{\r\n                    updateCount: pageUpdate,\r\n                    updatePage: fullPageUpdateState,\r\n                  }}\r\n                />\r\n              ) : null}\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OrganizationPage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationSetupPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\UserContext.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrderReviewPage.js",["302","303"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\CommonFunctions.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LoadingIcon.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\DriverManagementPage.js",["304","305","306"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\TopAppBar.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\UserProfileCard.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\Constants.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LeftDrawer.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\EditAccountCard.js",["307"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AccountSetupCard.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ProfileSelectionDialog.js",["308"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplicationManagementDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTable.js",["309","310"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Box, TableSortLabel } from '@material-ui/core'\r\n\r\nimport orderBy from 'lodash/orderBy'\r\nimport LoadingIcon from './LoadingIcon'\r\n\r\nrequire('datejs')\r\n\r\nexport default function GenericTable(props) {\r\n  const [rows, setRows] = useState(null)\r\n\r\n  const [columnToSort, setColumnToSort] = useState(props.initialSortedColumn)\r\n  const [sortDirection, setSortDirection] = useState(\r\n    props.initialSortedDirection,\r\n  )\r\n  function handleSort(columnName) {\r\n    if (columnName === columnToSort) {\r\n      setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc')\r\n    } else {\r\n      setSortDirection('desc')\r\n    }\r\n\r\n    setColumnToSort(columnName)\r\n  }\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    let dataList = props.data\r\n    setRows(dataList)\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <TableContainer\r\n        style={{ maxHeight: 370, minHeight: 370 }}\r\n        component={Paper}\r\n      >\r\n        <Table stickyHeader aria-label=\"simple table\">\r\n          {/* Table header */}\r\n          <TableHead>\r\n            <TableRow>\r\n              {/* map the head cells to the table header */}\r\n              {props.headCells.map((headCell) => (\r\n                <TableCell\r\n                  width={headCell.width}\r\n                  key={headCell.id}\r\n                  sortDirection={\r\n                    columnToSort === headCell.id ? sortDirection : false\r\n                  }\r\n                >\r\n                  <TableSortLabel\r\n                    active={columnToSort === headCell.id}\r\n                    direction={\r\n                      columnToSort === headCell.id ? sortDirection : 'asc'\r\n                    }\r\n                    hideSortIcon={columnToSort === headCell.id ? false : true}\r\n                    onClick={() => {\r\n                      handleSort(headCell.id)\r\n                    }}\r\n                  >\r\n                    <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          {/* Table content */}\r\n          <TableBody>\r\n            {/* map the data to the table rows */}\r\n            {orderBy(rows, columnToSort, sortDirection).map((row) => (\r\n              <TableRow\r\n                hover={true}\r\n                key={row[props.tableKey]}\r\n                style={props.setSelectedRow ? { cursor: 'pointer' } : null}\r\n                onClick={\r\n                  props.setSelectedRow\r\n                    ? () => {\r\n                        let selectedRow = rows.find((element) => {\r\n                          return element[props.tableKey] === row[props.tableKey]\r\n                        })\r\n\r\n                        props.setSelectedRow(selectedRow)\r\n\r\n                        props.setDialogIsOpenState(true)\r\n                      }\r\n                    : null\r\n                }\r\n              >\r\n                {/* display the row key if requested */}\r\n                {props.showKey ? (\r\n                  <TableCell>{row[props.tableKey]}</TableCell>\r\n                ) : null}\r\n\r\n                {/* display the row cells */}\r\n                {Object.entries(row).map((cell) => {\r\n                  if (cell[0].toUpperCase().includes('DATE') && cell[1]) {\r\n                    return (\r\n                      <TableCell>{Date.parse(cell[1]).toUTCString()}</TableCell>\r\n                    )\r\n                  } else if (cell[0] !== props.tableKey) {\r\n                    return <TableCell>{cell[1]}</TableCell>\r\n                  } else {\r\n                    return null\r\n                  }\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  } else {\r\n    return <LoadingIcon />\r\n  }\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogItemsPanel.js",["311"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CatalogItemDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverApplicationCard.js",["312","313","314"],"import { useState, useEffect, useContext } from 'react'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport {\r\n  Button,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport LoadingIcon from './LoadingIcon'\r\nimport ApplyAgainDialog from './ApplyAgainDialog'\r\nimport { sortBy } from 'lodash'\r\n\r\nconst DriverApplicationCard = (props) => {\r\n  const userData = useContext(UserContext).user\r\n  const [applicationDetails, setApplicationDetails] = useState({\r\n    Username: userData.Username,\r\n    FirstName: userData.FirstName,\r\n    LastName: userData.LastName,\r\n    Bio: userData.Bio,\r\n  })\r\n  const [sponsorList, setSponsorList] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const [dialogIsOpen, setDialogIsOpen] = useState(false)\r\n  function setDialogIsOpenState(state) {\r\n    setDialogIsOpen(state)\r\n  }\r\n\r\n  const [dialogResponse, setDialogResponse] = useState(false)\r\n  function setDialogResponseState(state) {\r\n    setDialogResponse(state)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      // get all the potential sponsors\r\n      let GET_SPONSORLIST_URL =\r\n        'https://2cw17jd576.execute-api.us-east-1.amazonaws.com/dev/sponsorlist'\r\n      let sponsorlist_response = await fetch(GET_SPONSORLIST_URL)\r\n      let sponsorlist_data = await sponsorlist_response.json()\r\n      let sponsorlist_array = JSON.parse(sponsorlist_data.body.toString()).Items\r\n      let sponsorlist_formatted = sponsorlist_array\r\n        .map((element) => {\r\n          return {\r\n            Username: element.Username.S,\r\n            FirstName: element.FirstName.S,\r\n            LastName: element.LastName.S,\r\n            Organization: element.Organization.S,\r\n            AccountStatus: parseInt(element.AccountStatus.N),\r\n          }\r\n        })\r\n        .filter((element) => element.AccountStatus === 1)\r\n\r\n      let GET_DRIVERS_SPONSORS_URL = `https://8mhdaeq2kl.execute-api.us-east-1.amazonaws.com/dev/getuserdetails/?DriverID=${userData.Username}`\r\n      let partnered_sponsors_response = await fetch(GET_DRIVERS_SPONSORS_URL)\r\n      let partnered_sponsors_data = await partnered_sponsors_response.json()\r\n      let partnered_sponsors_array = JSON.parse(\r\n        partnered_sponsors_data.body.toString(),\r\n      ).Items\r\n      let partnered_sponsors_formatted = partnered_sponsors_array.map(\r\n        (element) => {\r\n          return element.SponsorID.S\r\n        },\r\n      )\r\n\r\n      let eligible_sponsor_list = sponsorlist_formatted.filter((element) => {\r\n        return !partnered_sponsors_formatted.includes(element.Username)\r\n      })\r\n\r\n      setSponsorList(eligible_sponsor_list)\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        direct=\"column\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <ApplyAgainDialog\r\n          dialogIsOpen={dialogIsOpen}\r\n          setDialogIsOpen={setDialogIsOpenState}\r\n          setDialogResponse={setDialogResponseState}\r\n        />\r\n\r\n        {/* sponsor */}\r\n        <Grid item container xs={7} align=\"left\">\r\n          <Grid container item xs={12}>\r\n            <Grid item xs={12} align=\"left\">\r\n              <InputLabel id=\"Sponsor\">Sponsor</InputLabel>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Select\r\n                fullWidth\r\n                labelId=\"SponsorLabel\"\r\n                id=\"Sponsor\"\r\n                onChange={(event) => {\r\n                  // update sponsor\r\n                  let newApplicationDetails = applicationDetails\r\n                  newApplicationDetails.Sponsor = event.target.value\r\n                  setApplicationDetails(newApplicationDetails)\r\n                }}\r\n              >\r\n                {sortBy(sponsorList, ['Organization', 'FirstName']).map(\r\n                  (sponsor) => (\r\n                    <MenuItem value={sponsor.Username}>\r\n                      {' '}\r\n                      {sponsor.Organization +\r\n                        ': ' +\r\n                        sponsor.FirstName +\r\n                        ' ' +\r\n                        sponsor.LastName}\r\n                    </MenuItem>\r\n                  ),\r\n                )}\r\n              </Select>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* additional comments */}\r\n        <Grid item xs={7} align=\"center\">\r\n          <br></br>\r\n          <TextField\r\n            id=\"additional-comments\"\r\n            label=\"Comments\"\r\n            type=\"text\"\r\n            placeholder=\"Any comments?\"\r\n            variant=\"outlined\"\r\n            multiline\r\n            fullWidth\r\n            rows={4}\r\n            onChange={(event) => {\r\n              // update application comments in state\r\n              let newApplicationDetails = applicationDetails\r\n              newApplicationDetails.Comments = event.target.value\r\n              setApplicationDetails(newApplicationDetails)\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        {/* submit button */}\r\n        <Grid item xs={7} align=\"center\">\r\n          <br></br>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              // validate input\r\n              if (\r\n                !applicationDetails.Sponsor ||\r\n                applicationDetails.Sponsor === ''\r\n              ) {\r\n                alert('Please choose a sponsor company')\r\n                return\r\n              } else if (\r\n                !applicationDetails.Comments ||\r\n                applicationDetails.Comments === ''\r\n              ) {\r\n                alert('Please provide some comments')\r\n                return\r\n              }\r\n\r\n              // fetch -> save application in application table\r\n              let SEND_APPLICATION_URL =\r\n                'https://z8yu8acjwj.execute-api.us-east-1.amazonaws.com/dev/submitapplication'\r\n              let requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                  DriverID: applicationDetails.Username,\r\n                  SponsorID: applicationDetails.Sponsor,\r\n                  AppComments: applicationDetails.Comments.replaceAll(\r\n                    \"'\",\r\n                    \"''\",\r\n                  ),\r\n                }),\r\n              }\r\n              fetch(SEND_APPLICATION_URL, requestOptions).then(() => {\r\n                setDialogIsOpen(true)\r\n              })\r\n            }}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  } else {\r\n    return <LoadingIcon />\r\n  }\r\n}\r\n\r\nexport default DriverApplicationCard\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteCatalogItemDialog.js",["315","316","317"],"import React, { useContext } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport { Divider, Grid, Typography } from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\n\r\nexport default function DeleteCatalogItemDialog(props) {\r\n  const userData = useContext(UserContext).user\r\n\r\n  const handleClickOpen = () => {\r\n    props.dialogProps.setDeleteItemCatalogIsOpenState(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    props.dialogProps.setDeleteItemCatalogIsOpenState(false)\r\n  }\r\n\r\n  if (\r\n    props.dialogProps.checkedItems &&\r\n    props.dialogProps.deleteItemCatalogIsOpen\r\n  ) {\r\n    let new_item_list = props.dialogProps.checkedItems\r\n      .filter((element) => !element.isChecked)\r\n      .map((element) => element.key)\r\n\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={props.dialogProps.deleteItemCatalogIsOpen}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{'Delete items?'}</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing=\"2\">\r\n              <Grid item xs={12}>\r\n                <Typography>\r\n                  Are you sure you want to remove{' '}\r\n                  {props.dialogProps.checkedItems.length - new_item_list.length}{' '}\r\n                  items from your catalog?\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              No\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                let SET_CATALOG_URL = `https://4hw5o2emwe.execute-api.us-east-1.amazonaws.com/dev/setcatalogitems`\r\n                let requestOptions = {\r\n                  method: 'POST',\r\n                  headers: { 'Content-Type': 'application/json' },\r\n                  body: JSON.stringify({\r\n                    SponsorID: userData.Username,\r\n                    ProductIDs: new_item_list,\r\n                  }),\r\n                }\r\n\r\n                fetch(SET_CATALOG_URL, requestOptions).then(() => {\r\n                  props.dialogProps.setDeleteItemCatalogIsOpenState(false, true)\r\n                })\r\n              }}\r\n              color=\"primary\"\r\n              autoFocus\r\n            >\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddCatalogItemDialog.js",["318"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SetAllPointRatiosDialog.js",["319"],"import React, { useContext, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\n\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\n\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nexport default function SetAllPointRatiosDialog(props) {\r\n  const [newPointDollarRatio, setNewPointDollarRatio] = useState(null)\r\n  const [pointDollarRatio, setPointDollarRatio] = useState(null)\r\n  const [helperText, setHelperText] = useState(null)\r\n\r\n  const userData = useContext(UserContext).user\r\n\r\n  const handleClose = (resp) => {\r\n    props.setDialogIsOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props.dialogIsOpen}\r\n        onClose={() => handleClose(false)}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <Grid container style={{ padding: 20 }} component={Paper}>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={12}\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={10}>\r\n              <Typography variant=\"h5\" id=\"alert-dialog-title\">\r\n                Set all drivers' point to USD conversion\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                onClick={() => {\r\n                  handleClose(false)\r\n                }}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Set the point to dollar conversion for all of your drivers. .005\r\n              would mean that 1 point is worth .005 USD.\r\n            </DialogContentText>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <br />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            spacing={3}\r\n            justify=\"flex-start\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Point value (USD)\"\r\n                variant=\"filled\"\r\n                defaultValue={pointDollarRatio}\r\n                helperText={helperText}\r\n                error={helperText}\r\n                onChange={(event) => {\r\n                  setNewPointDollarRatio(event.target.value)\r\n                }}\r\n                size=\"small\"\r\n              ></TextField>\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                onClick={() => {\r\n                  if (!newPointDollarRatio) {\r\n                    setHelperText('Need to provide a value')\r\n                    return\r\n                  } else if (!parseFloat(newPointDollarRatio)) {\r\n                    setHelperText('Must enter a number')\r\n                    return\r\n                  } else if (newPointDollarRatio <= 0) {\r\n                    setHelperText('Must be greater than 0')\r\n                    return\r\n                  } else {\r\n                    setHelperText(null)\r\n                  }\r\n\r\n                  let UPDATE_POINT_VALUE_URL =\r\n                    'https://q8z2hne254.execute-api.us-east-1.amazonaws.com/dev/updatesponsorship'\r\n                  let requestOptions = {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                      SponsorID: userData.Username,\r\n                      PointDollarRatio: parseFloat(newPointDollarRatio),\r\n                    }),\r\n                  }\r\n                  fetch(UPDATE_POINT_VALUE_URL, requestOptions).then(() => {\r\n                    props.setDialogIsOpen(false, true)\r\n                  })\r\n                }}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverManagementDialog.js",["320","321","322","323"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSetupCard.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationContent.js",["324"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SuperSponsorOrganizationContent.js",["325"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorAsDriverDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CartDialog.js",["326"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogSponsorDialog.js",["327"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectableSpecial.js",["328"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSponsorManagementPanel.js",["329"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteSponsorshipDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplyAgainDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectable.js",["330","331"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Box, Checkbox, TableSortLabel } from '@material-ui/core'\r\n\r\nimport orderBy from 'lodash/orderBy'\r\nimport LoadingIcon from './LoadingIcon'\r\n\r\nrequire('datejs')\r\n\r\nexport default function GenericTableSelectable(props) {\r\n  const [rows, setRows] = useState(null)\r\n\r\n  const [columnToSort, setColumnToSort] = useState(props.initialSortedColumn)\r\n  const [allSelected, setAllSelected] = useState(false)\r\n  const [sortDirection, setSortDirection] = useState(\r\n    props.initialSortedDirection,\r\n  )\r\n  function handleSort(columnName) {\r\n    if (columnName === columnToSort) {\r\n      setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc')\r\n    } else {\r\n      setSortDirection('desc')\r\n    }\r\n\r\n    setColumnToSort(columnName)\r\n  }\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    let dataList = props.data\r\n    setRows(dataList)\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  function onSelectAllClick(curr_state) {\r\n    let updated_items = props.checkedItems.map((element) => {\r\n      return {\r\n        ...element,\r\n        isChecked: !curr_state,\r\n      }\r\n    })\r\n\r\n    props.setCheckedItems(updated_items)\r\n  }\r\n\r\n  // returns whether or not a row is marked as 'checked' in program state. true if yes. false if no.\r\n  function isSelected(row_key) {\r\n    let selectedItem = props.checkedItems.find((element) => {\r\n      return element.key === row_key\r\n    })\r\n    return selectedItem.isChecked\r\n  }\r\n\r\n  function setIsSelected(row_key, state) {\r\n    let updated_items = props.checkedItems.map((element) => {\r\n      if (element.key === row_key) {\r\n        return { ...element, isChecked: !element.isChecked }\r\n      } else {\r\n        return element\r\n      }\r\n    })\r\n\r\n    props.setCheckedItems(updated_items)\r\n  }\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <TableContainer\r\n        style={{ maxHeight: 370, minHeight: 370 }}\r\n        component={Paper}\r\n      >\r\n        <Table stickyHeader aria-label=\"simple table\">\r\n          {/* Table header */}\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                  // onChange={onSelectAllClick}\r\n                  onClick={(event) => {\r\n                    event.stopPropagation()\r\n                    setAllSelected(!allSelected)\r\n                    onSelectAllClick(allSelected)\r\n                  }}\r\n                />\r\n              </TableCell>\r\n\r\n              {/* map the head cells to the table header */}\r\n              {props.headCells.map((headCell) => (\r\n                <TableCell\r\n                  width={headCell.width}\r\n                  key={headCell.id}\r\n                  sortDirection={\r\n                    columnToSort === headCell.id ? sortDirection : false\r\n                  }\r\n                >\r\n                  <TableSortLabel\r\n                    active={columnToSort === headCell.id}\r\n                    direction={\r\n                      columnToSort === headCell.id ? sortDirection : 'asc'\r\n                    }\r\n                    hideSortIcon={columnToSort === headCell.id ? false : true}\r\n                    onClick={() => {\r\n                      handleSort(headCell.id)\r\n                    }}\r\n                  >\r\n                    <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          {/* Table content */}\r\n          <TableBody>\r\n            {/* map the data to the table rows */}\r\n            {orderBy(rows, columnToSort, sortDirection).map((row) => (\r\n              <TableRow\r\n                hover={true}\r\n                key={row[props.tableKey]}\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  let selectedRow = rows.find((element) => {\r\n                    return element[props.tableKey] === row[props.tableKey]\r\n                  })\r\n\r\n                  props.setSelectedRow(selectedRow)\r\n\r\n                  props.setDialogIsOpenState(true)\r\n                }}\r\n              >\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={\r\n                      props.checkedItems.find((element) => {\r\n                        return (\r\n                          element.isChecked === true &&\r\n                          element.key === row[props.tableKey]\r\n                        )\r\n                      })\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    onClick={(event) => {\r\n                      event.stopPropagation()\r\n                      setIsSelected(\r\n                        row[props.tableKey],\r\n                        !isSelected(row[props.tableKey]),\r\n                      )\r\n                    }}\r\n                  />\r\n                </TableCell>\r\n\r\n                {/* display the row key if requested */}\r\n                {props.showKey ? (\r\n                  <TableCell>{row[props.tableKey]}</TableCell>\r\n                ) : null}\r\n\r\n                {/* display the row cells */}\r\n                {Object.entries(row).map((cell) => {\r\n                  if (cell[0].toUpperCase().includes('DATE') && cell[1]) {\r\n                    return (\r\n                      <TableCell>{Date.parse(cell[1]).toUTCString()}</TableCell>\r\n                    )\r\n                  } else if (cell[0] !== props.tableKey) {\r\n                    return <TableCell>{cell[1]}</TableCell>\r\n                  } else {\r\n                    return null\r\n                  }\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  } else {\r\n    return <LoadingIcon />\r\n  }\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorProfileDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddSponsorProfileDialog.js",["332"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\aws-exports.js",[],{"ruleId":"333","severity":1,"message":"334","line":60,"column":6,"nodeType":"335","endLine":60,"endColumn":8,"suggestions":"336"},{"ruleId":"337","severity":1,"message":"338","line":10,"column":10,"nodeType":"339","messageId":"340","endLine":10,"endColumn":26},{"ruleId":"337","severity":1,"message":"341","line":10,"column":28,"nodeType":"339","messageId":"340","endLine":10,"endColumn":32},{"ruleId":"333","severity":1,"message":"342","line":39,"column":6,"nodeType":"335","endLine":39,"endColumn":8,"suggestions":"343"},{"ruleId":"333","severity":1,"message":"344","line":55,"column":6,"nodeType":"335","endLine":55,"endColumn":8,"suggestions":"345"},{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"333","severity":1,"message":"350","line":43,"column":6,"nodeType":"335","endLine":43,"endColumn":8,"suggestions":"351"},{"ruleId":"337","severity":1,"message":"352","line":39,"column":10,"nodeType":"339","messageId":"340","endLine":39,"endColumn":19},{"ruleId":"337","severity":1,"message":"353","line":180,"column":21,"nodeType":"339","messageId":"340","endLine":180,"endColumn":33},{"ruleId":"333","severity":1,"message":"354","line":75,"column":6,"nodeType":"335","endLine":75,"endColumn":8,"suggestions":"355"},{"ruleId":"333","severity":1,"message":"356","line":203,"column":6,"nodeType":"335","endLine":203,"endColumn":18,"suggestions":"357"},{"ruleId":"337","severity":1,"message":"358","line":34,"column":10,"nodeType":"339","messageId":"340","endLine":34,"endColumn":23},{"ruleId":"333","severity":1,"message":"356","line":150,"column":6,"nodeType":"335","endLine":150,"endColumn":18,"suggestions":"359"},{"ruleId":"333","severity":1,"message":"356","line":203,"column":6,"nodeType":"335","endLine":203,"endColumn":8,"suggestions":"360"},{"ruleId":"333","severity":1,"message":"356","line":205,"column":6,"nodeType":"335","endLine":205,"endColumn":18,"suggestions":"361"},{"ruleId":"333","severity":1,"message":"362","line":91,"column":6,"nodeType":"335","endLine":91,"endColumn":18,"suggestions":"363"},{"ruleId":"337","severity":1,"message":"364","line":93,"column":10,"nodeType":"339","messageId":"340","endLine":93,"endColumn":19},{"ruleId":"333","severity":1,"message":"365","line":200,"column":6,"nodeType":"335","endLine":200,"endColumn":8,"suggestions":"366"},{"ruleId":"333","severity":1,"message":"356","line":247,"column":6,"nodeType":"335","endLine":247,"endColumn":18,"suggestions":"367"},{"ruleId":"337","severity":1,"message":"368","line":258,"column":10,"nodeType":"339","messageId":"340","endLine":258,"endColumn":34},{"ruleId":"337","severity":1,"message":"369","line":261,"column":12,"nodeType":"339","messageId":"340","endLine":261,"endColumn":44},{"ruleId":"337","severity":1,"message":"353","line":7,"column":21,"nodeType":"339","messageId":"340","endLine":7,"endColumn":33},{"ruleId":"333","severity":1,"message":"362","line":42,"column":6,"nodeType":"335","endLine":42,"endColumn":8,"suggestions":"370"},{"ruleId":"337","severity":1,"message":"371","line":2,"column":10,"nodeType":"339","messageId":"340","endLine":2,"endColumn":20},{"ruleId":"333","severity":1,"message":"372","line":40,"column":6,"nodeType":"335","endLine":40,"endColumn":8,"suggestions":"373"},{"ruleId":"333","severity":1,"message":"374","line":56,"column":6,"nodeType":"335","endLine":56,"endColumn":8,"suggestions":"375"},{"ruleId":"337","severity":1,"message":"376","line":10,"column":3,"nodeType":"339","messageId":"340","endLine":10,"endColumn":13},{"ruleId":"337","severity":1,"message":"377","line":32,"column":10,"nodeType":"339","messageId":"340","endLine":32,"endColumn":24},{"ruleId":"333","severity":1,"message":"356","line":78,"column":6,"nodeType":"335","endLine":78,"endColumn":8,"suggestions":"378"},{"ruleId":"337","severity":1,"message":"379","line":6,"column":8,"nodeType":"339","messageId":"340","endLine":6,"endColumn":25},{"ruleId":"337","severity":1,"message":"380","line":8,"column":10,"nodeType":"339","messageId":"340","endLine":8,"endColumn":17},{"ruleId":"337","severity":1,"message":"381","line":14,"column":9,"nodeType":"339","messageId":"340","endLine":14,"endColumn":24},{"ruleId":"333","severity":1,"message":"382","line":107,"column":6,"nodeType":"335","endLine":107,"endColumn":8,"suggestions":"383"},{"ruleId":"337","severity":1,"message":"384","line":20,"column":28,"nodeType":"339","messageId":"340","endLine":20,"endColumn":47},{"ruleId":"337","severity":1,"message":"384","line":241,"column":28,"nodeType":"339","messageId":"340","endLine":241,"endColumn":47},{"ruleId":"337","severity":1,"message":"385","line":559,"column":12,"nodeType":"339","messageId":"340","endLine":559,"endColumn":29},{"ruleId":"337","severity":1,"message":"386","line":702,"column":10,"nodeType":"339","messageId":"340","endLine":702,"endColumn":22},{"ruleId":"337","severity":1,"message":"385","line":704,"column":12,"nodeType":"339","messageId":"340","endLine":704,"endColumn":29},{"ruleId":"337","severity":1,"message":"353","line":44,"column":21,"nodeType":"339","messageId":"340","endLine":44,"endColumn":33},{"ruleId":"337","severity":1,"message":"387","line":5,"column":8,"nodeType":"339","messageId":"340","endLine":5,"endColumn":19},{"ruleId":"337","severity":1,"message":"353","line":17,"column":21,"nodeType":"339","messageId":"340","endLine":17,"endColumn":33},{"ruleId":"333","severity":1,"message":"356","line":47,"column":6,"nodeType":"335","endLine":47,"endColumn":8,"suggestions":"388"},{"ruleId":"333","severity":1,"message":"372","line":40,"column":6,"nodeType":"335","endLine":40,"endColumn":8,"suggestions":"389"},{"ruleId":"333","severity":1,"message":"390","line":144,"column":6,"nodeType":"335","endLine":144,"endColumn":18,"suggestions":"391"},{"ruleId":"337","severity":1,"message":"371","line":2,"column":10,"nodeType":"339","messageId":"340","endLine":2,"endColumn":20},{"ruleId":"333","severity":1,"message":"372","line":41,"column":6,"nodeType":"335","endLine":41,"endColumn":8,"suggestions":"392"},{"ruleId":"337","severity":1,"message":"352","line":23,"column":10,"nodeType":"339","messageId":"340","endLine":23,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'userProfileDetails'. Either include them or remove the dependency array.","ArrayExpression",["393"],"no-unused-vars","'CircularProgress' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","React Hook useEffect has a missing dependency: 'userProfileDetails.Email_ID'. Either include it or remove the dependency array.",["394"],"React Hook useEffect has missing dependencies: 'applicationDetails' and 'props.accountEmail'. Either include them or remove the dependency array.",["395"],"no-native-reassign",["396"],"no-negated-in-lhs",["397"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["398"],"'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeProfile', 'history', 'setProfileSelectionDialogIsOpenState', 'userData.AccountStatus', 'userData.AccountType', and 'userData.Organization'. Either include them or remove the dependency array.",["399"],"React Hook useEffect has a missing dependency: 'userData.Username'. Either include it or remove the dependency array.",["400"],"'itemTableData' is assigned a value but never used.",["401"],["402"],["403"],"React Hook useEffect has a missing dependency: 'userData.Organization'. Either include it or remove the dependency array.",["404"],"'allOrders' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentOrders', 'previousOrders', and 'userData.Username'. Either include them or remove the dependency array. You can also do a functional update 'setPreviousOrders(p => ...)' if you only need 'previousOrders' in the 'setPreviousOrders' call.",["405"],["406"],"'pointRatioDialogResponse' is assigned a value but never used.","'setPointRatioDialogResponseState' is defined but never used.",["407"],"'makeStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["408"],"React Hook useEffect has a missing dependency: 'props.tableProps.data'. Either include it or remove the dependency array. If 'setTable1Data' needs the current value of 'props.tableProps.data', you can also switch to useReducer instead of useState and read 'props.tableProps.data' in the reducer.",["409"],"'Typography' is defined but never used.","'dialogResponse' is assigned a value but never used.",["410"],"'DialogContentText' is defined but never used.","'Divider' is defined but never used.","'handleClickOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ebayItems' and 'props.dialogProps.allCatalogData'. Either include them or remove the dependency array. You can also do a functional update 'setEbayItems(e => ...)' if you only need 'ebayItems' in the 'setEbayItems' call.",["411"],"'setPointDollarRatio' is assigned a value but never used.","'triggerPageUpdate' is defined but never used.","'dialogIsOpen' is assigned a value but never used.","'LoadingIcon' is defined but never used.",["412"],["413"],"React Hook useEffect has a missing dependency: 'orgProps.organizationUsers'. Either include it or remove the dependency array.",["414"],["415"],{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},"no-global-assign","no-unsafe-negation",{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"426","fix":"428"},{"desc":"429","fix":"430"},{"desc":"426","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"426","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"429","fix":"443"},{"desc":"444","fix":"445"},{"desc":"429","fix":"446"},{"desc":"439","fix":"447"},{"desc":"448","fix":"449"},{"desc":"439","fix":"450"},"Update the dependencies array to be: [history, userProfileDetails]",{"range":"451","text":"452"},"Update the dependencies array to be: [userProfileDetails.Email_ID]",{"range":"453","text":"454"},"Update the dependencies array to be: [applicationDetails, props.accountEmail]",{"range":"455","text":"456"},"Update the dependencies array to be: [user]",{"range":"457","text":"458"},"Update the dependencies array to be: [activeProfile, history, setProfileSelectionDialogIsOpenState, userData.AccountStatus, userData.AccountType, userData.Organization]",{"range":"459","text":"460"},"Update the dependencies array to be: [pageUpdate, userData.Username]",{"range":"461","text":"462"},{"range":"463","text":"462"},"Update the dependencies array to be: [userData.Username]",{"range":"464","text":"465"},{"range":"466","text":"462"},"Update the dependencies array to be: [pageUpdate, userData.Organization]",{"range":"467","text":"468"},"Update the dependencies array to be: [currentOrders, previousOrders, userData.Username]",{"range":"469","text":"470"},{"range":"471","text":"462"},"Update the dependencies array to be: [userData.Organization]",{"range":"472","text":"473"},"Update the dependencies array to be: [props.data]",{"range":"474","text":"475"},"Update the dependencies array to be: [props.tableProps.data]",{"range":"476","text":"477"},{"range":"478","text":"465"},"Update the dependencies array to be: [ebayItems, props.dialogProps.allCatalogData]",{"range":"479","text":"480"},{"range":"481","text":"465"},{"range":"482","text":"475"},"Update the dependencies array to be: [orgProps.organizationUsers, pageUpdate]",{"range":"483","text":"484"},{"range":"485","text":"475"},[2043,2045],"[history, userProfileDetails]",[1277,1279],"[userProfileDetails.Email_ID]",[1608,1610],"[applicationDetails, props.accountEmail]",[1825,1827],"[user]",[2225,2227],"[activeProfile, history, setProfileSelectionDialogIsOpenState, userData.AccountStatus, userData.AccountType, userData.Organization]",[6381,6393],"[pageUpdate, userData.Username]",[4850,4862],[6340,6342],"[userData.Username]",[6108,6120],[3337,3349],"[pageUpdate, userData.Organization]",[5645,5647],"[currentOrders, previousOrders, userData.Username]",[7664,7676],[1639,1641],"[userData.Organization]",[1316,1318],"[props.data]",[1357,1359],"[props.tableProps.data]",[2761,2763],[3177,3179],"[ebayItems, props.dialogProps.allCatalogData]",[1835,1837],[1338,1340],[3886,3898],"[orgProps.organizationUsers, pageUpdate]",[1393,1395]]