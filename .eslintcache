[{"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/index.js":"1","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/App.js":"2","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/reportWebVitals.js":"3","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/AdminHomePage.js":"4","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/SponsorHomePage.js":"5","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/PageNotFoundPage.js":"6","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/SignupPage.js":"7","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/DriverHomePage.js":"8","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/IndexPage.js":"9","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/TopAppBar.js":"10","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/CreateAccountCard.js":"11","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminUserModPage.js":"12","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/with_List_Loading.js":"13","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/User_List.js":"14","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminDelUser.js":"15","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminUserTable.js":"16","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminSponsorTable.js":"17","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/sponsortableMod.js":"18","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/sposor_loading.js":"19"},{"size":500,"mtime":1612211793695,"results":"20","hashOfConfig":"21"},{"size":1031,"mtime":1612974567730,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1612211793696,"results":"23","hashOfConfig":"21"},{"size":1765,"mtime":1614890985272,"results":"24","hashOfConfig":"21"},{"size":304,"mtime":1612211793696,"results":"25","hashOfConfig":"21"},{"size":253,"mtime":1612211793696,"results":"26","hashOfConfig":"21"},{"size":421,"mtime":1612211793696,"results":"27","hashOfConfig":"21"},{"size":301,"mtime":1612306008006,"results":"28","hashOfConfig":"21"},{"size":233,"mtime":1612309527990,"results":"29","hashOfConfig":"21"},{"size":565,"mtime":1614031408838,"results":"30","hashOfConfig":"21"},{"size":6170,"mtime":1612211793695,"results":"31","hashOfConfig":"21"},{"size":1405,"mtime":1614891045758,"results":"32","hashOfConfig":"21"},{"size":402,"mtime":1614626177115,"results":"33","hashOfConfig":"21"},{"size":14041,"mtime":1614895804467,"results":"34","hashOfConfig":"21"},{"size":2355,"mtime":1614896186125,"results":"35","hashOfConfig":"21"},{"size":3343,"mtime":1614625088786,"results":"36","hashOfConfig":"21"},{"size":13703,"mtime":1614897684698,"results":"37","hashOfConfig":"21"},{"size":1394,"mtime":1614889717702,"results":"38","hashOfConfig":"21"},{"size":379,"mtime":1614888965831,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"vi2dzt",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/index.js",[],["87","88"],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/App.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/reportWebVitals.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/AdminHomePage.js",["89","90","91","92","93","94"],"import Grid from '@material-ui/core/Grid'\nimport React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport AdminUserModPage from '../Components/AdminUserModPage'\nimport SponsortableMod from '../Components/sponsortableMod'\nimport AdminDelUser from '../Components/AdminDelUser'\nimport TopAppBar from '../Components/TopAppBar'\nimport ReactDataGrid from 'react-data-grid'\nimport { grid } from '@material-ui/system'\n\nfunction AdminHomePage() {\n  let history = useHistory()\n\n  return (\n    <div>\n      <TopAppBar pageTitle=\"Admin Settings\" />\n\n      <Grid container justify=\"space-evenly\">\n        <Grid item xs={12}>\n          <p id=\"test\">Welcome to the admin's home page</p>\n        </Grid>\n\n        <Grid item xs={8} >\n          <div>\n            <AdminUserModPage link='https://wn0wfce7a3.execute-api.us-east-1.amazonaws.com/dev/entries'>\n            </AdminUserModPage>\n          </div>\n        </Grid>\n\n        <Grid item xs={4} >\n          <div>\n            <AdminDelUser></AdminDelUser>\n          </div>\n\n        </Grid>\n        \n        <Grid item xs={8} >\n          <div>\n            <SponsortableMod link='https://wn0wfce7a3.execute-api.us-east-1.amazonaws.com/dev/entries'>\n            </SponsortableMod>\n          </div>\n        </Grid>\n      \n          {/* <Button id=\"butt\" variant=\"contained\" color=\"primary\" onClick={<div><AdminUserModPage></AdminUserModPage></div>}></Button> */}\n          {/* <div><AdminUserModPage></AdminUserModPage></div> */}\n          {/* <AdminUserTable></AdminUserTable> */}\n          {/* </Button> */}\n        \n      </Grid>\n\n      \n    </div>\n  )\n}\n\nexport default AdminHomePage\n","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/SponsorHomePage.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/PageNotFoundPage.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/SignupPage.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/DriverHomePage.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/pages/IndexPage.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/TopAppBar.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/CreateAccountCard.js",[],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminUserModPage.js",["95","96","97","98","99"],"import Grid from '@material-ui/core/Grid'\nimport { data } from 'browserslist'\nimport { useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { ListItem } from '@material-ui/core'\nimport React, { useEffect } from 'react'\nimport '../App.css'\nimport addEntryData from './User_List'\nimport withListLoading from './with_List_Loading'\n\nfunction AdminUserModPage(props) {\n  const ListLoading = withListLoading(addEntryData)\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n  })\n\n  var tableinfo = {title: \"All Users\",column1: \"Email\",column2: \"Account Type\"\n                  ,column3: \"Fist Name\",column4: \"Last Name\",column5: \"Total Points\",column6: \"Last Login\", column7: \"Last Login\"};\n\n\n\n  useEffect(() => {\n    setAppState({ loading: true })\n    var apiUrl = props.link\n      // 'https://wn0wfce7a3.execute-api.us-east-1.amazonaws.com/dev/entries'\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((repos) => {\n        // console.log(repos)\n        // addEntryData(repos)\n        setAppState({ loading: false, repos: repos })\n      })\n  }, [setAppState])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\"></div>\n      <div className=\"repo-container\">\n        <ListLoading isLoading={appState.loading} repos={appState.repos} tableinfo={tableinfo} />\n      </div>\n    </div>\n  )\n\n  \n}\n\nexport default AdminUserModPage\n","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/with_List_Loading.js",[],["100","101"],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/User_List.js",["102","103","104","105","106"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { lighten, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport FilterListIcon from '@material-ui/icons/FilterList'\n\nfunction createData(Email_id, AccountType, FirstName, LastName, TotalPoints, LastLogin, IsSuspended) {\n  return { Email_id, AccountType, FirstName, LastName, TotalPoints, LastLogin, IsSuspended}\n}\nvar tablestruct = {title: \"All Users\", column1: \"Email\",column2: \"Fist Name\"}\n\nvar title = \"Users\"\n\nconst rows = [\n  // createData('hardcode@gmail.com',\t'Admin',\t'hardcode',\t'Admin', 0\t),\n  // createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  // createData('Eclair', 262, 16.0, 24, 6.0),\n  // createData('Cupcake', 305, 3.7, 67, 4.3),\n  // createData('Gingerbread', 356, 16.0, 49, 3.9),\n]\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0])\n}\n\nconst headCells = [\n  {\n    id: 'Email_id',\n    numeric: false,\n    disablePadding: true,\n    label: 'Email',\n  },\n  {\n    id: 'AccountType',\n    numeric: false,\n    disablePadding: true,\n    label: 'Account Type',\n  },\n  {\n    id: 'FirstName',\n    numeric: false,\n    disablePadding: true,\n    label: 'First Name',\n  },\n  { id: 'LastName', numeric: false, disablePadding: true, label: 'Last Name' },\n  {\n    id: 'TotalPoints',\n    numeric: true,\n    disablePadding: false,\n    label: 'Total Points',\n  },\n  {\n    id: 'LastLogin',\n    numeric: false,\n    disablePadding: false,\n    label: 'Last Login',\n  },\n  {\n    id: 'IsSuspended',\n    boolean: true,\n    disablePadding: false,\n    label: 'Is Suspended',\n  },\n\n]\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property)\n  }\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all Users' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n}\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}))\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles()\n  const { numSelected } = props\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h3\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          {title}\n        </Typography>\n      )}\n\n      {(\n        \n          <IconButton aria-label=\"delete\" >\n            <DeleteIcon />\n          </IconButton>\n        \n      ) }\n    </Toolbar>\n  )\n}\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}))\n\n\n\nconst List = (props) => {\n  // const { tableinfo } = props\n  // console.log(props.tableinfo)\n  // console.log(props)\n  title = props.tableinfo.title\n\n  tablestruct=props.tableinfo\n  // title = {props.tableinfo.title}\n  console.log(props.repos)\n\n  const classes = useStyles()\n  const [order, setOrder] = React.useState('asc')\n  const [orderBy, setOrderBy] = React.useState('AccountType')\n  const [selected, setSelected] = React.useState([])\n  const [page, setPage] = React.useState(0)\n  const [dense, setDense] = React.useState(false)\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc'\n    setOrder(isAsc ? 'desc' : 'asc')\n    setOrderBy(property)\n  }\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.Email_id)\n      setSelected(newSelecteds)\n      return\n    }\n    setSelected([])\n  }\n\n  const handleClick = (event, Email_id) => {\n    const selectedIndex = selected.indexOf(Email_id)\n    let newSelected = []\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, Email_id)\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1))\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1))\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      )\n    }\n\n    setSelected(newSelected)\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked)\n  }\n\n  const isSelected = (Email_id) => selected.indexOf(Email_id) !== -1\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n  const { repos } = props\n\n\n\n  if (!repos || repos.length === 0) return <p>No repos, sorry</p>\n\n  var data = []\n  var x = 0\n  for (x in repos) {\n\n    \n    // data.push(repos[x])\n    if (!rows.includes(repos[x])) {\n      if(repos[x].IsSuspended)\n      {\n        repos[x].IsSuspended = \"true\"\n        // console.log(repos[x].Email_id)\n      }\n      if(!repos[x].IsSuspended)\n      {\n        repos[x].IsSuspended = \"false\"\n        // console.log(repos[x].Email_id)\n      }\n      repos[x].Email_id.toString();\n      repos[x].Email_id = repos[x].Email_id.toLowerCase();\n      // repos[x].FirstName = repos[x].FirstName.toLowerCase();\n      // repos[x].LastName = repos[x].LastName.toLowerCase();\n      // repos[x].AccountType = repos[x].AccountType.toLowerCase();\n    // console.log(repos[x].Email_id.length)\n    \n      // repos[x].LastLogin = repos[x].LastLogin.toLowerCase();\n\n      rows.push(repos[x])\n      // repos[x].LastLogin.toString();\n      // console.log(rows[x])\n    }\n    // console.log(data)\n  }\n  // console.log(rows[5])\n\n  return (\n\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.Email_id)\n                  const labelId = `enhanced-table-checkbox-${index}`\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.Email_id)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.Email_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        id={labelId}\n                        scope=\"row\"\n                        padding=\"none\"\n                      >\n                        {row.Email_id}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.AccountType}</TableCell>\n                      <TableCell align=\"right\">{row.FirstName}</TableCell>\n                      <TableCell align=\"right\">{row.LastName}</TableCell>\n                      <TableCell align=\"right\">{row.TotalPoints}</TableCell>\n                      <TableCell align=\"right\">{row.LastLogin}</TableCell>\n                      <TableCell align=\"right\">{row.IsSuspended}</TableCell>\n                    </TableRow>\n                  )\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  )\n\n  //   const { repos } = props;\n  //   if (!repos || repos.length === 0) return <p>No repos, sorry</p>; // <ul> //   <h2 className='list-head'>Available Public Repositories</h2> //   {repos.map((repo) => { //     if (!repo.TotalPoints) //     { //       console.log(0) //     }else{ //       console.log(repo.TotalPoints) //     } //     console.log(repo.Email_id + \" \" + repo.FirstName + \" \" + repo.LastName+ \" \" +repo.AccountType+ \" \" +repo.ApplicationType+ \" \" +repo.TotalPoints) //     return ( //       <li key={repo.Email_id} className='list'> //         {/* <span className='repo-text'>{repo.Email_id} </span> */} //         <span className='repo-description'>{repo.Email_id + \" \" + repo.FirstName + \" \" + repo.LastName+ \" \" +repo.AccountType+ \" \" +repo.ApplicationType+ \" \" +repo.TotalPoints}</span> //       </li> //     ); //   } //   )} // </ul> // );\n}\nexport default List\n","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminDelUser.js",["107","108","109","110","111","112","113"],"import email_validator from 'email-validator'\n//import { Auth } from \"aws-amplify\";\n\nimport {\n  Button,\n  TextField,\n  InputLabel,\n  Select,\n  MenuItem,\n} from '@material-ui/core'\nimport { useState } from 'react'\n\nimport { useHistory } from 'react-router-dom'\n\nfunction AdminDelUser() {\n  let userDetailObj = {\n    Email_ID: '',\n    IsSuspended: '',\n    AdminNotes: '',\n\n  }\n  const [userDetails, setUserDetails] = useState(userDetailObj)\n\n  let history = useHistory()\n\n  return (\n    <div>\n      <form>\n        <TextField\n          id=\"Email_ID\"\n          label=\"Email\"\n          onChange={(event) => {\n            // update first name in state\n            let newUserDetails = userDetails\n            newUserDetails.Email_ID = event.target.value\n            setUserDetails(newUserDetails)\n          }}\n        />\n        <br />\n        <TextField\n          id=\"IsSuspended\"\n          label=\"true or false\"\n          onChange={(event) => {\n            // update last name in state\n            let newUserDetails = userDetails\n            newUserDetails.IsSuspended = event.target.value\n            setUserDetails(newUserDetails)\n          }}\n        />\n        <br />\n        <TextField\n          id=\"AdminNotes\"\n          label=\"AdminNotes\"\n          onChange={(event) => {\n            // update email in state\n            let newUserDetails = userDetails\n            newUserDetails.AdminNotes = event.target.value\n            setUserDetails(newUserDetails)\n          }}\n        />\n        \n        <br />\n        <br />\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n           \n            // set up fetch request -> create new user entry in driver detail database\n            let CREATE_USER_URL =\n              'https://70z2mvkobk.execute-api.us-east-1.amazonaws.com/dev/savechanges'\n            let requestOptions = {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                Email_id: userDetails.Email_ID,\n                IsSuspended: userDetails.IsSuspended,\n                AdminNotes: userDetails.AdminNotes,\n\n              }),\n            }\n            console.log(userDetails)\n\n\n          }\n        \n        }\n        >\n          Submit\n        </Button>\n      </form>\n      <br />\n    </div>\n  )\n}\n\nexport default AdminDelUser\n","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminUserTable.js",[],["114","115"],"/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/AdminSponsorTable.js",["116","117","118","119","120","121"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { lighten, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport FilterListIcon from '@material-ui/icons/FilterList'\n\n\nfunction createData(Email_id, AccountType, ApplicationStatus, FirstName, LastName, IsSuspended) {\n  return { Email_id, AccountType, ApplicationStatus, FirstName, LastName, IsSuspended}\n}\nvar tablestruct = {title: \"Sponsors\", column1: \"Email\",column2: \"Fist Name\"}\n\nvar title = \"Sponsors\"\n\nconst rows = [\n  // createData('hardcode@gmail.com',\t'Admin',\t'hardcode',\t'Admin', 0\t),\n  // createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  // createData('Eclair', 262, 16.0, 24, 6.0),\n  // createData('Cupcake', 305, 3.7, 67, 4.3),\n  // createData('Gingerbread', 356, 16.0, 49, 3.9),\n]\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0])\n}\n\nconst headCells = [\n  {\n    id: 'Email_id',\n    numeric: false,\n    disablePadding: true,\n    label: 'Email',\n  },\n  {\n    id: 'AccountType',\n    numeric: false,\n    disablePadding: true,\n    label: 'Account Type',\n  },\n  {\n    id: 'ApplicationStatus',\n    numeric: true,\n    disablePadding: false,\n    label: 'Application Status',\n  },\n  {\n    id: 'FirstName',\n    numeric: false,\n    disablePadding: true,\n    label: 'First Name',\n  },\n  { id: 'LastName', \n    numeric: false, \n    disablePadding: true,\n    label: 'Last Name' \n  },\n  {\n    id: 'IsSuspended',\n    numeric: false,\n    disablePadding: false,\n    label: 'Account Suspended',\n  },\n\n]\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property)\n  }\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all Users' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n}\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}))\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles()\n  const { numSelected } = props\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h3\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          {title}\n        </Typography>\n      )}\n\n      {(\n        \n          <IconButton aria-label=\"delete\" >\n            <DeleteIcon />\n          </IconButton>\n        \n      ) }\n    </Toolbar>\n  )\n}\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}))\n\n\n\nconst List = (props) => {\n\n  title = props.tableinfo.title\n\n  tablestruct=props.tableinfo\n\n  const classes = useStyles()\n  const [order, setOrder] = React.useState('asc')\n  const [orderBy, setOrderBy] = React.useState('AccountType')\n  const [selected, setSelected] = React.useState([])\n  const [page, setPage] = React.useState(0)\n  const [dense, setDense] = React.useState(false)\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc'\n    setOrder(isAsc ? 'desc' : 'asc')\n    setOrderBy(property)\n  }\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.Email_id)\n      setSelected(newSelecteds)\n      return\n    }\n    setSelected([])\n  }\n\n  const handleClick = (event, Email_id) => {\n    const selectedIndex = selected.indexOf(Email_id)\n    let newSelected = []\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, Email_id)\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1))\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1))\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      )\n    }\n\n    setSelected(newSelected)\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked)\n  }\n\n  const isSelected = (Email_id) => selected.indexOf(Email_id) !== -1\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n  const { repos } = props\n\n\n\n  if (!repos || repos.length === 0) return <p>No repos, sorry</p>\n\n  var data = []\n  var x = 0\n  for (x in repos) {\n    // data.push(repos[x])\n    if(repos[x].AccountType == \"Sponsor\")\n    {\n      console.log(repos[x])\n      \n\n      if(!repos[x].IsSuspended)\n      {\n        // repos[x].push({IsSuspended: \"false\"})\n        // console.log(repos[x].Email_id)\n      }\n\n    if (!rows.includes(repos[x])) {\n      repos[x].Email_id.toString();\n      repos[x].Email_id = repos[x].Email_id.toLowerCase();\n      repos[x].FirstName = repos[x].FirstName.toLowerCase();\n      repos[x].LastName = repos[x].LastName.toLowerCase();\n      repos[x].AccountType = repos[x].AccountType.toLowerCase();\n    // console.log(repos[x].Email_id.length)\n    \n      // repos[x].LastLogin = repos[x].LastLogin.toLowerCase();\n\n      rows.push(repos[x])\n      // repos[x].LastLogin.toString();\n      // console.log(rows[x])\n    }\n  }\n\n    // console.log(data)\n  }\n  // console.log(rows[5])\n\n  return (\n\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.Email_id)\n                  const labelId = `enhanced-table-checkbox-${index}`\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.Email_id)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.Email_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        id={labelId}\n                        scope=\"row\"\n                        padding=\"none\"\n                      >\n                        {row.Email_id}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.AccountType}</TableCell>\n                      <TableCell align=\"right\">{row.ApplicationStatus}</TableCell>\n                      <TableCell align=\"right\">{row.FirstName}</TableCell>\n                      <TableCell align=\"right\">{row.LastName}</TableCell>\n                      <TableCell align=\"right\">{row.IsSuspended}</TableCell>\n                    </TableRow>\n\n                  )\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  )\n\n  //   const { repos } = props;\n  //   if (!repos || repos.length === 0) return <p>No repos, sorry</p>; // <ul> //   <h2 className='list-head'>Available Public Repositories</h2> //   {repos.map((repo) => { //     if (!repo.TotalPoints) //     { //       console.log(0) //     }else{ //       console.log(repo.TotalPoints) //     } //     console.log(repo.Email_id + \" \" + repo.FirstName + \" \" + repo.LastName+ \" \" +repo.AccountType+ \" \" +repo.ApplicationType+ \" \" +repo.TotalPoints) //     return ( //       <li key={repo.Email_id} className='list'> //         {/* <span className='repo-text'>{repo.Email_id} </span> */} //         <span className='repo-description'>{repo.Email_id + \" \" + repo.FirstName + \" \" + repo.LastName+ \" \" +repo.AccountType+ \" \" +repo.ApplicationType+ \" \" +repo.TotalPoints}</span> //       </li> //     ); //   } //   )} // </ul> // );\n}\nexport default List\n","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/sponsortableMod.js",["122","123","124","125","126"],"import Grid from '@material-ui/core/Grid'\nimport { data } from 'browserslist'\nimport { useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { ListItem } from '@material-ui/core'\nimport React, { useEffect } from 'react'\nimport '../App.css'\nimport addEntryData from './AdminSponsorTable'\nimport withListLoading1 from './sposor_loading'\n\nfunction SponsortableMod(props) {\n  const ListLoading1 = withListLoading1(addEntryData)\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n  })\n\n  var tableinfo = {title: \"Sponsors\",column1: \"Email\",column2: \"Account Type\"\n                  ,column3: \"Application Status\",column4: \"Fist Name\",column5: \"Last Name\",column6: \"IsSuspended\"};\n\n\n  useEffect(() => {\n    setAppState({ loading: true })\n    var apiUrl = props.link\n      // 'https://wn0wfce7a3.execute-api.us-east-1.amazonaws.com/dev/entries'\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((repos) => {\n        // console.log(repos)\n        // addEntryData(repos)\n        setAppState({ loading: false, repos: repos })\n      })\n  }, [setAppState])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\"></div>\n      <div className=\"repo-container\">\n        <ListLoading1 isLoading={appState.loading} repos={appState.repos} tableinfo={tableinfo} />\n      </div>\n    </div>\n  )\n\n  \n}\n\nexport default SponsortableMod\n","/Users/ThomasGriff/Documents/Senior_Spring/CPSC4910/project_git/Local_Repo/Master/src/Components/sposor_loading.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":3,"column":10,"nodeType":"133","messageId":"134","endLine":3,"endColumn":20},{"ruleId":"131","severity":1,"message":"135","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"131","severity":1,"message":"136","line":5,"column":10,"nodeType":"133","messageId":"134","endLine":5,"endColumn":18},{"ruleId":"131","severity":1,"message":"137","line":11,"column":8,"nodeType":"133","messageId":"134","endLine":11,"endColumn":21},{"ruleId":"131","severity":1,"message":"138","line":12,"column":10,"nodeType":"133","messageId":"134","endLine":12,"endColumn":14},{"ruleId":"131","severity":1,"message":"139","line":15,"column":7,"nodeType":"133","messageId":"134","endLine":15,"endColumn":14},{"ruleId":"131","severity":1,"message":"140","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":12},{"ruleId":"131","severity":1,"message":"141","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"135","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"131","severity":1,"message":"142","line":5,"column":10,"nodeType":"133","messageId":"134","endLine":5,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":34,"column":6,"nodeType":"145","endLine":34,"endColumn":19,"suggestions":"146"},{"ruleId":"127","replacedBy":"147"},{"ruleId":"129","replacedBy":"148"},{"ruleId":"131","severity":1,"message":"149","line":18,"column":8,"nodeType":"133","messageId":"134","endLine":18,"endColumn":15},{"ruleId":"131","severity":1,"message":"150","line":22,"column":8,"nodeType":"133","messageId":"134","endLine":22,"endColumn":22},{"ruleId":"131","severity":1,"message":"151","line":24,"column":10,"nodeType":"133","messageId":"134","endLine":24,"endColumn":20},{"ruleId":"131","severity":1,"message":"152","line":264,"column":3,"nodeType":"133","messageId":"134","endLine":264,"endColumn":14},{"ruleId":"131","severity":1,"message":"153","line":335,"column":7,"nodeType":"133","messageId":"134","endLine":335,"endColumn":11},{"ruleId":"131","severity":1,"message":"154","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":23},{"ruleId":"131","severity":1,"message":"155","line":7,"column":3,"nodeType":"133","messageId":"134","endLine":7,"endColumn":13},{"ruleId":"131","severity":1,"message":"156","line":8,"column":3,"nodeType":"133","messageId":"134","endLine":8,"endColumn":9},{"ruleId":"131","severity":1,"message":"157","line":9,"column":3,"nodeType":"133","messageId":"134","endLine":9,"endColumn":11},{"ruleId":"131","severity":1,"message":"139","line":24,"column":7,"nodeType":"133","messageId":"134","endLine":24,"endColumn":14},{"ruleId":"131","severity":1,"message":"158","line":69,"column":17,"nodeType":"133","messageId":"134","endLine":69,"endColumn":32},{"ruleId":"131","severity":1,"message":"159","line":71,"column":17,"nodeType":"133","messageId":"134","endLine":71,"endColumn":31},{"ruleId":"127","replacedBy":"160"},{"ruleId":"129","replacedBy":"161"},{"ruleId":"131","severity":1,"message":"149","line":18,"column":8,"nodeType":"133","messageId":"134","endLine":18,"endColumn":15},{"ruleId":"131","severity":1,"message":"150","line":22,"column":8,"nodeType":"133","messageId":"134","endLine":22,"endColumn":22},{"ruleId":"131","severity":1,"message":"151","line":25,"column":10,"nodeType":"133","messageId":"134","endLine":25,"endColumn":20},{"ruleId":"131","severity":1,"message":"152","line":261,"column":3,"nodeType":"133","messageId":"134","endLine":261,"endColumn":14},{"ruleId":"131","severity":1,"message":"153","line":330,"column":7,"nodeType":"133","messageId":"134","endLine":330,"endColumn":11},{"ruleId":"162","severity":1,"message":"163","line":334,"column":29,"nodeType":"164","messageId":"165","endLine":334,"endColumn":31},{"ruleId":"131","severity":1,"message":"140","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":12},{"ruleId":"131","severity":1,"message":"141","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"135","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"131","severity":1,"message":"142","line":5,"column":10,"nodeType":"133","messageId":"134","endLine":5,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":33,"column":6,"nodeType":"145","endLine":33,"endColumn":19,"suggestions":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'useState' is defined but never used.","'ReactDataGrid' is defined but never used.","'grid' is defined but never used.","'history' is assigned a value but never used.","'Grid' is defined but never used.","'data' is defined but never used.","'ListItem' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.link'. Either include it or remove the dependency array.","ArrayExpression",["169"],["167"],["168"],"'Tooltip' is defined but never used.","'FilterListIcon' is defined but never used.","'createData' is defined but never used.","'tablestruct' is assigned a value but never used.","'data' is assigned a value but never used.","'email_validator' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'CREATE_USER_URL' is assigned a value but never used.","'requestOptions' is assigned a value but never used.",["167"],["168"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["170"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"171","fix":"173"},"Update the dependencies array to be: [props.link, setAppState]",{"range":"174","text":"175"},{"range":"176","text":"175"},[1108,1121],"[props.link, setAppState]",[1097,1110]]