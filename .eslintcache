[{"D:\\temp git repo\\Master\\src\\index.js":"1","D:\\temp git repo\\Master\\src\\reportWebVitals.js":"2","D:\\temp git repo\\Master\\src\\App.js":"3","D:\\temp git repo\\Master\\src\\aws-exports.js":"4","D:\\temp git repo\\Master\\src\\pages\\PageNotFoundPage.js":"5","D:\\temp git repo\\Master\\src\\pages\\IndexPage.js":"6","D:\\temp git repo\\Master\\src\\pages\\ProfilePage.js":"7","D:\\temp git repo\\Master\\src\\pages\\AccountSetupPage.js":"8","D:\\temp git repo\\Master\\src\\pages\\ApplicationPage.js":"9","D:\\temp git repo\\Master\\src\\Components\\LoadingIcon.js":"10","D:\\temp git repo\\Master\\src\\Components\\UserProfileCard.js":"11","D:\\temp git repo\\Master\\src\\Components\\AccountSetupCard.js":"12","D:\\temp git repo\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js":"13","D:\\temp git repo\\Master\\src\\Components\\DriverApplicationCard.js":"14","D:\\temp git repo\\Master\\src\\Components\\LeftDrawer.js":"15","D:\\temp git repo\\Master\\src\\Helpers\\Constants.js":"16","D:\\temp git repo\\Master\\src\\Components\\TopAppBar.js":"17","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\index.js":"18","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\reportWebVitals.js":"19","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\App.js":"20","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProfilePage.js":"21","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AccountSetupPage.js":"22","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\IndexPage.js":"23","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\PageNotFoundPage.js":"24","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicationPage.js":"25","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicantManagementPage.js":"26","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogManagementPage.js":"27","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogBrowsingPage.js":"28","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AuditLogPage.js":"29","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ViewSponsorsPage.js":"30","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationPage.js":"31","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationSetupPage.js":"32","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\UserContext.js":"33","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrderReviewPage.js":"34","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\CommonFunctions.js":"35","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LoadingIcon.js":"36","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\DriverManagementPage.js":"37","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\TopAppBar.js":"38","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\UserProfileCard.js":"39","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\Constants.js":"40","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LeftDrawer.js":"41","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\EditAccountCard.js":"42","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js":"43","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AccountSetupCard.js":"44","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ProfileSelectionDialog.js":"45","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplicationManagementDialog.js":"46","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTable.js":"47","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogItemsPanel.js":"48","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CatalogItemDialog.js":"49","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverApplicationCard.js":"50","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteCatalogItemDialog.js":"51","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddCatalogItemDialog.js":"52","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SetAllPointRatiosDialog.js":"53","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverManagementDialog.js":"54","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSetupCard.js":"55","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationContent.js":"56","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SuperSponsorOrganizationContent.js":"57","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorAsDriverDialog.js":"58","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CartDialog.js":"59","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogSponsorDialog.js":"60","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectableSpecial.js":"61","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSponsorManagementPanel.js":"62","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteSponsorshipDialog.js":"63","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplyAgainDialog.js":"64","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectable.js":"65","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorProfileDialog.js":"66","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddSponsorProfileDialog.js":"67","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\aws-exports.js":"68"},{"size":517,"mtime":1612907774401,"results":"69","hashOfConfig":"70"},{"size":375,"mtime":1612907774403,"results":"71","hashOfConfig":"70"},{"size":1181,"mtime":1613361824075,"results":"72","hashOfConfig":"70"},{"size":469,"mtime":1613361642212,"results":"73","hashOfConfig":"70"},{"size":266,"mtime":1612907774402,"results":"74","hashOfConfig":"70"},{"size":5070,"mtime":1613360663661,"results":"75","hashOfConfig":"70"},{"size":1536,"mtime":1613361824082,"results":"76","hashOfConfig":"70"},{"size":1777,"mtime":1613361824081,"results":"77","hashOfConfig":"70"},{"size":1789,"mtime":1613361824081,"results":"78","hashOfConfig":"70"},{"size":344,"mtime":1613361824077,"results":"79","hashOfConfig":"70"},{"size":2969,"mtime":1613361824079,"results":"80","hashOfConfig":"70"},{"size":4555,"mtime":1613361824076,"results":"81","hashOfConfig":"70"},{"size":1269,"mtime":1613361824080,"results":"82","hashOfConfig":"70"},{"size":4757,"mtime":1613361824076,"results":"83","hashOfConfig":"70"},{"size":2835,"mtime":1613361824076,"results":"84","hashOfConfig":"70"},{"size":28,"mtime":1613361824080,"results":"85","hashOfConfig":"70"},{"size":876,"mtime":1613361824078,"results":"86","hashOfConfig":"70"},{"size":517,"mtime":1617990258782,"results":"87","hashOfConfig":"88"},{"size":375,"mtime":1617990258797,"results":"89","hashOfConfig":"88"},{"size":3637,"mtime":1617998460077,"results":"90","hashOfConfig":"88"},{"size":6463,"mtime":1617998463286,"results":"91","hashOfConfig":"88"},{"size":1914,"mtime":1617998462447,"results":"92","hashOfConfig":"88"},{"size":5274,"mtime":1617998462785,"results":"93","hashOfConfig":"88"},{"size":1136,"mtime":1617998463020,"results":"94","hashOfConfig":"88"},{"size":1831,"mtime":1617998462612,"results":"95","hashOfConfig":"88"},{"size":9654,"mtime":1617998462562,"results":"96","hashOfConfig":"88"},{"size":9068,"mtime":1617998463217,"results":"97","hashOfConfig":"88"},{"size":12956,"mtime":1617998463138,"results":"98","hashOfConfig":"88"},{"size":1162,"mtime":1617990258790,"results":"99","hashOfConfig":"88"},{"size":9782,"mtime":1617998463344,"results":"100","hashOfConfig":"88"},{"size":5148,"mtime":1617998462969,"results":"101","hashOfConfig":"88"},{"size":1602,"mtime":1617998462994,"results":"102","hashOfConfig":"88"},{"size":89,"mtime":1617990258779,"results":"103","hashOfConfig":"88"},{"size":9109,"mtime":1617998462876,"results":"104","hashOfConfig":"88"},{"size":981,"mtime":1617998462400,"results":"105","hashOfConfig":"88"},{"size":316,"mtime":1617990258759,"results":"106","hashOfConfig":"88"},{"size":12936,"mtime":1617998462713,"results":"107","hashOfConfig":"88"},{"size":1903,"mtime":1617998462148,"results":"108","hashOfConfig":"88"},{"size":1756,"mtime":1617998462182,"results":"109","hashOfConfig":"88"},{"size":40,"mtime":1617990258778,"results":"110","hashOfConfig":"88"},{"size":5510,"mtime":1617998461660,"results":"111","hashOfConfig":"88"},{"size":2266,"mtime":1617998461522,"results":"112","hashOfConfig":"88"},{"size":1269,"mtime":1617990258768,"results":"113","hashOfConfig":"88"},{"size":6671,"mtime":1617998460248,"results":"114","hashOfConfig":"88"},{"size":3909,"mtime":1617998462031,"results":"115","hashOfConfig":"88"},{"size":9898,"mtime":1617998460737,"results":"116","hashOfConfig":"88"},{"size":4354,"mtime":1617990258756,"results":"117","hashOfConfig":"88"},{"size":3547,"mtime":1617998460965,"results":"118","hashOfConfig":"88"},{"size":3792,"mtime":1617998460898,"results":"119","hashOfConfig":"88"},{"size":6796,"mtime":1617998733906,"results":"120","hashOfConfig":"88"},{"size":2848,"mtime":1617990258752,"results":"121","hashOfConfig":"88"},{"size":6329,"mtime":1617998460405,"results":"122","hashOfConfig":"88"},{"size":4305,"mtime":1617990258764,"results":"123","hashOfConfig":"88"},{"size":24718,"mtime":1617998461413,"results":"124","hashOfConfig":"88"},{"size":3752,"mtime":1617998461817,"results":"125","hashOfConfig":"88"},{"size":3805,"mtime":1617998461755,"results":"126","hashOfConfig":"88"},{"size":4246,"mtime":1617998462115,"results":"127","hashOfConfig":"88"},{"size":3918,"mtime":1617998462264,"results":"128","hashOfConfig":"88"},{"size":8472,"mtime":1617998460845,"results":"129","hashOfConfig":"88"},{"size":4276,"mtime":1617998461028,"results":"130","hashOfConfig":"88"},{"size":6376,"mtime":1617998461594,"results":"131","hashOfConfig":"88"},{"size":10544,"mtime":1617998461970,"results":"132","hashOfConfig":"88"},{"size":3001,"mtime":1617998461070,"results":"133","hashOfConfig":"88"},{"size":1774,"mtime":1617990258749,"results":"134","hashOfConfig":"88"},{"size":6284,"mtime":1617990258757,"results":"135","hashOfConfig":"88"},{"size":7574,"mtime":1617998462374,"results":"136","hashOfConfig":"88"},{"size":7331,"mtime":1617998460525,"results":"137","hashOfConfig":"88"},{"size":588,"mtime":1617990873783,"results":"138","hashOfConfig":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tc7ttx",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"1re6p0e",{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"175"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"175"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"175"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"175"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"175"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"175"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"175"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"175"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"175"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"175"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"175"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"175"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"175"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"175"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"175"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"175"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"175"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"175"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"175"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"175"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"175"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"175"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"175"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"175"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"175"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"D:\\temp git repo\\Master\\src\\index.js",[],"D:\\temp git repo\\Master\\src\\reportWebVitals.js",[],"D:\\temp git repo\\Master\\src\\App.js",[],"D:\\temp git repo\\Master\\src\\aws-exports.js",[],"D:\\temp git repo\\Master\\src\\pages\\PageNotFoundPage.js",[],"D:\\temp git repo\\Master\\src\\pages\\IndexPage.js",["301"],"D:\\temp git repo\\Master\\src\\pages\\ProfilePage.js",["302","303"],"D:\\temp git repo\\Master\\src\\pages\\AccountSetupPage.js",[],"D:\\temp git repo\\Master\\src\\pages\\ApplicationPage.js",[],"D:\\temp git repo\\Master\\src\\Components\\LoadingIcon.js",[],"D:\\temp git repo\\Master\\src\\Components\\UserProfileCard.js",["304"],"D:\\temp git repo\\Master\\src\\Components\\AccountSetupCard.js",[],"D:\\temp git repo\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js",[],"D:\\temp git repo\\Master\\src\\Components\\DriverApplicationCard.js",["305"],"D:\\temp git repo\\Master\\src\\Components\\LeftDrawer.js",[],"D:\\temp git repo\\Master\\src\\Helpers\\Constants.js",[],"D:\\temp git repo\\Master\\src\\Components\\TopAppBar.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\index.js",[],["306","307"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\reportWebVitals.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\App.js",["308"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProfilePage.js",["309","310"],"import React, { useState, useContext } from 'react'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport UserProfileCard from '../Components/UserProfileCard'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport { Button, Grid, Paper, Typography } from '@material-ui/core'\r\nimport EditAccountCard from '../Components/EditAccountCard'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport Amplify from 'aws-amplify'\r\nimport aws_exports from '../aws-exports'\r\n\r\nAmplify.configure(aws_exports)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}))\r\n\r\nfunction ProfilePageContent(props) {\r\n  const classes = useStyles()\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [newData, setNewData] = useState({\r\n    Username: props.userProfile.Username,\r\n    FirstName: props.userProfile.FirstName,\r\n    LastName: props.userProfile.LastName,\r\n    Bio: props.userProfile.Bio,\r\n    AccountType: props.userProfile.AccountType,\r\n    // SponsorEmailID: 'need to retrieve this',\r\n    // TotalPoints: 'need to retrieve this',\r\n    // ProfilePicture: 'need to retrieve this',\r\n  })\r\n  function setNewDataState(state) {\r\n    setNewData(state)\r\n  }\r\n\r\n  if (!isEditing) {\r\n    return (\r\n      <Grid container direction=\"row\" xs={12} justify=\"center\">\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          xs={12}\r\n          sm={8}\r\n          md={6}\r\n          lg={4}\r\n          xl={3}\r\n        >\r\n          <Paper className={classes.paper}>\r\n            <Grid item container justify=\"flex-end\">\r\n              {/* edit button */}\r\n              <Button\r\n                variant=\"text\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  setIsEditing(!isEditing)\r\n                }}\r\n              >\r\n                <Typography>Edit</Typography>\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <UserProfileCard userProfile={props.userProfile} />\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <br />\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container justify=\"center\">\r\n          <Grid item container xs={12} sm={8} md={6} lg={4} xl={3}>\r\n            <Paper className={classes.paper}>\r\n              <Grid container justify=\"flex-end\">\r\n                {/* cancel button */}\r\n                <Button\r\n                  variant=\"text\"\r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    ;(async () => {\r\n                      setNewData({\r\n                        Username: props.userProfile.Username,\r\n                        FirstName: props.userProfile.FirstName,\r\n                        LastName: props.userProfile.LastName,\r\n                        Bio: props.userProfile.Bio,\r\n                        AccountType: props.userProfile.AccountType,\r\n                      })\r\n                      setIsEditing(!isEditing)\r\n                    })()\r\n                  }}\r\n                >\r\n                  <Typography>Cancel</Typography>\r\n                </Button>\r\n\r\n                {/* submit button */}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setIsLoading(true)\r\n                    ;(async () => {\r\n                      // save the profile information\r\n                      props.setProfileState({\r\n                        Username: newData.Username,\r\n                        FirstName: newData.FirstName,\r\n                        LastName: newData.LastName,\r\n                        Bio: newData.Bio,\r\n                        AccountType: newData.AccountType,\r\n                      })\r\n\r\n                      let SAVE_USER_PROFILE_URL =\r\n                        'https://u902s79wa3.execute-api.us-east-1.amazonaws.com/dev/saveuserdetails'\r\n                      let requestOptions = {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({\r\n                          Username: newData.Username,\r\n                          FirstName: newData.FirstName,\r\n                          LastName: newData.LastName,\r\n                          Bio: newData.Bio,\r\n                          AccountType: newData.AccountType,\r\n                        }),\r\n                      }\r\n                      fetch(SAVE_USER_PROFILE_URL, requestOptions).then(() => {\r\n                        setIsLoading(false)\r\n                        setIsEditing(!isEditing)\r\n                      })\r\n                    })()\r\n                  }}\r\n                >\r\n                  <Typography>Save</Typography>\r\n                </Button>\r\n              </Grid>\r\n              <br></br>\r\n\r\n              {/* account info form */}\r\n              <Grid item>\r\n                <EditAccountCard\r\n                  userProfile={newData}\r\n                  setNewDataState={setNewDataState}\r\n                />\r\n              </Grid>\r\n\r\n              <br></br>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction ProfilePage() {\r\n  const classes = useStyles()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const userData = useContext(UserContext).user\r\n  const setUserData = useContext(UserContext).setUser\r\n\r\n  function setProfileState(state) {\r\n    setUserData(state)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* layout stuff */}\r\n      <LeftDrawer AccountType={userData.AccountType} />\r\n      <TopAppBar pageTitle=\"Your profile\" />\r\n\r\n      {/* content (starts after first div) */}\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {isLoading ? (\r\n          <LoadingIcon />\r\n        ) : (\r\n          <ProfilePageContent\r\n            userProfile={userData}\r\n            setProfileState={setProfileState}\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfilePage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AccountSetupPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\IndexPage.js",["311"],"import React, { useContext, useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Typography from '@material-ui/core/Typography'\nimport LeftDrawer from '../Components/LeftDrawer'\nimport TopAppBar from '../Components/TopAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\nimport LoadingIcon from '../Components/LoadingIcon'\nimport { UserContext } from '../Helpers/UserContext'\nimport ProfileSelectionDialog from '../Components/ProfileSelectionDialog'\n\n// set up styling\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))\n\nfunction IndexPage() {\n  const [isLoading, setIsLoading] = useState(true)\n  const classes = useStyles()\n  let history = useHistory()\n  const userData = useContext(UserContext).user\n  // const setUserData = useContext(UserContext).setUser\n  const activeProfile = useContext(UserContext).activeProfile\n  const setActiveProfile = useContext(UserContext).setActiveProfile\n\n  const [pageUpdate, setPageUpdate] = useState(0)\n  function fullPageUpdateState() {\n    setPageUpdate(pageUpdate + 1)\n  }\n\n  const [\n    profileSelectionDialogIsOpen,\n    setProfileSelectionDialogIsOpen,\n  ] = useState(false)\n  function setProfileSelectionDialogIsOpenState(state, refresh) {\n    setProfileSelectionDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      // start loading animation\n      setIsLoading(true)\n\n      if (userData.AccountStatus === 0) {\n        history.push('/account-setup')\n      } else if (\n        userData.AccountType === 'Sponsor' &&\n        !userData.Organization &&\n        !activeProfile\n      ) {\n        history.push('/organization-setup')\n      } else if (\n        userData.AccountType === 'Sponsor' &&\n        userData.Organization &&\n        !activeProfile\n      ) {\n        setProfileSelectionDialogIsOpenState(true)\n      }\n      setIsLoading(false)\n    })()\n  }, [])\n\n  // show loading screen if data is still being fetched\n  if (isLoading) {\n    return (\n      <div className={classes.root}>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          <LoadingIcon />\n        </main>\n      </div>\n    )\n  } else {\n    return (\n      <div className={classes.root}>\n        {/* layout stuff */}\n        <TopAppBar pageTitle=\"Home\"></TopAppBar>\n        <LeftDrawer AccountType={userData.AccountType} />\n\n        <ProfileSelectionDialog\n          dialogProps={{\n            profileSelectionDialogIsOpen: profileSelectionDialogIsOpen,\n            setProfileSelectionDialogIsOpenState: setProfileSelectionDialogIsOpenState,\n            fullPageUpdateState: fullPageUpdateState,\n            activeProfile: activeProfile,\n            setActiveProfile: setActiveProfile,\n          }}\n        />\n\n        {/* page content (starts after first div) */}\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Typography paragraph>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Rhoncus\n            dolor purus non enim praesent elementum facilisis leo vel. Risus at\n            ultrices mi tempus imperdiet. Semper risus in hendrerit gravida\n            rutrum quisque non tellus. Convallis convallis tellus id interdum\n            velit laoreet id donec ultrices. Odio morbi quis commodo odio aenean\n            sed adipiscing. Amet nisl suscipit adipiscing bibendum est ultricies\n            integer quis. Cursus euismod quis viverra nibh cras. Metus vulputate\n            eu scelerisque felis imperdiet proin fermentum leo. Mauris commodo\n            quis imperdiet massa tincidunt. Cras tincidunt lobortis feugiat\n            vivamus at augue. At augue eget arcu dictum varius duis at\n            consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem\n            donec massa sapien faucibus et molestie ac.\n          </Typography>\n          <Typography paragraph>\n            Consequat mauris nunc congue nisi vitae suscipit. Fringilla est\n            ullamcorper eget nulla facilisi etiam dignissim diam. Pulvinar\n            elementum integer enim neque volutpat ac tincidunt. Ornare\n            suspendisse sed nisi lacus sed viverra tellus. Purus sit amet\n            volutpat consequat mauris. Elementum eu facilisis sed odio morbi.\n            Euismod lacinia at quis risus sed vulputate odio. Morbi tincidunt\n            ornare massa eget egestas viverra accumsan in. In hendrerit gravida\n            rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem\n            et tortor. Habitant morbi tristique senectus et. Adipiscing elit\n            duis tristique sollicitudin nibh sit. Ornare aenean euismod\n            elementum nisi quis eleifend. Commodo viverra maecenas accumsan\n            lacus vel facilisis. Nulla posuere sollicitudin aliquam ultrices\n            sagittis orci a.\n          </Typography>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default IndexPage\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\PageNotFoundPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicationPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ApplicantManagementPage.js",["312"],"import React, { useEffect, useState, useContext } from 'react'\nimport LeftDrawer from '../Components/LeftDrawer'\nimport TopAppBar from '../Components/TopAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\nimport { Grid, Paper, Typography } from '@material-ui/core'\nimport LoadingIcon from '../Components/LoadingIcon'\nimport ApplicationManagementDialog from '../Components/ApplicationManagementDialog'\nimport { UserContext } from '../Helpers/UserContext'\nimport GenericTable from '../Components/GenericTable'\nrequire('datejs')\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))\n\nconst ApplicantManagementPage = () => {\n  const [dialogIsOpen, setDialogIsOpen] = useState(false)\n  function setDialogIsOpenState(state, refresh) {\n    setDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  const [driverProfiles, setDriverProfiles] = useState(null)\n  const [applicantData, setApplicantData] = useState(null)\n\n  const [applicants, setApplicants] = useState(null)\n  function setApplicantState(state) {\n    setApplicants(state)\n  }\n\n  const [oldApplicants, setOldApplicants] = useState(null)\n\n  const [selectedApplicant, setSelectedApplicant] = useState(null)\n  function setSelectedApplicantState(state) {\n    setSelectedApplicant(state)\n  }\n\n  const [isLoading, setIsLoading] = useState(true)\n  const [pageUpdate, setPageUpdate] = useState(0)\n\n  const userData = useContext(UserContext).user\n\n  const table1HeadCells = [\n    {\n      id: 'Username',\n      label: 'Username',\n      isDate: false,\n      width: 200,\n    },\n    {\n      id: 'DriverName',\n      label: 'Name',\n      isDate: false,\n      width: 200,\n    },\n    {\n      id: 'AppSubmissionDate',\n      label: 'Submission date',\n      isDate: true,\n      width: 250,\n    },\n  ]\n\n  const table2HeadCells = [\n    {\n      id: 'Username',\n      label: 'Username',\n      isDate: false,\n      width: 100,\n    },\n    {\n      id: 'Response',\n      label: 'Decision',\n      isDate: true,\n      width: 100,\n    },\n    {\n      id: 'SubmissionDate',\n      label: 'Submission date',\n      isDate: true,\n      width: 250,\n    },\n    {\n      id: 'ResponseDate',\n      label: 'Response date',\n      isDate: true,\n      width: 250,\n    },\n  ]\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      // fetch and parse sponsor's driver's profiles\n      let GET_DRIVERDATA_LIST = `https://rb6nqfuvvg.execute-api.us-east-1.amazonaws.com/dev/driverdatabysponsor?SponsorUsername=${userData.Username}`\n      const driverdata_response = await fetch(GET_DRIVERDATA_LIST)\n      const driverdata_json = await driverdata_response.json()\n      const driverdata_parsed = JSON.parse(driverdata_json.body.toString())\n      const driverdata_reformatted = driverdata_parsed.map((val) => {\n        if (val) {\n          return {\n            Username: val.Username.S,\n            FirstName: val.FirstName.S,\n            LastName: val.LastName.S,\n            AccountType: val.AccountType.S,\n            AccountStatus: parseInt(val.AccountStatus.N),\n            Bio: val.Bio.S,\n          }\n        } else {\n          return null\n        }\n      })\n\n      //  fetch applicant list\n      let GET_SPONSORSHIP_LIST = `https://unmqqiwf1a.execute-api.us-east-1.amazonaws.com/dev/applist?Username=${userData.Username}`\n      const sponsorship_response = await fetch(GET_SPONSORSHIP_LIST)\n      const sponsorship_json = await sponsorship_response.json()\n\n      // parse the applicant data\n      let allApplicants_ugly = JSON.parse(sponsorship_json.body.toString())\n        .Items\n      let allApplicants = allApplicants_ugly.map((val) => {\n        return {\n          SponsorshipID: val.SponsorshipID ? val.SponsorshipID.S : null,\n          SponsorID: val.SponsorID ? val.SponsorID.S : null,\n          DriverID: val.DriverID ? val.DriverID.S : null,\n          Status: val.Status ? parseInt(val.Status.N) : null,\n          Points: val.Points ? parseInt(val.Points.N) : null,\n          PointDollarRatio: val.PointDollarRatio\n            ? parseFloat(val.PointDollarRatio.N)\n            : null,\n\n          AppSubmissionDate: val.AppSubmissionDate\n            ? val.AppSubmissionDate.S.split('.')[0].replace(' ', 'T')\n            : null,\n          AppComments: val.AppComments ? val.AppComments.S : null,\n          AppDecisionDate:\n            parseInt(val.Status.N) > 0 && val.AppDecisionDate\n              ? val.AppDecisionDate.S.split('.')[0].replace(' ', 'T')\n              : null,\n          AppDecisionReason:\n            parseInt(val.Status.N) && val.AppDecisionReason\n              ? val.AppDecisionReason.S\n              : null,\n        }\n      })\n\n      // format applicant data into table-friendly format\n      let applicantTableData = allApplicants.map((val) => {\n        if (val.Status > 0) {\n          return {\n            Username: val.DriverID,\n            Response:\n              val.Status === 1\n                ? 'Denied'\n                : val.Status === 2 || val.Status === 3\n                ? 'Accepted'\n                : null,\n            SubmissionDate: val.AppSubmissionDate,\n            ResponseDate: val.AppDecisionDate,\n          }\n        } else {\n          let user_profile = driverdata_reformatted.find((val2) => {\n            return val2.Username === val.DriverID\n          })\n\n          return {\n            Username: val.DriverID,\n            Name: user_profile.FirstName + ' ' + user_profile.LastName,\n            SubmissionDate: val.AppSubmissionDate,\n          }\n        }\n      })\n\n      let pendingApplicants = applicantTableData.filter((item) => {\n        return !item.Response\n      })\n\n      let processedApplicants = applicantTableData.filter((item) => {\n        return item.Response === 'Accepted' || item.Response === 'Denied'\n      })\n\n      setApplicantData(allApplicants)\n      setDriverProfiles(driverdata_reformatted)\n      setApplicants(pendingApplicants)\n      setOldApplicants(processedApplicants)\n      setIsLoading(false)\n    })()\n  }, [pageUpdate])\n\n  const classes = useStyles()\n\n  if (!isLoading) {\n    return (\n      <div className={classes.root}>\n        {/* layout stuff */}\n        <TopAppBar pageTitle=\"Applicants\"></TopAppBar>\n        <LeftDrawer AccountType={userData.AccountType} />\n\n        {/* page content (starts after first div) */}\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          {selectedApplicant ? (\n            <ApplicationManagementDialog\n              applicationDetails={applicantData.find((val) => {\n                return val.DriverID === selectedApplicant.Username\n              })}\n              driverDetails={driverProfiles}\n              dialogIsOpen={dialogIsOpen}\n              setDialogIsOpenState={setDialogIsOpenState}\n            />\n          ) : null}\n          <Grid\n            container\n            justify=\"center\"\n            alignContent=\"center\"\n            direction=\"row\"\n            spacing={4}\n          >\n            {/* pending applicant table */}\n            <Grid item xs={10} xl={6}>\n              <Paper>\n                <div style={{ padding: 20 }}>\n                  <Typography variant=\"h6\">Pending applications</Typography>\n                  <Typography>\n                    Click on an applicant to view and respond to their\n                    application.\n                  </Typography>\n                  <br></br>\n\n                  <GenericTable\n                    headCells={table1HeadCells}\n                    data={applicants}\n                    setDataState={setApplicantState}\n                    tableKey=\"Username\"\n                    showKey={true}\n                    initialSortedColumn=\"AppSubmissionDate\"\n                    initialSortedDirection=\"desc\"\n                    selectedRow={selectedApplicant}\n                    setSelectedRow={setSelectedApplicantState}\n                    dialogIsOpen={dialogIsOpen}\n                    setDialogIsOpenState={setDialogIsOpenState}\n                  />\n                </div>\n              </Paper>\n            </Grid>\n\n            {/* applicant history table */}\n            <Grid item xs={10} xl={6}>\n              <Paper>\n                <div style={{ padding: 20 }}>\n                  <Typography variant=\"h6\">Applicant history</Typography>\n                  <Typography>\n                    Click on a previous applicant to view their application and\n                    your decision.\n                  </Typography>\n                  <br></br>\n\n                  <GenericTable\n                    headCells={table2HeadCells}\n                    data={oldApplicants}\n                    setDataState={setApplicantState}\n                    tableKey=\"Username\"\n                    showKey={true}\n                    initialSortedColumn=\"ResponseDate\"\n                    initialSortedDirection=\"desc\"\n                    selectedRow={selectedApplicant}\n                    setSelectedRow={setSelectedApplicantState}\n                    dialogIsOpen={dialogIsOpen}\n                    setDialogIsOpenState={setDialogIsOpenState}\n                  />\n                </div>\n              </Paper>\n            </Grid>\n          </Grid>\n        </main>\n      </div>\n    )\n  } else {\n    return (\n      <div className={classes.root}>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <LoadingIcon />\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default ApplicantManagementPage\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogManagementPage.js",["313","314"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport ChooseCatalogItemsPanel from '../Components/ChooseCatalogItemsPanel'\r\nimport CatalogItemDialog from '../Components/CatalogItemDialog'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport AddCatalogItemDialog from '../Components/AddCatalogItemDialog'\r\nimport DeleteCatalogItemDialog from '../Components/DeleteCatalogItemDialog'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nconst ProductCatalogManagementPage = () => {\r\n  const classes = useStyles()\r\n  const userData = useContext(UserContext).user\r\n\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const [itemTableData, setItemTableData] = useState(null)\r\n  function setItemTableDataState(state) {\r\n    setItemTableData(state)\r\n  }\r\n\r\n  const [allCatalogData, setAllCatalogData] = useState(null)\r\n  const setAllCatalogDataState = (state) => {\r\n    setAllCatalogData(state)\r\n  }\r\n\r\n  // dialog control\r\n  const [addItemDialogIsOpen, setAddItemDialogIsOpen] = useState(false)\r\n  function setAddItemDialogIsOpenState(state, refresh) {\r\n    setAddItemDialogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [deleteItemCatalogIsOpen, setDeleteItemCatalogIsOpen] = useState(false)\r\n  function setDeleteItemCatalogIsOpenState(state, refresh) {\r\n    setDeleteItemCatalogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [itemManagementDialogIsOpen, setItemManagementDialogIsOpen] = useState(\r\n    false,\r\n  )\r\n  function setItemManagementDialogIsOpenState(state, refresh) {\r\n    setItemManagementDialogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [pageUpdate, setPageUpdate] = useState(0)\r\n  function fullPageUpdateState() {\r\n    setPageUpdate(pageUpdate + 1)\r\n  }\r\n\r\n  const [selectedCatalogEntry, setSelectedCategoryEntry] = useState(null)\r\n  function setSelectedCategoryEntryState(state) {\r\n    setSelectedCategoryEntry(state)\r\n  }\r\n\r\n  const [checkedItems, setCheckedItems] = useState(null)\r\n  function setCheckedItemsState(state) {\r\n    setCheckedItems(state)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      let CATALOG_ITEMS_URL = `https://bfv61oiy3h.execute-api.us-east-1.amazonaws.com/dev/getcatalogitems?SponsorID=${userData.Username}`\r\n      let catalog_items_raw = await fetch(CATALOG_ITEMS_URL)\r\n      let catalog_items_json = await catalog_items_raw.json()\r\n      let catalog_items_array = await JSON.parse(\r\n        catalog_items_json.body.toString(),\r\n      )\r\n      let catalog_items_parsed = catalog_items_array.Items[0].ProductIDs.L\r\n      let catalog_items_formatted = catalog_items_parsed.map(\r\n        (element) => element.S,\r\n      )\r\n\r\n      let GET_EBAY_ITEMS_URL =\r\n        'https://emdjjz0xd8.execute-api.us-east-1.amazonaws.com/dev/getebayitemsbyproductids'\r\n      let requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          ProductIDs: catalog_items_formatted,\r\n        }),\r\n      }\r\n      let item_data_raw = await fetch(GET_EBAY_ITEMS_URL, requestOptions)\r\n      let item_data_json = await item_data_raw.json()\r\n      let item_data_parsed = await JSON.parse(item_data_json.body)\r\n\r\n      let item_data_array = item_data_parsed.Item.map((element) => {\r\n        return {\r\n          ProductID: element.ItemID,\r\n          Name: element.Title,\r\n          PhotoURL: element.PictureURL[0],\r\n          Stock: element.Quantity - element.QuantitySold,\r\n          Description: element.Description.slice(0, 550),\r\n          Price: element.ConvertedCurrentPrice.Value,\r\n          Location: element.Location,\r\n        }\r\n      })\r\n\r\n      let catalog_item_table_data = item_data_array.map((element) => {\r\n        return {\r\n          ProductID: element.ProductID,\r\n          PhotoURL: element.PhotoURL,\r\n          Name: element.Name,\r\n          Price: element.Price,\r\n          Stock: element.Stock,\r\n        }\r\n      })\r\n\r\n      setAllCatalogData(item_data_array)\r\n      setCheckedItems(\r\n        catalog_item_table_data.map((element) => {\r\n          return {\r\n            key: element.ProductID,\r\n            isChecked: false,\r\n          }\r\n        }),\r\n      )\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, [pageUpdate])\r\n\r\n  if (isLoading) {\r\n    return <LoadingIcon />\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        {/* layout stuff */}\r\n        <TopAppBar pageTitle=\"Catalog management\"></TopAppBar>\r\n        <LeftDrawer AccountType={userData.AccountType} />\r\n        {/* page content (starts after first div) */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <CatalogItemDialog\r\n            dialogProps={{\r\n              itemDialogIsOpen: itemManagementDialogIsOpen,\r\n              setItemDialogIsOpen: setItemManagementDialogIsOpenState,\r\n              fullPageUpdateState: fullPageUpdateState,\r\n              selectedCatalogEntry: selectedCatalogEntry\r\n                ? allCatalogData.find((element) => {\r\n                    return element.ProductID === selectedCatalogEntry.ProductID\r\n                  })\r\n                : null,\r\n              ActionSection: () => {\r\n                return (\r\n                  <Grid item container xs={12} spacing={1}>\r\n                    <Grid item>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        // style={{ backgroundColor: '#444444', color: 'White' }}\r\n                        onClick={() => {\r\n                          let new_checked_items = checkedItems.map(\r\n                            (element) => {\r\n                              if (\r\n                                element.key === selectedCatalogEntry.ProductID\r\n                              ) {\r\n                                return {\r\n                                  ...element,\r\n                                  isChecked: true,\r\n                                }\r\n                              } else {\r\n                                return element\r\n                              }\r\n                            },\r\n                          )\r\n\r\n                          setCheckedItems(new_checked_items)\r\n                          setItemManagementDialogIsOpenState(false)\r\n                        }}\r\n                      >\r\n                        Select item\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                )\r\n              },\r\n            }}\r\n          />\r\n          <AddCatalogItemDialog\r\n            dialogProps={{\r\n              addItemDialogIsOpen: addItemDialogIsOpen,\r\n              setAddItemDialogIsOpenState: setAddItemDialogIsOpenState,\r\n              fullPageUpdateState: fullPageUpdateState,\r\n              allCatalogData: allCatalogData,\r\n              setAllCatalogDataState: setAllCatalogDataState,\r\n            }}\r\n          />\r\n\r\n          <DeleteCatalogItemDialog\r\n            dialogProps={{\r\n              deleteItemCatalogIsOpen: deleteItemCatalogIsOpen,\r\n              setDeleteItemCatalogIsOpenState: setDeleteItemCatalogIsOpenState,\r\n              fullPageUpdateState: fullPageUpdateState,\r\n              allCatalogData: allCatalogData,\r\n              setAllCatalogDataState: setAllCatalogDataState,\r\n              checkedItems: checkedItems,\r\n            }}\r\n          />\r\n\r\n          <Grid container justify=\"center\">\r\n            <Grid item sm={12} md={11} lg={9} xl={7}>\r\n              <ChooseCatalogItemsPanel\r\n                tableProps={{\r\n                  data: allCatalogData,\r\n                  setDataState: setItemTableDataState,\r\n                  selectedRow: selectedCatalogEntry,\r\n                  setSelectedRow: setSelectedCategoryEntryState,\r\n                  dialogIsOpen: itemManagementDialogIsOpen,\r\n                  setDialogIsOpen: setItemManagementDialogIsOpenState,\r\n                  setCheckedItemsState: setCheckedItemsState,\r\n                  checkedItems: checkedItems,\r\n                }}\r\n                dialogProps={{\r\n                  itemManagementDialogIsOpen: itemManagementDialogIsOpen,\r\n                  setItemManagementDialogIsOpenState: setItemManagementDialogIsOpenState,\r\n                  addItemDialogIsOpen: addItemDialogIsOpen,\r\n                  setAddItemDialogIsOpenState: setAddItemDialogIsOpenState,\r\n                  allCatalogData: allCatalogData,\r\n                  setAllCatalogDataState: setAllCatalogDataState,\r\n                  setDeleteItemCatalogIsOpenState: setDeleteItemCatalogIsOpenState,\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProductCatalogManagementPage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ProductCatalogBrowsingPage.js",["315"],"import React, { useContext, useEffect, useState } from 'react'\nimport LeftDrawer from '../Components/LeftDrawer'\nimport TopAppBar from '../Components/TopAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\nimport {\n  Button,\n  Divider,\n  Grid,\n  IconButton,\n  MenuItem,\n  Select,\n  Typography,\n} from '@material-ui/core'\nimport { UserContext } from '../Helpers/UserContext'\nimport ChooseCatalogSponsorDialog from '../Components/ChooseCatalogSponsorDialog'\nimport CartDialog from '../Components/CartDialog'\nimport LoadingIcon from '../Components/LoadingIcon'\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))\n\nconst ProductCatalogBrowsingPage = (props) => {\n  const classes = useStyles()\n\n  let userData = useContext(UserContext).user\n  // TODO: use this prop to let a sponsor browse a driver's catalog.\n  if (props.activeDriver) userData = props.activeDriver\n\n  const [pageUpdate, setPageUpdate] = useState(0)\n  const [\n    sponsorSelectionDialogIsOpen,\n    setSponsorSelectionDialogIsOpen,\n  ] = useState(true)\n  function setSponsorSelectionDialogIsOpenState(state, refresh) {\n    setSponsorSelectionDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [catalogItems, setCatalogItems] = useState(null)\n  const [activeSponsor, setActiveSponsor] = useState(false)\n\n  const [cart, setCart] = useState([])\n  const [cartDialogIsOpen, setCartDialogIsOpen] = useState(null)\n  function setCartDialogIsOpenState(state, refresh) {\n    setCartDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  function addItemToCart(item, quantity) {\n    let original_cart = [...cart]\n\n    // if item already exists in the cart, just change the quantity\n    let search_result = original_cart.find((element) => {\n      return element.ProductID === item.ProductID\n    })\n\n    if (!search_result) {\n      original_cart.push({\n        ProductID: item.ProductID,\n        Quantity: quantity,\n        FullItemDetails: item,\n      })\n      setCart(original_cart)\n    } else {\n      // update cart\n      let updated_cart = cart.map((element) => {\n        if (element.ProductID === item.ProductID) {\n          return {\n            ...element,\n            Quantity: element.Quantity + quantity,\n          }\n        } else {\n          return {\n            ...element,\n          }\n        }\n      })\n      setCart(updated_cart)\n    }\n  }\n\n  function changeItemQuantity(item, newQuantity) {\n    let updated_cart = cart.map((element) => {\n      if (element.ProductID === item.ProductID) {\n        return {\n          ...element,\n          Quantity: newQuantity,\n        }\n      } else {\n        return {\n          ...element,\n        }\n      }\n    })\n\n    setCart(updated_cart)\n  }\n\n  function removeItem(item) {\n    let updated_cart = cart.filter((element) => {\n      return element.ProductID !== item.ProductID\n    })\n\n    setCart(updated_cart)\n  }\n\n  const [registeredSponsors, setRegisteredSponsors] = useState(null)\n\n  async function setActiveSponsorState(state) {\n    setIsLoading(true)\n    setActiveSponsor(state)\n\n    let CATALOG_ITEMS_URL = `https://bfv61oiy3h.execute-api.us-east-1.amazonaws.com/dev/getcatalogitems?SponsorID=${state.SponsorID}`\n    let catalog_items_raw = await fetch(CATALOG_ITEMS_URL)\n    let catalog_items_json = await catalog_items_raw.json()\n    let catalog_items_array = await JSON.parse(\n      catalog_items_json.body.toString(),\n    )\n    let catalog_items_parsed = await catalog_items_array.Items[0].ProductIDs.L\n    let catalog_items_formatted = catalog_items_parsed.map(\n      (element) => element.S,\n    )\n\n    let GET_EBAY_ITEMS_URL =\n      'https://emdjjz0xd8.execute-api.us-east-1.amazonaws.com/dev/getebayitemsbyproductids'\n    let requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        ProductIDs: catalog_items_formatted,\n      }),\n    }\n    let item_data_raw = await fetch(GET_EBAY_ITEMS_URL, requestOptions)\n    let item_data_json = await item_data_raw.json()\n    let item_data_parsed = JSON.parse(item_data_json.body)\n\n    let item_data_array = item_data_parsed.Item.map((element) => {\n      return {\n        ProductID: element.ItemID,\n        Name: element.Title,\n        PhotoURL: element.PictureURL[0],\n        Stock: element.Quantity - element.QuantitySold,\n        Description: element.Description.slice(0, 550),\n        Price: element.ConvertedCurrentPrice.Value,\n        Location: element.Location,\n      }\n    }).filter((element) => element.Stock > 0)\n\n    setCatalogItems(item_data_array)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      let GET_DRIVERS_SPONSORS_URL = `https://8mhdaeq2kl.execute-api.us-east-1.amazonaws.com/dev/getuserdetails/?DriverID=${userData.Username}`\n      let partnered_sponsors_response = await fetch(GET_DRIVERS_SPONSORS_URL)\n      let partnered_sponsors_data = await partnered_sponsors_response.json()\n      let partnered_sponsors_array = await JSON.parse(\n        partnered_sponsors_data.body.toString(),\n      ).Items\n\n      let active_sponsors_array = partnered_sponsors_array.filter(\n        (element) =>\n          parseInt(element.Status.N) === 2 &&\n          parseInt(element.AccountStatus.N) === 1,\n      )\n\n      let active_sponsors_formatted = active_sponsors_array.map((element) => {\n        return {\n          SponsorID: element.SponsorID.S,\n          SponsorName: element.FirstName.S + ' ' + element.LastName.S,\n          Points: parseInt(element.Points.N),\n          SponsorOrganization: element.Organization.S,\n          PointToDollarRatio: parseFloat(element.PointDollarRatio.N),\n        }\n      })\n\n      setRegisteredSponsors(active_sponsors_formatted)\n    })().then(() => {\n      setIsLoading(false)\n    })\n  }, [])\n\n  let cart_count = cart.reduce((prev, curr) => {\n    let item_count = parseInt(prev) + parseInt(curr.Quantity)\n\n    return item_count\n  }, 0)\n\n  console.log(cart_count)\n\n  if (!isLoading) {\n    return (\n      <div className={classes.root}>\n        <ChooseCatalogSponsorDialog\n          dialogProps={{\n            dialogIsOpen: sponsorSelectionDialogIsOpen,\n            setDialogIsOpenState: setSponsorSelectionDialogIsOpenState,\n            activeSponsor: activeSponsor,\n            setActiveSponsor: setActiveSponsorState,\n          }}\n        />\n\n        <CartDialog\n          dialogProps={{\n            dialogIsOpen: cartDialogIsOpen,\n            setDialogIsOpenState: setCartDialogIsOpenState,\n            activeSponsor: activeSponsor,\n            setActiveSponsor: setActiveSponsorState,\n            activeDriver: userData,\n            cart: cart,\n            changeItemQuantity: changeItemQuantity,\n            removeItem: removeItem,\n          }}\n        />\n\n        {/* layout stuff */}\n        <TopAppBar\n          pageTitle=\"Product catalog\"\n          customItem={\n            <Grid item xs={12} container justify=\"space-between\">\n              <Grid item align=\"left\">\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={activeSponsor.SponsorID}\n                  variant=\"standard\"\n                  style={{ color: 'white' }}\n                  fullWidth\n                >\n                  {registeredSponsors\n                    ? registeredSponsors.map((element) => (\n                        <MenuItem\n                          onClick={() => {\n                            setCart([])\n                            setActiveSponsorState(element)\n                          }}\n                          value={element.SponsorID}\n                        >\n                          {element.SponsorOrganization +\n                            ': ' +\n                            element.SponsorName}\n                        </MenuItem>\n                      ))\n                    : null}\n                </Select>\n              </Grid>\n              <Grid\n                item\n                xs={4}\n                container\n                spacing={1}\n                justify=\"flex-end\"\n                alignItems=\"center\"\n              >\n                <Grid item>{activeSponsor.Points} points</Grid>\n                <Grid item>\n                  <IconButton\n                    onClick={() => {\n                      setCartDialogIsOpenState(true)\n                    }}\n                  >\n                    <ShoppingCartIcon style={{ color: 'white' }} />\n                  </IconButton>\n                  {cart_count}\n                </Grid>\n              </Grid>\n            </Grid>\n          }\n        ></TopAppBar>\n        <LeftDrawer AccountType={userData.AccountType} />\n\n        {/* page content (starts after first div) */}\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          <Grid container>\n            {!isLoading ? (\n              <div>\n                {!activeSponsor ||\n                !catalogItems ||\n                catalogItems.length > 0 ? null : (\n                  <Grid item xs={12}>\n                    <Typography>This sponsor has no catalog items</Typography>\n                  </Grid>\n                )}\n                {activeSponsor ? (\n                  <Grid item xs={12} container justify=\"flex-start\">\n                    <Grid item xs={12}>\n                      <br />\n                    </Grid>\n                    <Grid item container xs={12} spacing={4}>\n                      {catalogItems.map((element) => {\n                        return (\n                          <Grid\n                            item\n                            container\n                            xs={12}\n                            justify=\"flex-start\"\n                            spacing={4}\n                          >\n                            <Grid item>\n                              <img\n                                src={element.PhotoURL}\n                                alt=\"product\"\n                                style={{\n                                  maxWidth: '250px',\n                                  maxHeight: '275px',\n                                  minWidth: '250px',\n                                }}\n                              />\n                            </Grid>\n                            <Grid item container xs={7}>\n                              <Grid item xs={12}>\n                                <Typography>\n                                  <b style={{ color: '#444444' }}>\n                                    {element.Name}\n                                  </b>\n                                </Typography>\n                              </Grid>\n\n                              <Grid item xs={12} align=\"right\">\n                                <Typography>\n                                  {element.Stock} in stock\n                                </Typography>\n                              </Grid>\n                              <Grid item xs={12} align=\"right\">\n                                <Typography>\n                                  {Math.ceil(\n                                    element.Price /\n                                      activeSponsor.PointToDollarRatio,\n                                  )}{' '}\n                                  Points\n                                </Typography>\n                              </Grid>\n\n                              <Grid item xs={12} align=\"right\">\n                                <Button\n                                  variant=\"contained\"\n                                  color=\"primary\"\n                                  onClick={() => {\n                                    addItemToCart(element, 1)\n                                  }}\n                                >\n                                  Add to cart\n                                </Button>\n                              </Grid>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                              <Divider />\n                            </Grid>\n                          </Grid>\n                        )\n                      })}\n                    </Grid>\n                    <Grid item xs={12}>\n                      <br />\n                    </Grid>\n                  </Grid>\n                ) : (\n                  <p>choose a sponsor to view their dialog</p>\n                )}\n              </div>\n            ) : (\n              <LoadingIcon />\n            )}\n          </Grid>\n        </main>\n      </div>\n    )\n  } else {\n    return <LoadingIcon />\n  }\n}\n\nexport default ProductCatalogBrowsingPage\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\AuditLogPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\ViewSponsorsPage.js",["316"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport { Button, Grid, Paper, Typography } from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport GenericTable from '../Components/GenericTable'\r\nimport { useHistory } from 'react-router'\r\nimport ViewSponsorAsDriverDialog from '../Components/ViewSponsorAsDriverDialog'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nlet table2HeadCells = [\r\n  {\r\n    id: 'Organization',\r\n    label: 'Organization',\r\n    isDate: false,\r\n    width: 50,\r\n  },\r\n  {\r\n    id: 'FirstName',\r\n    label: 'First name',\r\n    isDate: false,\r\n    width: 50,\r\n  },\r\n  {\r\n    id: 'LastName',\r\n    label: 'Last name',\r\n    isDate: false,\r\n    width: 50,\r\n  },\r\n  {\r\n    id: 'ApplicationDate',\r\n    label: 'Submitted on',\r\n    isDate: false,\r\n    width: 200,\r\n  },\r\n]\r\n\r\nconst ViewSponsorsPage = () => {\r\n  const classes = useStyles()\r\n  let history = useHistory()\r\n\r\n  const userData = useContext(UserContext).user\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [pageUpdate, setPageUpdate] = useState(0)\r\n\r\n  // dialog control\r\n  const [dialogIsOpen, setDialogIsOpen] = useState(false)\r\n  function setDialogIsOpenState(state, refresh) {\r\n    setDialogIsOpen(state)\r\n\r\n    if (refresh) {\r\n      setPageUpdate(pageUpdate + 1)\r\n    }\r\n  }\r\n\r\n  const [table1HeadCells, setTable1HeadCells] = useState(null)\r\n\r\n  const [table1Data, setTable1Data] = useState(null)\r\n  function setTable1DataState(state) {\r\n    setTable1Data(state)\r\n  }\r\n\r\n  const [table2Data, setTable2Data] = useState(null)\r\n  function setTable2DataState(state) {\r\n    setTable2Data(state)\r\n  }\r\n\r\n  const [selectedEntry, setSelectedEntry] = useState(null)\r\n  function setSelectedEntryState(state) {\r\n    setSelectedEntry(state)\r\n  }\r\n\r\n  const [allSponsorshipsData, setAllSponsorshipsData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      // get the sponsors that the driver is partnered to\r\n      let GET_DRIVERS_SPONSORS_URL = `https://8mhdaeq2kl.execute-api.us-east-1.amazonaws.com/dev/getuserdetails/?DriverID=${userData.Username}`\r\n      let partnered_sponsors_response = await fetch(GET_DRIVERS_SPONSORS_URL)\r\n      let partnered_sponsors_data = await partnered_sponsors_response.json()\r\n      let partnered_sponsors_array = JSON.parse(\r\n        partnered_sponsors_data.body.toString(),\r\n      ).Items\r\n\r\n      let partnered_sponsors_formatted = partnered_sponsors_array\r\n        .map((element) => {\r\n          return {\r\n            SponsorshipID: element.SponsorshipID.S,\r\n            SponsorID: element.SponsorID.S,\r\n            DriverID: element.DriverID.S,\r\n            AppDecisionDate: element.AppDecisionDate.S,\r\n            Points: parseInt(element.Points.N),\r\n            PointDollarRatio: parseFloat(element.PointDollarRatio.N),\r\n            FirstName: element.FirstName.S,\r\n            LastName: element.LastName.S,\r\n            Organization: element.Organization.S,\r\n            Status: parseInt(element.Status.N),\r\n            SponsorStatus: parseInt(element.AccountStatus.N),\r\n            AppSubmissionDate: element.AppSubmissionDate.S,\r\n            AppComments: element.AppComments.S,\r\n            AppDecisionReason: element.AppDecisionReason.S,\r\n            Bio: element.Bio.S,\r\n          }\r\n        })\r\n        .filter((element) => element.SponsorStatus === 1)\r\n\r\n      let active_sponsors_data = partnered_sponsors_formatted.filter(\r\n        (element) => element.Status === 2,\r\n      )\r\n\r\n      let active_sponsors_table_data = active_sponsors_data\r\n        .filter((element) => element)\r\n        .map((element) => {\r\n          return {\r\n            SponsorID: element.SponsorID,\r\n            Organization: element.Organization,\r\n            FirstName: element.FirstName,\r\n            LastName: element.LastName,\r\n            TotalPoints: parseInt(element.Points),\r\n            StartDate: element.AppDecisionDate,\r\n          }\r\n        })\r\n\r\n      let applied_sponsors_data = partnered_sponsors_formatted\r\n        .filter((element) => element.Status === 0)\r\n        .map((element) => {\r\n          return {\r\n            SponsorID: element.SponsorID,\r\n            Organization: element.Organization,\r\n            FirstName: element.FirstName,\r\n            LastName: element.LastName,\r\n            AppSubmissionDate: element.AppSubmissionDate,\r\n          }\r\n        })\r\n\r\n      let applied_sponsors_table_data = applied_sponsors_data\r\n        .filter((element) => element)\r\n        .map((element) => {\r\n          return {\r\n            SponsorID: element.SponsorID,\r\n            Organization: element.Organization,\r\n            FirstName: element.FirstName,\r\n            LastName: element.LastName,\r\n            StartDate: element.AppSubmissionDate,\r\n          }\r\n        })\r\n\r\n      setTable1Data(active_sponsors_table_data)\r\n      setTable2Data(applied_sponsors_table_data)\r\n      setAllSponsorshipsData(partnered_sponsors_formatted)\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n\r\n    setTable1HeadCells([\r\n      {\r\n        id: 'Organization',\r\n        label: 'Organization',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'FirstName',\r\n        label: 'First name',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'LastName',\r\n        label: 'Last name',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'TotalPoints',\r\n        label: 'Total Points',\r\n        isDate: false,\r\n        width: 50,\r\n      },\r\n      {\r\n        id: 'StartDate',\r\n        label: 'Sponsored since',\r\n        isDate: true,\r\n        width: 150,\r\n      },\r\n    ])\r\n  }, [pageUpdate])\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <div className={classes.root}>\r\n        {/* layout stuff */}\r\n        <TopAppBar pageTitle=\"Sponsors\"></TopAppBar>\r\n        <LeftDrawer AccountType={userData.AccountType} />\r\n\r\n        {/* page content (starts after first div) */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <ViewSponsorAsDriverDialog\r\n            dialogProps={{\r\n              dialogIsOpen: dialogIsOpen,\r\n              setDialogIsOpen: setDialogIsOpenState,\r\n              selectedEntry: selectedEntry,\r\n              allSponsorshipsData: allSponsorshipsData,\r\n            }}\r\n          />\r\n\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignContent=\"center\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={10} xl={6}>\r\n              <Paper>\r\n                <div style={{ padding: 20 }}>\r\n                  <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <Typography variant=\"h6\">Your sponsors</Typography>\r\n                      <Typography>\r\n                        A list of the sponsors you're registered to\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <br></br>\r\n                  <GenericTable\r\n                    headCells={table1HeadCells}\r\n                    data={table1Data}\r\n                    setDataState={setTable1DataState}\r\n                    tableKey=\"SponsorID\"\r\n                    showKey={false}\r\n                    initialSortedColumn=\"Organization\"\r\n                    initialSortedDirection=\"asc\"\r\n                    selectedRow={selectedEntry}\r\n                    setSelectedRow={setSelectedEntryState}\r\n                    dialogIsOpen={dialogIsOpen}\r\n                    setDialogIsOpenState={setDialogIsOpenState}\r\n                  />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs={10} xl={6}>\r\n              <Paper>\r\n                <div style={{ padding: 20 }}>\r\n                  <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <Typography variant=\"h6\">Pending applications</Typography>\r\n                      <Typography>\r\n                        Sponsors who have not responded to your application\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                          history.push('/application')\r\n                        }}\r\n                      >\r\n                        Apply to more\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <br></br>\r\n                  <GenericTable\r\n                    headCells={table2HeadCells}\r\n                    data={table2Data}\r\n                    setDataState={setTable2DataState}\r\n                    tableKey=\"SponsorID\"\r\n                    showKey={false}\r\n                    initialSortedColumn=\"ApplicationDate\"\r\n                    initialSortedDirection=\"desc\"\r\n                    selectedRow={selectedEntry}\r\n                    setSelectedRow={setSelectedEntryState}\r\n                    dialogIsOpen={dialogIsOpen}\r\n                    setDialogIsOpenState={setDialogIsOpenState}\r\n                  />\r\n                </div>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <LoadingIcon />\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewSponsorsPage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationPage.js",["317"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport LeftDrawer from '../Components/LeftDrawer'\r\nimport TopAppBar from '../Components/TopAppBar'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\r\nimport LoadingIcon from '../Components/LoadingIcon'\r\nimport { UserContext } from '../Helpers/UserContext'\r\nimport { Grid } from '@material-ui/core'\r\nimport SuperSponsorContent from '../Components/SuperSponsorOrganizationContent'\r\nimport OrganizationContent from '../Components/OrganizationContent'\r\n// set up styling\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nfunction OrganizationPage() {\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const classes = useStyles()\r\n  const userData = useContext(UserContext).user\r\n\r\n  const [organizationUsers, setOrganizationUsers] = useState(null)\r\n  function setOrganizationUsersState(state) {\r\n    setOrganizationUsers(state)\r\n  }\r\n\r\n  const [pageUpdate, setPageUpdate] = useState(0)\r\n  function fullPageUpdateState() {\r\n    setPageUpdate(pageUpdate + 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    ;(async () => {\r\n      let GET_ORG_USERS_URL = `https://xqgw415uwe.execute-api.us-east-1.amazonaws.com/dev/getorguserdata?Organization=${userData.Organization}`\r\n      let org_users_raw = await fetch(GET_ORG_USERS_URL)\r\n      let org_users_json = await org_users_raw.json()\r\n      let org_users_array = await JSON.parse(org_users_json.body.toString())\r\n\r\n      let org_users_array_formatted = org_users_array\r\n        .map((element) => {\r\n          if (element.AccountType.S === 'Sponsor') {\r\n            return {\r\n              Username: element.Username.S,\r\n              AccountType: element.AccountType.S,\r\n              AccountStatus: parseInt(element.AccountStatus.N),\r\n              FirstName: element.FirstName.S,\r\n              LastName: element.LastName.S,\r\n              Bio: element.Bio.S,\r\n              SignupDate: element.SignupDate.S.split('.')[0].replace(' ', 'T'),\r\n              Organization: element.Organization.S,\r\n            }\r\n          } else if (element.AccountType.S === 'Driver') {\r\n            return {\r\n              Username: element.Username.S,\r\n              AccountType: element.AccountType.S,\r\n              AccountStatus: parseInt(element.AccountStatus.N),\r\n              FirstName: element.FirstName.S,\r\n              LastName: element.LastName.S,\r\n              Bio: element.Bio.S,\r\n              SignupDate: element.SignupDate.S.split('.')[0].replace(' ', 'T'),\r\n              Status: parseInt(element.Status.N),\r\n              Points: parseInt(element.Points.N),\r\n              PointDollarRatio: parseFloat(element.PointDollarRatio.N),\r\n            }\r\n          } else {\r\n            return null\r\n          }\r\n        })\r\n        .filter((element) => {\r\n          return element && element.AccountStatus > 0\r\n        })\r\n\r\n      let not_banned_users = org_users_array_formatted.filter((element) => {\r\n        return element.AccountStatus < 3\r\n      })\r\n\r\n      setOrganizationUsers(not_banned_users)\r\n    })().then(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, [pageUpdate])\r\n\r\n  // show loading screen if data is still being fetched\r\n  if (isLoading) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n\r\n          <LoadingIcon />\r\n        </main>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        {/* layout stuff */}\r\n        <TopAppBar pageTitle=\"Your organization\"></TopAppBar>\r\n        <LeftDrawer AccountType={userData.AccountType} />\r\n\r\n        {/* page content (starts after first div) */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Grid container justify=\"center\">\r\n            <Grid item container xs={10} xl={6}>\r\n              <OrganizationContent\r\n                orgProps={{\r\n                  organizationUsers: organizationUsers,\r\n                  setOrganizationUsersState: setOrganizationUsersState,\r\n                }}\r\n                pageProps={{\r\n                  updateCount: pageUpdate,\r\n                  updatePage: fullPageUpdateState,\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid xs={12} item>\r\n              <br />\r\n            </Grid>\r\n\r\n            {/* supersponsor content: only renders for super sponsors */}\r\n            <Grid item container xs={10} xl={6}>\r\n              {userData.Username.includes('@') ? (\r\n                <SuperSponsorContent\r\n                  orgProps={{\r\n                    organizationUsers: organizationUsers,\r\n                    setOrganizationUsersState: setOrganizationUsersState,\r\n                  }}\r\n                  pageProps={{\r\n                    updateCount: pageUpdate,\r\n                    updatePage: fullPageUpdateState,\r\n                  }}\r\n                />\r\n              ) : null}\r\n            </Grid>\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OrganizationPage\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrganizationSetupPage.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\UserContext.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\OrderReviewPage.js",["318","319"],"import React, { useContext, useEffect, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport LeftDrawer from '../Components/LeftDrawer'\nimport TopAppBar from '../Components/TopAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\nimport LoadingIcon from '../Components/LoadingIcon'\nimport { UserContext } from '../Helpers/UserContext'\nimport { Grid, Paper } from '@material-ui/core'\nimport GenericTable from '../Components/GenericTable'\n\n// set up styling\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))\n\nconst currentOrdersTableHeadCells = [\n  {\n    id: 'Organization',\n    label: 'Organization',\n    isDate: false,\n    width: 50,\n  },\n  {\n    id: 'SponsorID',\n    label: 'Sponsor',\n    isDate: false,\n    width: 50,\n  },\n  {\n    id: 'Cost',\n    label: 'Cost (points)',\n    isDate: false,\n    width: 50,\n  },\n  {\n    id: 'OrderDate',\n    label: 'Ordered on',\n    isDate: false,\n    width: 200,\n  },\n  {\n    id: 'Status',\n    label: 'Status',\n    isDate: true,\n    width: 50,\n  },\n]\n\nconst previousOrdersTableHeadCells = [\n  {\n    id: 'Organization',\n    label: 'Organization',\n    isDate: false,\n    width: 50,\n  },\n  {\n    id: 'SponsorID',\n    label: 'Sponsor',\n    isDate: false,\n    width: 50,\n  },\n  {\n    id: 'Cost',\n    label: 'Cost (points)',\n    isDate: false,\n    width: 100,\n  },\n  {\n    id: 'OrderDate',\n    label: 'Ordered on',\n    isDate: false,\n    width: 200,\n  },\n]\n\nexport default function OrderReviewPage() {\n  const classes = useStyles()\n  const userData = useContext(UserContext).user\n\n  const [isLoading, setIsLoading] = useState(true)\n\n  const [allOrders, setAllOrders] = useState(null)\n  // function setAllOrdersState(state) {\n  //   setAllOrders(state)\n  // }\n\n  const [currentOrders, setCurrentOrders] = useState(null)\n  // function setCurrentOrdersState(state) {\n  //   setCurrentOrders(state)\n  // }\n  const [currentOrdersTableData, setCurrentOrdersTableData] = useState(null)\n  function setCurrentOrdersTableDataState(state) {\n    setCurrentOrdersTableData(state)\n  }\n  const [previousOrders, setPreviousOrders] = useState(null)\n  // function setPreviousOrdersState(state) {\n  //   setPreviousOrders(state)\n  // }\n  const [previousOrdersTableData, setPreviousOrdersTableData] = useState(null)\n  function setPreviousOrdersTableDataState(state) {\n    setPreviousOrdersTableData(state)\n  }\n\n  useEffect(() => {\n    ;(async () => {\n      // start loading animation\n      setIsLoading(true)\n      let USER_ORDERS_URL =\n        'https://45mkccncmi.execute-api.us-east-1.amazonaws.com/dev/getorder'\n      let requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          DriverID: userData.Username,\n        }),\n      }\n\n      let user_orders_resp = await fetch(USER_ORDERS_URL, requestOptions)\n      let user_orders_json = await user_orders_resp.json()\n      let user_orders_obj = JSON.parse(user_orders_json.body)\n      let user_orders_arr = user_orders_obj.Items\n\n      console.log(user_orders_arr)\n\n      let all_orders_parsed = user_orders_arr.map((element) => {\n        return {\n          OrderID: element.OrderID.S,\n          DriverID: element.DriverID.S,\n          SponsorID: element.SponsorID.S,\n          Organization: element.Organization.S,\n          Status: parseInt(element.Status.N),\n          Cost: Math.ceil(parseFloat(element.Cost.N)),\n          PointDollarRatio: parseFloat(element.CurrentPointDollarRatio.N),\n          OrderDate: element.OrderSubmitted.S,\n          Products: element.ProductIDs.L.map((element) => {\n            return {\n              ProductID: element.M.ProductID.S,\n              Quantity: parseInt(element.M.Quantity.N),\n              PricePerItem: parseFloat(element.M.CostPerItem.N).toFixed(2),\n            }\n          }),\n        }\n      })\n\n      let current_orders = all_orders_parsed.filter(\n        (element) => element.Status < 3,\n      )\n\n      let previous_orders = all_orders_parsed.filter(\n        (element) => element.Status >= 3,\n      )\n\n      let current_orders_table_data = current_orders.map((element) => {\n        return {\n          OrderID: element.OrderID,\n          Organization: element.Organization,\n          SponsorID: element.SponsorID,\n          Cost: element.Cost / element.PointDollarRatio,\n          OrderDate: element.OrderDate,\n          Status:\n            element.Status === 1\n              ? 'Processing'\n              : element.Status === 2\n              ? 'In transit'\n              : element.Status === 3\n              ? 'Delivered'\n              : 'Unknown status',\n        }\n      })\n\n      let previous_orders_table_data = previous_orders.map((element) => {\n        return {\n          OrderID: element.OrderID,\n          Organization: element.Organization,\n          SponsorID: element.SponsorID,\n          Cost: element.Cost / element.PointDollarRatio,\n          OrderDate: element.OrderDate,\n        }\n      })\n\n      setAllOrders(all_orders_parsed)\n      setPreviousOrders(previousOrders)\n      setPreviousOrdersTableData(previous_orders_table_data)\n      setCurrentOrders(currentOrders)\n      setCurrentOrdersTableData(current_orders_table_data)\n\n      setIsLoading(false)\n    })()\n  }, [])\n\n  // show loading screen if data is still being fetched\n  if (isLoading) {\n    return (\n      <div className={classes.root}>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          <LoadingIcon />\n        </main>\n      </div>\n    )\n  } else {\n    return (\n      <div className={classes.root}>\n        {/* layout stuff */}\n        <TopAppBar pageTitle=\"Your orders\"></TopAppBar>\n        <LeftDrawer AccountType={userData.AccountType} />\n\n        {/* <ProfileSelectionDialog\n          dialogProps={{\n            profileSelectionDialogIsOpen: profileSelectionDialogIsOpen,\n            setProfileSelectionDialogIsOpenState: setProfileSelectionDialogIsOpenState,\n            fullPageUpdateState: fullPageUpdateState,\n            activeProfile: activeProfile,\n            setActiveProfile: setActiveProfile,\n          }}\n        /> */}\n\n        {/* page content (starts after first div) */}\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Grid item container justify=\"center\">\n            {/* <Grid item xs={12}> */}\n            <Grid item xs={10} xl={6}>\n              <Paper>\n                <div style={{ padding: 20 }}>\n                  <Grid container justify=\"space-between\" alignItems=\"center\">\n                    <Grid item>\n                      <Typography variant=\"h6\">Current orders</Typography>\n                      <Typography>\n                        Orders that have not been delivered yet\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                  <br></br>\n                  <GenericTable\n                    headCells={currentOrdersTableHeadCells}\n                    data={currentOrdersTableData}\n                    setDataState={setCurrentOrdersTableDataState}\n                    tableKey=\"OrderID\"\n                    showKey={false}\n                    initialSortedColumn=\"OrderDate\"\n                    initialSortedDirection=\"desc\"\n                    //   selectedRow={selectedEntry}\n                    //   setSelectedRow={setSelectedEntryState}\n                    //   dialogIsOpen={dialogIsOpen}\n                    //   setDialogIsOpenState={setDialogIsOpenState}\n                  />\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <br />\n            </Grid>\n\n            <Grid item xs={10} xl={6}>\n              <Paper>\n                <div style={{ padding: 20 }}>\n                  <Grid container justify=\"space-between\" alignItems=\"center\">\n                    <Grid item>\n                      <Typography variant=\"h6\">Previous orders</Typography>\n                      <Typography>Orders that have been delivered</Typography>\n                    </Grid>\n                  </Grid>\n                  <br></br>\n                  <GenericTable\n                    headCells={previousOrdersTableHeadCells}\n                    data={previousOrdersTableData}\n                    setDataState={setPreviousOrdersTableDataState}\n                    tableKey=\"OrderID\"\n                    showKey={false}\n                    initialSortedColumn=\"OrderDate\"\n                    initialSortedDirection=\"desc\"\n                    //   selectedRow={selectedEntry}\n                    //   setSelectedRow={setSelectedEntryState}\n                    //   dialogIsOpen={dialogIsOpen}\n                    //   setDialogIsOpenState={setDialogIsOpenState}\n                  />\n                </div>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* </Grid> */}\n        </main>\n      </div>\n    )\n  }\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\CommonFunctions.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LoadingIcon.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\pages\\DriverManagementPage.js",["320","321","322"],"import React, { useContext, useEffect, useState } from 'react'\nimport LeftDrawer from '../Components/LeftDrawer'\nimport TopAppBar from '../Components/TopAppBar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { DRAWER_WIDTH } from '../Helpers/Constants'\nimport { Button, Grid, Paper, Typography } from '@material-ui/core'\nimport { UserContext } from '../Helpers/UserContext'\nimport LoadingIcon from '../Components/LoadingIcon'\nimport GenericTable from '../Components/GenericTable'\nimport DriverManagementDialog from '../Components/DriverManagementDialog'\nimport SetAllPointRatiosDialog from '../Components/SetAllPointRatiosDialog'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))\n\nconst DriverManagementPage = () => {\n  const classes = useStyles()\n\n  const userData = useContext(UserContext).user\n  const [isLoading, setIsLoading] = useState(true)\n\n  // dialog control\n  const [dialogIsOpen, setDialogIsOpen] = useState(false)\n  const [pageUpdate, setPageUpdate] = useState(0)\n  function fullPageUpdateState() {\n    setPageUpdate(pageUpdate + 1)\n  }\n  function setDialogIsOpenState(state, refresh) {\n    setDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  const [table1HeadCells, setTable1HeadCells] = useState(null)\n\n  const [table1Data, setTable1Data] = useState(null)\n  function setTable1DataState(state) {\n    setTable1Data(state)\n  }\n\n  const [table2HeadCells, setTable2HeadCells] = useState(null)\n\n  const [table2Data, setTable2Data] = useState(null)\n  function setTable2DataState(state) {\n    setTable2Data(state)\n  }\n\n  const [selectedEntry, setSelectedEntry] = useState(null)\n  function setSelectedEntryState(state) {\n    setSelectedEntry(state)\n  }\n\n  const [allDriverData, setAllDriverData] = useState(null)\n  const setAllDriverDataState = (state) => {\n    setAllDriverData(state)\n  }\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      // fetch and parse sponsor's driver's profiles\n      const driver_profile_data_endpoint = `https://rb6nqfuvvg.execute-api.us-east-1.amazonaws.com/dev/driverdatabysponsor?SponsorUsername=${userData.Username}`\n      const driver_profile_data_response = await fetch(\n        driver_profile_data_endpoint,\n      )\n      const driver_profile_data_json = await driver_profile_data_response.json()\n      const driver_profile_data_parsed = JSON.parse(\n        driver_profile_data_json.body.toString(),\n      )\n      const driver_profile_data_formatted = driver_profile_data_parsed\n        .map((val) => {\n          if (val) {\n            return {\n              Username: val.Username.S,\n              FirstName: val.FirstName.S,\n              LastName: val.LastName.S,\n              AccountType: val.AccountType.S,\n              AccountStatus: parseInt(val.AccountStatus.N),\n              Bio: val.Bio.S,\n            }\n          } else {\n            return null\n          }\n        })\n        .filter((element) => element.AccountStatus === 1)\n\n      //  fetch applicant list\n      let sponsorship_list_api = `https://unmqqiwf1a.execute-api.us-east-1.amazonaws.com/dev/applist?Username=${userData.Username}`\n      const sponsorship_list_response = await fetch(sponsorship_list_api)\n      const sponsorship_list_json = await sponsorship_list_response.json()\n\n      // parse the applicant data\n      let sponsorship_list_parsed = JSON.parse(\n        sponsorship_list_json.body.toString(),\n      ).Items\n      let sponsorship_list_formatted = sponsorship_list_parsed.map((val) => {\n        return {\n          SponsorshipID: val.SponsorshipID ? val.SponsorshipID.S : null,\n          SponsorID: val.SponsorID ? val.SponsorID.S : null,\n          DriverID: val.DriverID ? val.DriverID.S : null,\n          Status: val.Status ? parseInt(val.Status.N) : null,\n          Points: val.Points ? parseInt(val.Points.N) : null,\n          PointDollarRatio: val.PointDollarRatio\n            ? parseFloat(val.PointDollarRatio.N)\n            : null,\n\n          AppSubmissionDate: val.AppSubmissionDate\n            ? val.AppSubmissionDate.S.split('.')[0].replace(' ', 'T')\n            : null,\n          AppComments: val.AppComments ? val.AppComments.S : null,\n          AppDecisionDate:\n            parseInt(val.Status.N) > 0 && val.AppDecisionDate\n              ? val.AppDecisionDate.S.split('.')[0].replace(' ', 'T')\n              : null,\n          AppDecisionReason:\n            parseInt(val.Status.N) && val.AppDecisionReason\n              ? val.AppDecisionReason.S\n              : null,\n        }\n      })\n\n      let current_drivers = sponsorship_list_formatted.filter((val) => {\n        return val.Status === 2\n      })\n\n      let terminated_drivers = sponsorship_list_formatted.filter((val) => {\n        return val.Status === 3\n      })\n\n      let current_drivers_data = current_drivers\n        .map((val) => {\n          return {\n            ...val,\n            ...driver_profile_data_formatted.find(\n              (element) => element.Username === val.DriverID,\n            ),\n          }\n        })\n        .filter((element) => element.AccountStatus)\n\n      let terminated_drivers_data = terminated_drivers\n        .map((val) => {\n          return {\n            ...val,\n            ...driver_profile_data_formatted.find(\n              (element) => element.Username === val.DriverID,\n            ),\n          }\n        })\n        .filter((element) => element.AccountStatus)\n\n      setAllDriverData([...current_drivers_data, ...terminated_drivers_data])\n\n      let current_drivers_table_data = current_drivers_data.map((val) => {\n        return {\n          Username: val.Username,\n          FirstName: val.FirstName,\n          LastName: val.LastName,\n          TotalPoints: val.Points,\n          PointValue: '$' + val.PointDollarRatio + ' / point',\n        }\n      })\n\n      let terminated_drivers_table_data = terminated_drivers_data.map((val) => {\n        return {\n          Username: val.Username,\n          FirstName: val.FirstName,\n          LastName: val.LastName,\n\n          // PointValue: '$' + val.PointDollarRatio + ' / point',\n          // TerminatedOn: 'date here',\n        }\n      })\n\n      setTable1Data([...current_drivers_table_data])\n      setTable2Data([...terminated_drivers_table_data])\n    })().then(() => {\n      setIsLoading(false)\n    })\n\n    setTable1HeadCells([\n      {\n        id: 'Username',\n        label: 'Username',\n        isDate: false,\n        width: 100,\n      },\n      {\n        id: 'FirstName',\n        label: 'First name',\n        isDate: false,\n        width: 100,\n      },\n      {\n        id: 'LastName',\n        label: 'Last name',\n        isDate: false,\n        width: 115,\n      },\n      {\n        id: 'TotalPoints',\n        label: 'Total points',\n        isDate: false,\n        width: 100,\n      },\n      {\n        id: 'PointValue',\n        label: 'Point value',\n        isDate: false,\n        width: 100,\n      },\n    ])\n\n    setTable2HeadCells([\n      {\n        id: 'Username',\n        label: 'Username',\n        isDate: false,\n        width: 100,\n      },\n      {\n        id: 'FirstName',\n        label: 'First name',\n        isDate: false,\n        width: 100,\n      },\n      {\n        id: 'LastName',\n        label: 'Last name',\n        isDate: false,\n        width: 115,\n      },\n    ])\n  }, [pageUpdate])\n\n  const [pointRatioDialogIsOpen, setPointRatioDialogIsOpen] = useState(false)\n  function setPointRatioDialogIsOpenState(state, refresh) {\n    setPointRatioDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  const [pointRatioDialogResponse, setPointRatioDialogResponse] = useState(\n    false,\n  )\n  function setPointRatioDialogResponseState(state) {\n    setPointRatioDialogResponse(state)\n  }\n\n  if (!isLoading) {\n    return (\n      <div className={classes.root}>\n        <SetAllPointRatiosDialog\n          dialogIsOpen={pointRatioDialogIsOpen}\n          setDialogIsOpen={setPointRatioDialogIsOpenState}\n          // setDialogResponse={setPointRatioDialogIsOpenState}\n          // fullPageUpdate={setPointRatioDialogIsOpenState}\n        />\n\n        {/* layout stuff */}\n        <TopAppBar pageTitle=\"Drivers\"></TopAppBar>\n        <LeftDrawer AccountType={userData.AccountType} />\n\n        {/* page content (starts after first div) */}\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          {dialogIsOpen ? (\n            <DriverManagementDialog\n              // selectedEntry={selectedEntry}\n              dialogIsOpen={dialogIsOpen}\n              setDialogIsOpenState={setDialogIsOpenState}\n              setAllDriverDataState={setAllDriverDataState}\n              allDriverData={allDriverData}\n              selectedDriverData={allDriverData.find(\n                (entry) => entry.Username === selectedEntry.Username,\n              )}\n              fullPageUpdate={fullPageUpdateState}\n            />\n          ) : null}\n\n          <Grid\n            container\n            justify=\"center\"\n            alignContent=\"center\"\n            direction=\"row\"\n            spacing={4}\n          >\n            {/* active drivers */}\n            <Grid item xs={10} xl={6}>\n              <Paper>\n                <div style={{ padding: 20 }}>\n                  <Grid\n                    container\n                    justify=\"space-between\"\n                    alignItems=\"center\"\n                    spacing={2}\n                  >\n                    <Grid item xs={12}>\n                      <Typography variant=\"h6\">Your drivers</Typography>\n                      <Typography>\n                        A list of the drivers you're sponsoring. Click on an\n                        entry for more information.\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                  <br></br>\n                  <Grid item container xs={12} justify=\"flex-end\">\n                    {/* set all point values button */}\n                    <Grid item align=\"right\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                          // bring up dialog to set all point ratios\n                          setPointRatioDialogIsOpen(true)\n                        }}\n                      >\n                        SET ALL POINT VALUES\n                      </Button>\n                    </Grid>\n                  </Grid>\n\n                  <br></br>\n                  <GenericTable\n                    headCells={table1HeadCells}\n                    data={table1Data}\n                    setDataState={setTable1DataState}\n                    tableKey=\"Username\"\n                    showKey={true}\n                    initialSortedColumn=\"LastName\"\n                    initialSortedDirection=\"asc\"\n                    selectedRow={selectedEntry}\n                    setSelectedRow={setSelectedEntryState}\n                    dialogIsOpen={dialogIsOpen}\n                    setDialogIsOpenState={setDialogIsOpenState}\n                  />\n                </div>\n              </Paper>\n            </Grid>\n\n            {/* active drivers */}\n            <Grid item xs={10} xl={6}>\n              <Paper>\n                <div style={{ padding: 20 }}>\n                  <Grid\n                    container\n                    justify=\"space-between\"\n                    alignItems=\"center\"\n                    spacing={2}\n                  >\n                    <Grid item xs={12}>\n                      <Typography variant=\"h6\">Past drivers</Typography>\n                      <Typography>\n                        A list of your past drivers (i.e., any driver whos\n                        sponsorship has been terminated)\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                  <br></br>\n\n                  <GenericTable\n                    headCells={table2HeadCells}\n                    data={table2Data}\n                    setDataState={setTable2DataState}\n                    tableKey=\"Username\"\n                    showKey={true}\n                    initialSortedColumn=\"LastName\"\n                    initialSortedDirection=\"asc\"\n                    selectedRow={selectedEntry}\n                    setSelectedRow={setSelectedEntryState}\n                    dialogIsOpen={dialogIsOpen}\n                    setDialogIsOpenState={setDialogIsOpenState}\n                  />\n                </div>\n              </Paper>\n            </Grid>\n          </Grid>\n        </main>\n      </div>\n    )\n  } else {\n    return (\n      <div className={classes.root}>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <LoadingIcon />\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default DriverManagementPage\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\TopAppBar.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\UserProfileCard.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Helpers\\Constants.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\LeftDrawer.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\EditAccountCard.js",["323"],"import { Grid, TextField } from '@material-ui/core'\nimport React, { useState } from 'react'\n\nconst EditAccountCard = (props) => {\n  const setProfileState = props.setNewDataState\n  const userDetails = props.userProfile\n  const [isLoading, setIsLoading] = useState(false)\n\n  if (isLoading) {\n    return <div></div>\n  } else {\n    return (\n      <Grid\n        container\n        justify=\"center\"\n        direct=\"column\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        {/* name row */}\n        <Grid container spacing={1} justify=\"center\" direction=\"row\">\n          {/* first name */}\n          <Grid item xs={4} align=\"center\">\n            <TextField\n              id=\"FirstName\"\n              label=\"First name\"\n              defaultValue={userDetails.FirstName}\n              onChange={(event) => {\n                // update first name in state\n                let newUserDetails = userDetails\n                newUserDetails.FirstName = event.target.value\n                setProfileState(newUserDetails)\n              }}\n            />\n          </Grid>\n\n          {/* last name */}\n          <Grid item xs={4} align=\"center\">\n            <TextField\n              id=\"LastName\"\n              label=\"Last name\"\n              defaultValue={userDetails.LastName}\n              onChange={(event) => {\n                // update last name in state\n                let newUserDetails = userDetails\n                newUserDetails.LastName = event.target.value\n                setProfileState(newUserDetails)\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        {/* bio */}\n        <Grid item xs={8} align=\"center\">\n          <br></br>\n          <TextField\n            id=\"user-bio\"\n            label=\"Bio\"\n            type=\"text\"\n            placeholder=\"Write a short bio\"\n            defaultValue={userDetails.Bio}\n            variant=\"outlined\"\n            multiline\n            fullWidth\n            rows={4}\n            onChange={(event) => {\n              // update UserBio in state\n              let newUserDetails = userDetails\n              newUserDetails.Bio = event.target.value\n              setProfileState(newUserDetails)\n            }}\n          />\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default EditAccountCard\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\WaitingForApplicationAprovalScreen.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AccountSetupCard.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ProfileSelectionDialog.js",["324"],"import React, { useContext, useEffect, useState } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport Typography from '@material-ui/core/Typography'\nimport { Grid, Paper } from '@material-ui/core'\nimport getUserDetails from '../Helpers/CommonFunctions'\nimport { UserContext } from '../Helpers/UserContext'\nimport LoadingIcon from './LoadingIcon'\n\nexport default function ProfileSelectionDialog(props) {\n  const userData = useContext(UserContext).user\n  const setUserData = useContext(UserContext).setUser\n\n  const handleClose = () => {\n    props.dialogProps.setProfileSelectionDialogIsOpenState(false)\n  }\n\n  const [sponsorsInOrganization, setSponsorsInOrganization] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      let GET_ORG_SPONSORS_URL = `https://xqgw415uwe.execute-api.us-east-1.amazonaws.com/dev/getorgsponsors?Organization=${userData.Organization.replace(\n        ' ',\n        '%20',\n      )}`\n      let org_sponsors_raw = await fetch(GET_ORG_SPONSORS_URL)\n      let org_sponsors_json = await org_sponsors_raw.json()\n      let org_sponsors_parsed = JSON.parse(org_sponsors_json.body.toString())\n      let org_sponsors_formatted = org_sponsors_parsed.Items.filter(\n        (element) => parseInt(element.AccountStatus.N) < 2,\n      ).map((element) => {\n        return {\n          Username: element.Username.S,\n          Name: element.FirstName.S + ' ' + element.LastName.S,\n        }\n      })\n\n      setSponsorsInOrganization(org_sponsors_formatted)\n    })()\n    setIsLoading(false)\n  }, [])\n\n  return (\n    <div>\n      <Dialog\n        onClose={null}\n        aria-labelledby=\"customized-dialog-title\"\n        open={props.dialogProps.profileSelectionDialogIsOpen}\n        fullWidth\n        maxWidth=\"md\"\n      >\n        <Grid container style={{ padding: 20 }}>\n          <Grid item xs={12} container justify=\"flex-start\" alignItems=\"center\">\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" id=\"alert-dialog-title\">\n                Log in to a profile\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <Grid item align=\"center\" xs={12}>\n            <br />\n          </Grid>\n\n          {isLoading || !sponsorsInOrganization ? (\n            <LoadingIcon />\n          ) : (\n            <Grid container justify=\"center\" spacing={3}>\n              {sponsorsInOrganization.map((element) => {\n                return (\n                  <Grid\n                    key={element.Username}\n                    item\n                    container\n                    spacing={2}\n                    xs={4}\n                    component={Paper}\n                    style={{ cursor: 'pointer', margin: 10 }}\n                    onClick={(event) => {\n                      getUserDetails(element.Username).then((chosen_user) => {\n                        setUserData(chosen_user)\n                        props.dialogProps.setActiveProfile(chosen_user)\n                        handleClose()\n                      })\n                    }}\n                  >\n                    {/* <Paper style={{ padding: 20, cursor: 'pointer' }}> */}\n                    <Grid item align=\"center\" xs={12}>\n                      <br />\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      {element.Name}\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      {element.Username}\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      <br />\n                    </Grid>\n                    {/* </Paper> */}\n                  </Grid>\n                )\n              })}\n            </Grid>\n          )}\n\n          <Grid item align=\"center\" xs={12}>\n            <br />\n          </Grid>\n        </Grid>\n      </Dialog>\n    </div>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplicationManagementDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTable.js",["325","326"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Box, TableSortLabel } from '@material-ui/core'\r\n\r\nimport orderBy from 'lodash/orderBy'\r\nimport LoadingIcon from './LoadingIcon'\r\n\r\nrequire('datejs')\r\n\r\nexport default function GenericTable(props) {\r\n  const [rows, setRows] = useState(null)\r\n\r\n  const [columnToSort, setColumnToSort] = useState(props.initialSortedColumn)\r\n  const [sortDirection, setSortDirection] = useState(\r\n    props.initialSortedDirection,\r\n  )\r\n  function handleSort(columnName) {\r\n    if (columnName === columnToSort) {\r\n      setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc')\r\n    } else {\r\n      setSortDirection('desc')\r\n    }\r\n\r\n    setColumnToSort(columnName)\r\n  }\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    let dataList = props.data\r\n    setRows(dataList)\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <TableContainer\r\n        style={{ maxHeight: 370, minHeight: 370 }}\r\n        component={Paper}\r\n      >\r\n        <Table stickyHeader aria-label=\"simple table\">\r\n          {/* Table header */}\r\n          <TableHead>\r\n            <TableRow>\r\n              {/* map the head cells to the table header */}\r\n              {props.headCells.map((headCell) => (\r\n                <TableCell\r\n                  width={headCell.width}\r\n                  key={headCell.id}\r\n                  sortDirection={\r\n                    columnToSort === headCell.id ? sortDirection : false\r\n                  }\r\n                >\r\n                  <TableSortLabel\r\n                    active={columnToSort === headCell.id}\r\n                    direction={\r\n                      columnToSort === headCell.id ? sortDirection : 'asc'\r\n                    }\r\n                    hideSortIcon={columnToSort === headCell.id ? false : true}\r\n                    onClick={() => {\r\n                      handleSort(headCell.id)\r\n                    }}\r\n                  >\r\n                    <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          {/* Table content */}\r\n          <TableBody>\r\n            {/* map the data to the table rows */}\r\n            {orderBy(rows, columnToSort, sortDirection).map((row) => (\r\n              <TableRow\r\n                hover={true}\r\n                key={row[props.tableKey]}\r\n                style={props.setSelectedRow ? { cursor: 'pointer' } : null}\r\n                onClick={\r\n                  props.setSelectedRow\r\n                    ? () => {\r\n                        let selectedRow = rows.find((element) => {\r\n                          return element[props.tableKey] === row[props.tableKey]\r\n                        })\r\n\r\n                        props.setSelectedRow(selectedRow)\r\n\r\n                        props.setDialogIsOpenState(true)\r\n                      }\r\n                    : null\r\n                }\r\n              >\r\n                {/* display the row key if requested */}\r\n                {props.showKey ? (\r\n                  <TableCell>{row[props.tableKey]}</TableCell>\r\n                ) : null}\r\n\r\n                {/* display the row cells */}\r\n                {Object.entries(row).map((cell) => {\r\n                  if (cell[0].toUpperCase().includes('DATE') && cell[1]) {\r\n                    return (\r\n                      <TableCell>{Date.parse(cell[1]).toUTCString()}</TableCell>\r\n                    )\r\n                  } else if (cell[0] !== props.tableKey) {\r\n                    return <TableCell>{cell[1]}</TableCell>\r\n                  } else {\r\n                    return null\r\n                  }\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  } else {\r\n    return <LoadingIcon />\r\n  }\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogItemsPanel.js",["327"],"import React, { useEffect, useState } from 'react'\n\nimport { Avatar, Button, Grid, Paper, Typography } from '@material-ui/core'\nimport LoadingIcon from '../Components/LoadingIcon'\nimport GenericTableSelectable from '../Components/GenericTableSelectable'\n\nexport default function ChooseCatalogItemsPanel(props) {\n  const [isLoading, setIsLoading] = useState(true)\n\n  const [table1HeadCells, setTable1HeadCells] = useState(null)\n  const [table1Data, setTable1Data] = useState(null)\n\n  useEffect(() => {\n    setIsLoading(false)\n\n    setTable1HeadCells([\n      {\n        id: 'Photo',\n        label: 'Photo',\n        isDate: false,\n        width: 20,\n      },\n      {\n        id: 'Name',\n        label: 'Name',\n        isDate: false,\n        width: 250,\n      },\n\n      {\n        id: 'Price',\n        label: 'Price (USD)',\n        isDate: false,\n        width: 60,\n      },\n\n      {\n        id: 'Stock',\n        label: 'Quantity',\n        isDate: false,\n        width: 60,\n      },\n    ])\n\n    setTable1Data(\n      props.tableProps.data.map((element) => {\n        return {\n          ProductID: element.ProductID,\n          Photo: <Avatar src={element.PhotoURL} variant=\"square\" />,\n          Name: element.Name,\n          Price: element.Price,\n          Stock: element.Stock,\n        }\n      }),\n    )\n  }, [])\n\n  return (\n    <Grid container item component={Paper} style={{ padding: 20 }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">Catalog items</Typography>\n      </Grid>\n      <Grid item>\n        <Typography>View, add, and remove your catalog items.</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n\n      {/* Button row */}\n      <Grid item xs={12} container spacing={1} justify=\"flex-end\">\n        <Grid item>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{ backgroundColor: '#444444', color: 'white' }}\n            onClick={() => {\n              if (\n                props.tableProps.checkedItems.filter(\n                  (element) => element.isChecked === true,\n                ).length > 0\n              ) {\n                props.dialogProps.setDeleteItemCatalogIsOpenState(true)\n              }\n            }}\n          >\n            Delete selected\n          </Button>\n        </Grid>\n\n        <Grid item>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              props.dialogProps.setAddItemDialogIsOpenState(true)\n            }}\n          >\n            Add new items\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n      <Grid item xs={12}>\n        {isLoading ? (\n          <div>\n            <br />\n            <LoadingIcon />\n            <br />\n          </div>\n        ) : (\n          <GenericTableSelectable\n            headCells={table1HeadCells}\n            data={table1Data}\n            setDataState={props.tableProps.setDataState}\n            tableKey=\"ProductID\"\n            showKey={false}\n            initialSortedColumn=\"Name\"\n            initialSortedDirection=\"asc\"\n            selectedRow={props.tableProps.selectedRow}\n            setSelectedRow={props.tableProps.setSelectedRow}\n            dialogIsOpen={props.tableProps.dialogIsOpen}\n            setDialogIsOpenState={props.tableProps.setDialogIsOpen}\n            checkedItems={props.tableProps.checkedItems}\n            setCheckedItems={props.tableProps.setCheckedItemsState}\n          />\n        )}\n      </Grid>\n    </Grid>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CatalogItemDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverApplicationCard.js",["328","329"],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteCatalogItemDialog.js",["330","331","332"],"import React, { useContext } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport { Divider, Grid, Typography } from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\n\r\nexport default function DeleteCatalogItemDialog(props) {\r\n  const userData = useContext(UserContext).user\r\n\r\n  const handleClickOpen = () => {\r\n    props.dialogProps.setDeleteItemCatalogIsOpenState(true)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    props.dialogProps.setDeleteItemCatalogIsOpenState(false)\r\n  }\r\n\r\n  if (\r\n    props.dialogProps.checkedItems &&\r\n    props.dialogProps.deleteItemCatalogIsOpen\r\n  ) {\r\n    let new_item_list = props.dialogProps.checkedItems\r\n      .filter((element) => !element.isChecked)\r\n      .map((element) => element.key)\r\n\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={props.dialogProps.deleteItemCatalogIsOpen}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{'Delete items?'}</DialogTitle>\r\n          <DialogContent>\r\n            <Grid container spacing=\"2\">\r\n              <Grid item xs={12}>\r\n                <Typography>\r\n                  Are you sure you want to remove{' '}\r\n                  {props.dialogProps.checkedItems.length - new_item_list.length}{' '}\r\n                  items from your catalog?\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              No\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                let SET_CATALOG_URL = `https://4hw5o2emwe.execute-api.us-east-1.amazonaws.com/dev/setcatalogitems`\r\n                let requestOptions = {\r\n                  method: 'POST',\r\n                  headers: { 'Content-Type': 'application/json' },\r\n                  body: JSON.stringify({\r\n                    SponsorID: userData.Username,\r\n                    ProductIDs: new_item_list,\r\n                  }),\r\n                }\r\n\r\n                fetch(SET_CATALOG_URL, requestOptions).then(() => {\r\n                  props.dialogProps.setDeleteItemCatalogIsOpenState(false, true)\r\n                })\r\n              }}\r\n              color=\"primary\"\r\n              autoFocus\r\n            >\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddCatalogItemDialog.js",["333"],"import React, { useContext, useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Avatar, Grid } from '@material-ui/core'\nimport LoadingIcon from './LoadingIcon'\n\nimport GenericTableSelectableSpecial from './GenericTableSelectableSpecial'\nimport { UserContext } from '../Helpers/UserContext'\n\nexport default function AddCatalogItemDialog(props) {\n  let userData = useContext(UserContext).activeProfile\n\n  const handleClose = () => {\n    setCheckedItems(\n      checkedItems.map((element) => {\n        return {\n          ...element,\n          isChecked: false,\n        }\n      }),\n    )\n    props.dialogProps.setAddItemDialogIsOpenState(false)\n  }\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [table1HeadCells, setTable1HeadCells] = useState(null)\n  const [checkedItems, setCheckedItems] = useState(null)\n  const [table1Data, setTable1Data] = useState(null)\n  function setsetTable1DataState(state) {\n    setTable1Data(state)\n  }\n\n  const [ebayItems, setEbayItems] = useState(null)\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      setTable1HeadCells([\n        {\n          id: 'Photo',\n          label: 'Photo',\n          isDate: false,\n          width: 20,\n        },\n        {\n          id: 'ItemName',\n          label: 'Name',\n          isDate: false,\n          width: 200,\n        },\n\n        {\n          id: 'DollarPrice',\n          label: 'Price (USD)',\n          isDate: false,\n          width: 60,\n        },\n      ])\n\n      const FETCH_EBAY_ITEMS_URL =\n        'https://0hcub33ona.execute-api.us-east-1.amazonaws.com/dev/ebay'\n      let ebay_items_raw = await fetch(FETCH_EBAY_ITEMS_URL)\n      let ebay_items_json = await ebay_items_raw.json()\n      let ebay_items_array = ebay_items_json\n\n      let ebay_items_array_formatted = ebay_items_array\n        .map((element) => {\n          return {\n            ItemKey: element.ItemID,\n            ItemName: element.ItemName,\n            ItemPhotoURL: element.PhotoURL ? element.PhotoURL : null,\n            Price: element.Price,\n          }\n        })\n        .filter(\n          (element) =>\n            !props.dialogProps.allCatalogData.find(\n              (element_2) => element_2.ProductID === element.ItemKey,\n            ),\n        )\n\n      let ebay_items_table_data = ebay_items_array_formatted.map((element) => {\n        return {\n          ItemKey: element.ItemKey,\n          Photo: <Avatar src={element.ItemPhotoURL} variant=\"square\" />,\n          ItemName: element.ItemName,\n          DollarPrice: parseFloat(element.Price).toFixed(2),\n        }\n      })\n\n      setTable1Data(ebay_items_table_data)\n      setCheckedItems(\n        ebay_items_table_data.map((element) => {\n          return {\n            key: element.ItemKey,\n            isChecked: false,\n          }\n        }),\n      )\n\n      setEbayItems(ebayItems)\n    })().then(() => {\n      setIsLoading(false)\n    })\n  }, [])\n\n  // TODO: need to add dialog for viewing more of an item's info (table row drop-down thing? or a dialog?)\n\n  return (\n    <div>\n      <Dialog\n        open={props.dialogProps.addItemDialogIsOpen}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n        fullWidth\n        maxWidth=\"md\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {'Select items to add'}\n        </DialogTitle>\n        <DialogContent>\n          {isLoading ? (\n            <LoadingIcon />\n          ) : (\n            <Grid container spacing=\"2\">\n              <Grid item xs={12}>\n                <GenericTableSelectableSpecial\n                  headCells={table1HeadCells}\n                  data={table1Data}\n                  setDataState={setsetTable1DataState}\n                  tableKey=\"ItemKey\"\n                  showKey={false}\n                  initialSortedColumn=\"ItemName\"\n                  initialSortedDirection=\"asc\"\n                  // selectedRow={props.tableProps.selectedRow}\n                  // setSelectedRow={props.tableProps.setSelectedRow}\n                  // dialogIsOpen={props.tableProps.dialogIsOpen}\n                  // setDialogIsOpenState={props.tableProps.setDialogIsOpen}\n                  checkedItems={checkedItems}\n                  setCheckedItems={setCheckedItems}\n                />\n              </Grid>\n              <Grid item container xs={12} justify=\"flex-end\">\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                      let checked_ids = checkedItems\n                        .filter((element) => element.isChecked)\n                        .map((element) => element.key)\n\n                      // append new items to old items\n                      let new_list_of_ids = [\n                        ...props.dialogProps.allCatalogData\n                          .filter((element) => element.ProductID)\n                          .map((element) => element.ProductID),\n                        ...checked_ids,\n                      ]\n\n                      let SET_CATALOG_URL = `https://4hw5o2emwe.execute-api.us-east-1.amazonaws.com/dev/setcatalogitems`\n                      let requestOptions = {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({\n                          SponsorID: userData.Username,\n                          ProductIDs: new_list_of_ids,\n                        }),\n                      }\n\n                      fetch(SET_CATALOG_URL, requestOptions).then(() => {\n                        props.dialogProps.setAddItemDialogIsOpenState(\n                          false,\n                          true,\n                        )\n                        // window.location.reload()\n                        setIsLoading(false)\n                      })\n                    }}\n                  >\n                    Add items\n                  </Button>\n                </Grid>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SetAllPointRatiosDialog.js",["334"],"import React, { useContext, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\n\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { UserContext } from '../Helpers/UserContext'\r\n\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nexport default function SetAllPointRatiosDialog(props) {\r\n  const [newPointDollarRatio, setNewPointDollarRatio] = useState(null)\r\n  const [pointDollarRatio, setPointDollarRatio] = useState(null)\r\n  const [helperText, setHelperText] = useState(null)\r\n\r\n  const userData = useContext(UserContext).user\r\n\r\n  const handleClose = (resp) => {\r\n    props.setDialogIsOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props.dialogIsOpen}\r\n        onClose={() => handleClose(false)}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <Grid container style={{ padding: 20 }} component={Paper}>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={12}\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={10}>\r\n              <Typography variant=\"h5\" id=\"alert-dialog-title\">\r\n                Set all drivers' point to USD conversion\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                onClick={() => {\r\n                  handleClose(false)\r\n                }}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Set the point to dollar conversion for all of your drivers. .005\r\n              would mean that 1 point is worth .005 USD.\r\n            </DialogContentText>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <br />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            spacing={3}\r\n            justify=\"flex-start\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Point value (USD)\"\r\n                variant=\"filled\"\r\n                defaultValue={pointDollarRatio}\r\n                helperText={helperText}\r\n                error={helperText}\r\n                onChange={(event) => {\r\n                  setNewPointDollarRatio(event.target.value)\r\n                }}\r\n                size=\"small\"\r\n              ></TextField>\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                onClick={() => {\r\n                  if (!newPointDollarRatio) {\r\n                    setHelperText('Need to provide a value')\r\n                    return\r\n                  } else if (!parseFloat(newPointDollarRatio)) {\r\n                    setHelperText('Must enter a number')\r\n                    return\r\n                  } else if (newPointDollarRatio <= 0) {\r\n                    setHelperText('Must be greater than 0')\r\n                    return\r\n                  } else {\r\n                    setHelperText(null)\r\n                  }\r\n\r\n                  let UPDATE_POINT_VALUE_URL =\r\n                    'https://q8z2hne254.execute-api.us-east-1.amazonaws.com/dev/updatesponsorship'\r\n                  let requestOptions = {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                      SponsorID: userData.Username,\r\n                      PointDollarRatio: parseFloat(newPointDollarRatio),\r\n                    }),\r\n                  }\r\n                  fetch(UPDATE_POINT_VALUE_URL, requestOptions).then(() => {\r\n                    props.setDialogIsOpen(false, true)\r\n                  })\r\n                }}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DriverManagementDialog.js",["335","336","337","338"],"import React, { useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DeleteSponsorshipDialog from './DeleteSponsorshipDialog'\n\nimport {\n  AppBar,\n  Box,\n  ButtonGroup,\n  Grid,\n  IconButton,\n  Paper,\n  Tab,\n  Tabs,\n  Typography,\n} from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport GenericTable from './GenericTable'\nimport LoadingIcon from './LoadingIcon'\nrequire('datejs')\n\nfunction DriverManagementTab(props) {\n  // dialog control\n  const [deleteProfileDialogIsOpen, setDeleteProfileDialogIsOpen] = useState(\n    false,\n  )\n  function setDeleteProfileCatalogIsOpenState(state, refresh) {\n    setDeleteProfileDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n\n  const [pageUpdate, setPageUpdate] = useState(0)\n  function fullPageUpdateState() {\n    setPageUpdate(pageUpdate + 1)\n  }\n\n  const left_col_width = 4\n  const right_col_width = 6\n\n  return (\n    <Grid container justify=\"center\">\n      <DeleteSponsorshipDialog\n        dialogProps={{\n          dialogIsOpen: deleteProfileDialogIsOpen,\n          setDialogIsOpen: setDeleteProfileCatalogIsOpenState,\n          pageUpdateFunc: fullPageUpdateState,\n        }}\n        parentProps={props}\n      />\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n\n      {/* AREA 1: sponsorship info */}\n      {/* Labels */}\n      <Grid\n        item\n        xs={7}\n        container\n        component={Paper}\n        justify=\"center\"\n        align=\"center\"\n      >\n        <Grid item xs={12}>\n          <br />\n        </Grid>\n\n        {/* driver username */}\n        <Grid item container xs={12} justify=\"center\" spacing={2}>\n          <Grid item xs={left_col_width} align=\"right\">\n            <Typography>\n              <Box fontWeight=\"bold\">Username: </Box>\n            </Typography>\n          </Grid>\n          <Grid item xs={right_col_width} align=\"left\">\n            <Typography>{props.selectedDriverData.Username}</Typography>\n          </Grid>\n        </Grid>\n\n        {/* driver name */}\n        <Grid item container xs={12} justify=\"center\" spacing={2}>\n          <Grid item xs={left_col_width} align=\"right\">\n            <Typography>\n              <Box fontWeight=\"bold\">Name: </Box>\n            </Typography>\n          </Grid>\n          <Grid item xs={right_col_width} align=\"left\">\n            <Typography>\n              {props.selectedDriverData.FirstName +\n                ' ' +\n                props.selectedDriverData.LastName}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        {/* driver bio */}\n        <Grid item container xs={12} justify=\"center\" spacing={2}>\n          <Grid item xs={left_col_width} align=\"right\">\n            <Typography>\n              <Box fontWeight=\"bold\">Bio: </Box>\n            </Typography>\n          </Grid>\n          <Grid item xs={right_col_width} align=\"left\">\n            <Typography>{props.selectedDriverData.Bio}</Typography>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12}>\n          <br />\n        </Grid>\n\n        {/* sponsored since*/}\n        {props.selectedDriverData.Status < 3 ? (\n          <Grid item container xs={12} justify=\"center\" spacing={2}>\n            <Grid item xs={left_col_width} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"bold\">Sponsored since: </Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={right_col_width} align=\"left\">\n              <Typography>\n                {Date.parse(\n                  props.selectedDriverData.AppSubmissionDate,\n                ).toUTCString()}\n              </Typography>\n            </Grid>\n          </Grid>\n        ) : null}\n\n        {/* sponsored because */}\n        {props.selectedDriverData.Status < 3 ? (\n          <Grid item container xs={12} justify=\"center\" spacing={2}>\n            <Grid item xs={left_col_width} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"bold\">Sponsored because: </Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={right_col_width} align=\"left\">\n              <Typography>\n                {props.selectedDriverData.AppDecisionReason}\n              </Typography>\n            </Grid>\n          </Grid>\n        ) : null}\n\n        {/* total points */}\n        {props.selectedDriverData.Status < 3 ? (\n          <Grid item container xs={12} justify=\"center\" spacing={2}>\n            <Grid item xs={left_col_width} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"bold\">Total points: </Box>\n              </Typography>\n            </Grid>\n\n            <Grid item xs={right_col_width} align=\"left\">\n              <Typography>{props.selectedDriverData.Points}</Typography>\n            </Grid>\n          </Grid>\n        ) : null}\n\n        {props.selectedDriverData.Status < 3 ? (\n          <Grid item xs={12}>\n            <br />\n          </Grid>\n        ) : null}\n\n        {/* end/resume sponsorship button */}\n        <Grid\n          item\n          xs={11}\n          container\n          justify=\"flex-end\"\n          align=\"center\"\n          spacing={1}\n        >\n          {props.selectedDriverData.Status < 3 ? (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                style={{ backgroundColor: '#444444', color: 'white' }}\n                onClick={() => {\n                  setDeleteProfileCatalogIsOpenState(true)\n                }}\n              >\n                End sponsorship\n              </Button>\n            </Grid>\n          ) : (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  let UPDATE_SPONSORSHIP_URL =\n                    'https://thuv0o9tqa.execute-api.us-east-1.amazonaws.com/dev/updatesponsorshipinfo'\n                  let requestOptions = {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                      SponsorID: props.selectedDriverData.SponsorID,\n                      DriverID: props.selectedDriverData.DriverID,\n                      Status: 2,\n                    }),\n                  }\n                  fetch(UPDATE_SPONSORSHIP_URL, requestOptions)\n\n                  props.handleClose(true)\n                }}\n              >\n                Reinstate sponsorship\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n        <Grid item xs={12}>\n          <br />\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n\n      {/* AREA 2: Sponsorship controls */}\n    </Grid>\n  )\n}\n\nfunction EditPointDollarRatioMenu(props) {\n  const [pointDollarRatio, setPointDollarRatio] = useState(\n    props.selectedDriverData.PointDollarRatio,\n  )\n  const [newPointDollarRatio, setNewPointDollarRatio] = useState(\n    props.selectedDriverData.PointDollarRatio,\n  )\n\n  const [helperText, setHelperText] = useState(null)\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">Point value</Typography>\n        <Typography>\n          View and edit the point to dollar value ratio for your driver. For\n          example, typing in .005 would mean that 1 point is worth .005 USD for\n          this particular driver.\n        </Typography>\n        <br></br>\n      </Grid>\n\n      <Grid item container spacing={2} justify=\"flex-start\" alignItems=\"center\">\n        <Grid item>\n          <TextField\n            fullWidth\n            label=\"Point value (USD)\"\n            variant=\"filled\"\n            defaultValue={pointDollarRatio}\n            helperText={helperText}\n            error={helperText}\n            onChange={(event) => {\n              setNewPointDollarRatio(event.target.value)\n            }}\n            size=\"small\"\n          ></TextField>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={() => {\n              if (!newPointDollarRatio) {\n                setHelperText('Need to provide a value')\n                return\n              } else if (newPointDollarRatio <= 0) {\n                setHelperText('Must be greater than 0')\n                return\n              }\n\n              let SAVE_APPLICATION_RESPONSE_URL =\n                'https://thuv0o9tqa.execute-api.us-east-1.amazonaws.com/dev/updatesponsorshipinfo'\n\n              let requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  SponsorID: props.selectedDriverData.SponsorID,\n                  DriverID: props.selectedDriverData.DriverID,\n                  PointDollarRatio: parseFloat(newPointDollarRatio),\n                }),\n              }\n\n              fetch(SAVE_APPLICATION_RESPONSE_URL, requestOptions).then(() => {\n                let newDriverDataState = props.allDriverData.map((element) => {\n                  if (element.Username === props.selectedDriverData.DriverID) {\n                    return {\n                      ...element,\n                      PointDollarRatio: parseFloat(newPointDollarRatio),\n                    }\n                  } else {\n                    return element\n                  }\n                })\n\n                props.setAllDriverDataState(newDriverDataState)\n                // Trigger reload\n\n                props.triggerPageUpdate()\n              })\n            }}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nfunction EditDriverPointsMenu(props) {\n  const [reason, setReason] = useState(null)\n  const [reasonHelperText, setReasonHelperText] = useState(null)\n\n  const [pointQuantity, setPointQuantity] = useState(null)\n  const [pointHelperText, setPointHelperText] = useState(null)\n\n  useEffect(() => {}, [props.pageUpdate])\n  if (props.selectedDriverData.Status < 3) {\n    return (\n      <Grid item container spacing={2} justify=\"flex-end\" alignItems=\"center\">\n        <Grid item xs={8} sm={3}>\n          <TextField\n            fullWidth\n            label=\"Points\"\n            variant=\"filled\"\n            size=\"small\"\n            type=\"number\"\n            error={pointHelperText}\n            helperText={pointHelperText}\n            value={pointQuantity}\n            onChange={(event) => {\n              setPointQuantity(event.target.value)\n            }}\n          ></TextField>\n        </Grid>\n\n        <Grid item xs={12} sm={5}>\n          <TextField\n            fullWidth\n            label=\"Reason\"\n            variant=\"filled\"\n            size=\"small\"\n            type=\"text\"\n            error={reasonHelperText}\n            helperText={reasonHelperText}\n            onChange={(event) => {\n              setReason(event.target.value)\n            }}\n          ></TextField>\n        </Grid>\n        <Grid item>\n          <ButtonGroup size=\"large\" color=\"primary\" variant=\"contained\">\n            <Button\n              style={{ backgroundColor: 'red' }}\n              onClick={() => {\n                // validate input\n                let exit = false\n                if (!pointQuantity) {\n                  setPointHelperText('Must provide a quantity')\n                  exit = true\n                }\n                if (pointQuantity <= 0) {\n                  setPointHelperText('Must be >0')\n                  exit = true\n                } else if (pointQuantity > props.selectedDriverData.Points) {\n                  setPointHelperText('Deducting too much')\n                  exit = true\n                } else {\n                }\n\n                if (!reason) {\n                  setReasonHelperText('Must provide a reason')\n                  exit = true\n                }\n                if (exit) return\n\n                let SAVE_APPLICATION_RESPONSE_URL =\n                  'https://thuv0o9tqa.execute-api.us-east-1.amazonaws.com/dev/updatesponsorshipinfo'\n\n                let requestOptions = {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify({\n                    SponsorID: props.selectedDriverData.SponsorID,\n                    DriverID: props.selectedDriverData.DriverID,\n                    Points:\n                      parseInt(props.selectedDriverData.Points) -\n                      parseInt(pointQuantity),\n                  }),\n                }\n\n                fetch(SAVE_APPLICATION_RESPONSE_URL, requestOptions).then(\n                  () => {\n                    let newDriverDataState = props.allDriverData.map(\n                      (element) => {\n                        if (\n                          element.Username === props.selectedDriverData.DriverID\n                        ) {\n                          return {\n                            ...element,\n                            Points:\n                              parseInt(props.selectedDriverData.Points) -\n                              parseInt(pointQuantity),\n                          }\n                        } else {\n                          return element\n                        }\n                      },\n                    )\n\n                    props.setAllDriverDataState(newDriverDataState)\n                    props.triggerPageUpdate()\n                  },\n                )\n\n                // TODO: make sure that the point history table reflects points changes. Waiting on api for point history logs.\n              }}\n            >\n              Deduct\n            </Button>\n            <Button\n              style={{ backgroundColor: 'green' }}\n              onClick={() => {\n                // validate input\n                let exit = false\n                if (!pointQuantity) {\n                  setPointHelperText('Must provide a quantity')\n                  exit = true\n                }\n                if (pointQuantity <= 0) {\n                  setPointHelperText('Must be >0')\n                  exit = true\n                }\n\n                if (!reason) {\n                  setReasonHelperText('Must provide a reason')\n                  exit = true\n                }\n                if (exit) return\n\n                let SAVE_APPLICATION_RESPONSE_URL =\n                  'https://thuv0o9tqa.execute-api.us-east-1.amazonaws.com/dev/updatesponsorshipinfo'\n\n                let requestOptions = {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify({\n                    SponsorID: props.selectedDriverData.SponsorID,\n                    DriverID: props.selectedDriverData.DriverID,\n                    Points:\n                      parseInt(props.selectedDriverData.Points) +\n                      parseInt(pointQuantity),\n                    // TODO: provide reason for point change. waiting on api/table for this\n                  }),\n                }\n\n                fetch(SAVE_APPLICATION_RESPONSE_URL, requestOptions).then(\n                  () => {\n                    let newDriverDataState = props.allDriverData.map(\n                      (element) => {\n                        if (\n                          element.Username === props.selectedDriverData.DriverID\n                        ) {\n                          return {\n                            ...element,\n                            Points:\n                              parseInt(props.selectedDriverData.Points) +\n                              parseInt(pointQuantity),\n                          }\n                        } else {\n                          return element\n                        }\n                      },\n                    )\n\n                    props.setAllDriverDataState(newDriverDataState)\n                    props.triggerPageUpdate()\n                  },\n                )\n\n                // props.triggerPageUpdate()\n                // TODO: make sure that the point history table reflects points changes. if it doesn't, fix it. waiting on api.\n              }}\n            >\n              Add\n            </Button>\n          </ButtonGroup>\n        </Grid>\n      </Grid>\n    )\n  } else {\n    return null\n  }\n}\n\nfunction DriverPointsTab(props) {\n  const [isLoading, setIsLoading] = useState(true)\n\n  // point history table\n  const table1HeadCells = [\n    {\n      id: 'Date',\n      label: 'Date',\n      isDate: true,\n      width: 200,\n    },\n    {\n      id: 'Reason',\n      label: 'Reason',\n      isDate: false,\n      width: 150,\n    },\n    {\n      id: 'TotalPoints',\n      label: 'Total points',\n      isDate: false,\n      width: 50,\n    },\n    {\n      id: 'PointsChange',\n      label: 'Difference',\n      isDate: false,\n      width: 50,\n    },\n  ]\n\n  const [table1Data, setTable1Data] = useState(null)\n  function setTable1DataState(state) {\n    setTable1Data(state)\n  }\n\n  const [selectedEntry, setSelectedEntry] = useState(null)\n  function setSelectedEntryState(state) {\n    setSelectedEntry(state)\n  }\n\n  const [pageUpdate, setPageUpdate] = useState(0)\n  function triggerPageUpdate() {\n    setPageUpdate(pageUpdate + 1)\n  }\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      setTable1Data([\n        {\n          Date: '2021-03-11 23:08:19.748211',\n          Reason: '<a really good reason>',\n          TotalPoints: 1650,\n          PointsChange: (150 > 0 ? '+' : '-') + 150,\n        },\n        {\n          Date: '2021-03-11 23:08:50.891743',\n          Reason: '<please replace me with an actual api call please>',\n          TotalPoints: 1500,\n          PointsChange: (-150 > 0 ? '+' : null) + -150,\n        },\n      ])\n    })().then(() => {\n      setIsLoading(false)\n    })\n  }, [pageUpdate])\n\n  let COLUMN_SPACING = 1\n\n  if (!isLoading) {\n    return (\n      <div>\n        <Grid container item component={Paper} xs={12}>\n          <DialogContent>\n            <Grid\n              item\n              container\n              direction=\"row\"\n              spacing={COLUMN_SPACING}\n              justify=\"center\"\n            >\n              <Grid item xs={12}>\n                <br />\n              </Grid>\n\n              {props.selectedDriverData.Status < 3 ? (\n                <Grid\n                  item\n                  container\n                  xs={9}\n                  spacing={2}\n                  justify=\"flex-start\"\n                  component={Paper}\n                  style={{ padding: 20 }}\n                >\n                  <Grid item>\n                    <Typography>\n                      <EditPointDollarRatioMenu\n                        selectedDriverData={props.selectedDriverData}\n                        triggerPageUpdate={props.pageUpdate}\n                        allDriverData={props.allDriverData}\n                        setAllDriverDataState={props.setAllDriverDataState}\n                      />\n                    </Typography>\n                  </Grid>\n                </Grid>\n              ) : null}\n\n              {props.selectedDriverData.Status < 3 ? (\n                <Grid item xs={12}>\n                  <br />\n                </Grid>\n              ) : null}\n\n              {/* point history table */}\n              <Grid\n                item\n                container\n                xs={9}\n                spacing={2}\n                justify=\"center\"\n                component={Paper}\n                style={{ padding: 20 }}\n              >\n                <Grid item container xs={12} alignItems=\"center\">\n                  <Grid item xs={6} align=\"left\">\n                    <Typography variant=\"h6\">Points</Typography>\n                    {props.selectedDriverData.Status < 3 ? (\n                      <Typography>View and edit the driver's points</Typography>\n                    ) : (\n                      <Typography>View the driver's point history</Typography>\n                    )}\n                  </Grid>\n\n                  {props.selectedDriverData.Status < 3 ? (\n                    <Grid item xs={6} align=\"right\">\n                      <Typography variant=\"h6\">\n                        {props.selectedDriverData.Points} points total\n                      </Typography>\n                    </Grid>\n                  ) : null}\n\n                  {/* point management */}\n                  <Grid item xs={12} align=\"center\">\n                    <EditDriverPointsMenu\n                      selectedDriverData={props.selectedDriverData}\n                      allDriverData={props.allDriverData}\n                      setAllDriverDataState={props.setAllDriverDataState}\n                      pageUpdate={pageUpdate}\n                      triggerPageUpdate={props.pageUpdate}\n                    />\n                    <br />\n                  </Grid>\n                  <GenericTable\n                    headCells={table1HeadCells}\n                    data={table1Data}\n                    setDataState={setTable1DataState}\n                    tableKey=\"Date\"\n                    showKey={false}\n                    initialSortedColumn=\"Date\"\n                    initialSortedDirection=\"desc\"\n                    selectedRow={selectedEntry}\n                    setSelectedRow={setSelectedEntryState}\n                    dialogIsOpen={props.dialogIsOpen}\n                    setDialogIsOpenState={props.setDialogIsOpenState}\n                  ></GenericTable>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                {' '}\n                <br />\n              </Grid>\n            </Grid>\n          </DialogContent>\n        </Grid>\n      </div>\n    )\n  } else {\n    return <LoadingIcon />\n  }\n}\n\nexport default function DriverManagementDialog(props) {\n  // dialog control\n  const [dialogIsOpen, setDialogIsOpen] = useState(false)\n  const [pageUpdate, setPageUpdate] = useState(0)\n  function triggerPageUpdate() {\n    setPageUpdate(pageUpdate + 1)\n  }\n\n  const [currentTab, setCurrentTab] = useState(0)\n  const handleTabChange = (event, newTab) => {\n    setCurrentTab(newTab)\n  }\n\n  function setDialogIsOpenState(state, refresh) {\n    setDialogIsOpen(state)\n\n    if (refresh) {\n      setPageUpdate(pageUpdate + 1)\n    }\n  }\n  const handleClose = (refresh) => {\n    props.setDialogIsOpenState(false, refresh)\n  }\n  return (\n    <div>\n      <Dialog\n        open={props.dialogIsOpen}\n        onClose={() => {\n          handleClose(false)\n        }}\n        aria-labelledby=\"form-dialog-title\"\n        fullWidth\n        maxWidth=\"md\"\n      >\n        {/* dialog header */}\n        <Grid\n          container\n          item\n          xs={12}\n          justify=\"space-between\"\n          alignItems=\"center\"\n          direction=\"row\"\n        >\n          <Grid item container xs={9} alignItems=\"center\">\n            <Grid item>\n              <DialogTitle id=\"form-dialog-title\">\n                Driver: {props.selectedDriverData.FirstName}{' '}\n                {props.selectedDriverData.LastName} (\n                {props.selectedDriverData.Username})\n              </DialogTitle>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <IconButton\n              onClick={() => {\n                handleClose(false)\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <AppBar position=\"static\">\n          <Tabs value={currentTab} onChange={handleTabChange}>\n            <Tab label=\"Points\"></Tab>\n            <Tab label=\"Manage\"></Tab>\n          </Tabs>\n        </AppBar>\n\n        {/* tabs */}\n\n        {currentTab === 0 ? (\n          <DriverPointsTab\n            pageUpdate={props.fullPageUpdate}\n            selectedDriverData={props.selectedDriverData}\n            dialogIsOpen={props.dialogIsOpen}\n            setDialogIsOpenState={setDialogIsOpenState}\n            handleClose={handleClose}\n            allDriverData={props.allDriverData}\n            setAllDriverDataState={props.setAllDriverDataState}\n          />\n        ) : currentTab === 1 ? (\n          <DriverManagementTab\n            selectedDriverData={props.selectedDriverData}\n            allDriverData={props.allDriverData}\n            setAllDriverDataState={props.setAllDriverDataState}\n            handleClose={handleClose}\n            fullPageUpdate={props.fullPageUpdate}\n            setDialogIsOpenState={props.setDialogIsOpenState}\n          />\n        ) : null}\n      </Dialog>\n    </div>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSetupCard.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationContent.js",["339"],"import { Box, Grid, Paper, Typography } from '@material-ui/core'\nimport { useContext, useEffect, useState } from 'react'\nimport { UserContext } from '../Helpers/UserContext'\nimport LoadingIcon from './LoadingIcon'\n\nfunction OrganizationInfoPanel(props) {\n  useEffect(() => {\n    ;(async () => {\n      let sponsor_count = props.parentProps.orgProps.organizationUsers.reduce(\n        (count, element) => {\n          if (element.AccountStatus === 1 && element.AccountType === 'Sponsor')\n            return count + 1\n          else return count\n        },\n        0,\n      )\n\n      let driver_count = props.parentProps.orgProps.organizationUsers.reduce(\n        (count, element) => {\n          if (\n            element.AccountStatus === 1 &&\n            element.AccountType === 'Driver' &&\n            element.Status === 2\n          )\n            return count + 1\n          else return count\n        },\n        0,\n      )\n\n      let leader = props.parentProps.orgProps.organizationUsers.find(\n        (element) => {\n          return element.Username.includes('@')\n        },\n      )\n\n      setSponsorCount(sponsor_count)\n      setDriverCount(driver_count)\n      setOrgLeader(leader.Username)\n    })()\n  })\n\n  const userData = useContext(UserContext).user\n  const [isLoading, setIsLoading] = useState(false)\n  const [sponsorCount, setSponsorCount] = useState(null)\n  const [driverCount, setDriverCount] = useState(null)\n  const [orgLeader, setOrgLeader] = useState(null)\n\n  if (isLoading) {\n    return <LoadingIcon></LoadingIcon>\n  } else {\n    return (\n      // header\n      <Grid\n        item\n        container\n        justify=\"space-between\"\n        xs={12}\n        component={Paper}\n        style={{ padding: 20 }}\n      >\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Organization info</Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <br />\n        </Grid>\n\n        {/* organization data */}\n        <Grid\n          item\n          container\n          xs={12}\n          alignItems=\"center\"\n          spacing={1}\n          justify=\"center\"\n        >\n          <Grid item container xs={12} md={12} spacing={2}>\n            <Grid item xs={6} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"fontWeightBold\">Organization name:</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={6} align=\"left\">\n              {userData.Organization}\n            </Grid>\n          </Grid>\n\n          <Grid item container xs={12} md={12} spacing={2}>\n            <Grid item xs={6} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"fontWeightBold\">Leader:</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={6} align=\"left\">\n              {orgLeader}\n            </Grid>\n          </Grid>\n\n          <Grid item container xs={12} md={12} spacing={2}>\n            <Grid item xs={6} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"fontWeightBold\">Total sponsors:</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={6} align=\"left\">\n              {sponsorCount}\n            </Grid>\n          </Grid>\n\n          <Grid item container xs={12} md={12} spacing={2}>\n            <Grid item xs={6} align=\"right\">\n              <Typography>\n                <Box fontWeight=\"fontWeightBold\">Total drivers:</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={6} align=\"left\">\n              {driverCount}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default function OrganizationContent(props) {\n  return (\n    <Grid item xs={12} container justify=\"center\">\n      <Grid item xs={12}>\n        <OrganizationInfoPanel parentProps={props} />\n      </Grid>\n    </Grid>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\SuperSponsorOrganizationContent.js",["340"],"import { Button, Grid, Paper, TextField, Typography } from '@material-ui/core'\nimport { toLower } from 'lodash'\nimport { useContext, useState } from 'react'\nimport { UserContext } from '../Helpers/UserContext'\nimport LoadingIcon from './LoadingIcon'\nimport OrganizationSponsorManagementPanel from './OrganizationSponsorManagementPanel'\n\nfunction RenameOrganizationPanel(props) {\n  const userData = useContext(UserContext).user\n\n  const [organizationName, setOrganizationName] = useState(\n    userData.Organization,\n  )\n  const [organizationNameHelperText, setOrganizationNameHelperText] = useState(\n    null,\n  )\n\n  return (\n    // header\n    <Grid\n      item\n      container\n      justify=\"space-between\"\n      xs={12}\n      component={Paper}\n      style={{ padding: 20 }}\n    >\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">Rename your organization</Typography>\n      </Grid>\n      {/* <Grid item xs={6} align=\"right\">\n          <Typography>(only super sponsors should see this panel)</Typography>\n        </Grid> */}\n      <Grid item xs={12}>\n        <Typography>\n          Change the name of your organization. Changes affect all of your\n          sponsors.\n        </Typography>\n      </Grid>\n\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n\n      {/* organization name form */}\n      <Grid item container xs={12} alignItems=\"center\" spacing={2}>\n        <Grid item xs={7} md={5}>\n          <TextField\n            fullWidth\n            variant=\"filled\"\n            size=\"small\"\n            label=\"Organization name\"\n            error={organizationNameHelperText}\n            defaultValue={organizationName}\n            helperText={organizationNameHelperText}\n            onChange={(event) => {\n              setOrganizationNameHelperText(null)\n              setOrganizationName(event.target.value)\n            }}\n          ></TextField>\n        </Grid>\n\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={() => {\n              //   get list of sponsors\n              let GET_SPONSORDATA_URL =\n                'https://2cw17jd576.execute-api.us-east-1.amazonaws.com/dev/sponsorlist'\n              fetch(GET_SPONSORDATA_URL)\n                .then((response) => response.json())\n                .then((data) => {\n                  let clean_sonsor_list = []\n                  let sponsor_array = JSON.parse(data.body.toString()).Items\n                  sponsor_array.forEach((val) => {\n                    clean_sonsor_list.push(toLower(val.Organization.S))\n                  })\n\n                  if (!organizationName) {\n                    setOrganizationNameHelperText('Required')\n                    return\n                  }\n\n                  if (clean_sonsor_list.includes(toLower(organizationName))) {\n                    setOrganizationNameHelperText('Must be unique')\n                    return\n                  }\n\n                  // save the profile information\n                  let SAVE_USER_PROFILE_URL =\n                    'https://waza1dohpl.execute-api.us-east-1.amazonaws.com/dev/updateorgname'\n                  let requestOptions = {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                      Org: userData.Organization,\n                      NewOrgName: organizationName,\n                    }),\n                  }\n                  fetch(SAVE_USER_PROFILE_URL, requestOptions).then(() => {\n                    window.location.reload()\n                  })\n                })\n            }}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default function SuperSponsorContent(props) {\n  if (!props.orgProps.organizationUsers[0]) {\n    return null\n  } else {\n    return (\n      <Grid item xs={12} container justify=\"center\">\n        <Grid item xs={12}>\n          <RenameOrganizationPanel />\n        </Grid>\n        <Grid item xs={12}>\n          <br />\n        </Grid>\n\n        <Grid item container justify=\"center\" xs={12}>\n          <OrganizationSponsorManagementPanel parentProps={props} />\n        </Grid>\n      </Grid>\n    )\n  }\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorAsDriverDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\CartDialog.js",["341"],"import React, { useEffect, useState } from 'react'\n\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport Typography from '@material-ui/core/Typography'\nimport { Divider, Grid, TextField } from '@material-ui/core'\nimport LoadingIcon from './LoadingIcon'\nimport { useHistory } from 'react-router'\n\nexport default function CartDialog(props) {\n  let history = useHistory()\n\n  const handleClose = () => {\n    props.dialogProps.setDialogIsOpenState(false)\n  }\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {}, [])\n\n  let cart_cost = props.dialogProps.cart.reduce((prev, curr) => {\n    return (\n      prev +\n      (curr.FullItemDetails.Price * curr.Quantity) /\n        props.dialogProps.activeSponsor.PointToDollarRatio\n    )\n  }, 0)\n\n  return (\n    <div>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={props.dialogProps.dialogIsOpen}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <Grid container style={{ padding: 20 }}>\n          <Grid item xs={12} container justify=\"flex-start\" alignItems=\"center\">\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" id=\"alert-dialog-title\">\n                Your cart\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <Grid item align=\"center\" xs={12}>\n            <br />\n          </Grid>\n\n          {isLoading ? (\n            <LoadingIcon />\n          ) : (\n            <Grid container justify=\"center\" spacing={3}>\n              {/* {JSON.stringify(props.dialogProps.cart)} */}\n              {props.dialogProps.cart.map((element) => {\n                return (\n                  <Grid item xs={12} container spacing={2} alignItems=\"center\">\n                    <Grid item xs={12}>\n                      <b> {element.FullItemDetails.Name}</b>\n                    </Grid>\n                    <Grid\n                      item\n                      container\n                      xs={12}\n                      justify=\"space-between\"\n                      alignItems=\"flex-end\"\n                      spacing={2}\n                    >\n                      <Grid>\n                        <img\n                          src={element.FullItemDetails.PhotoURL}\n                          alt=\"alt text\"\n                          style={{ maxWidth: '125px', maxHeight: '125px' }}\n                        />\n                      </Grid>\n\n                      <Grid\n                        item\n                        container\n                        justify=\"flex-end\"\n                        // component={Paper}\n                        xs={5}\n                      >\n                        <Grid item>\n                          <TextField\n                            type=\"number\"\n                            variant=\"filled\"\n                            size=\"small\"\n                            label=\"Quantity\"\n                            value={element.Quantity}\n                            onChange={(event) => {\n                              if (\n                                event.target.value >= 0 &&\n                                event.target.value <=\n                                  element.FullItemDetails.Stock\n                              )\n                                props.dialogProps.changeItemQuantity(\n                                  element,\n                                  event.target.value,\n                                )\n                            }}\n                          ></TextField>\n                        </Grid>\n                        <Grid item>\n                          {element.FullItemDetails.Price /\n                            props.dialogProps.activeSponsor\n                              .PointToDollarRatio}{' '}\n                          pts x {element.Quantity} ={' '}\n                          {(element.FullItemDetails.Price /\n                            props.dialogProps.activeSponsor\n                              .PointToDollarRatio) *\n                            element.Quantity}{' '}\n                          pts\n                        </Grid>\n\n                        <Grid item xs={12}>\n                          <br />\n                        </Grid>\n\n                        <Grid item>\n                          <Button\n                            variant=\"contained\"\n                            style={{\n                              color: 'white',\n                              backgroundColor: '#444444',\n                            }}\n                            onClick={() => {\n                              props.dialogProps.removeItem(element)\n                            }}\n                          >\n                            Remove from cart\n                          </Button>\n                        </Grid>\n\n                        {/* <p>Quantity: {element.Quantity}</p> */}\n                      </Grid>\n                      <Grid item xs={12}>\n                        <br />\n                      </Grid>\n                      <Grid item xs={12}>\n                        {' '}\n                        <Divider />{' '}\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                )\n              })}\n              {cart_cost > 0 &&\n              cart_cost < props.dialogProps.activeSponsor.Points ? (\n                <Grid item xs={12} container align=\"right\" justify=\"flex-end\">\n                  <Grid item xs={12}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => {\n                        if (\n                          cart_cost > 0 &&\n                          cart_cost < props.dialogProps.activeSponsor.Points\n                        ) {\n                          let ordered_products = props.dialogProps.cart\n                            .filter((element) => element.Quantity > 0)\n                            .map((element) => {\n                              return {\n                                ProductID: element.ProductID,\n                                Quantity: parseInt(element.Quantity),\n                                CostPerItem: Math.ceil(\n                                  parseFloat(element.FullItemDetails.Price),\n                                ),\n                              }\n                            })\n\n                          let MAKE_ORDER_URL =\n                            'https://jbcqty2yxb.execute-api.us-east-1.amazonaws.com/dev/createorder'\n                          let requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({\n                              SponsorID:\n                                props.dialogProps.activeSponsor.SponsorID,\n                              DriverID: props.dialogProps.activeDriver.Username,\n                              ProductIDs: ordered_products,\n                              Cost: Math.ceil(\n                                cart_cost *\n                                  props.dialogProps.activeSponsor\n                                    .PointToDollarRatio,\n                              ),\n                            }),\n                          }\n                          fetch(MAKE_ORDER_URL, requestOptions).then(() => {\n                            // TODO: take the user to an order confirmation page\n                            console.log('order confirmation page needs to show')\n                            //for now, just redirect to 'My orders'\n                            history.push('/orders')\n                          })\n                        }\n                      }}\n                    >\n                      Check out\n                    </Button>\n                  </Grid>\n                  <Grid item>{cart_cost} points</Grid>\n                </Grid>\n              ) : cart_cost > props.dialogProps.activeSponsor.Points ? (\n                <p>\n                  Not enough points {cart_cost} required, but you only have{' '}\n                  {props.dialogProps.activeSponsor.Points}\n                </p>\n              ) : (\n                <p>Your cart is empty</p>\n              )}\n            </Grid>\n          )}\n          {/* \n          <Grid item align=\"center\" xs={12}>\n            <br />\n          </Grid> */}\n        </Grid>\n      </Dialog>\n    </div>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ChooseCatalogSponsorDialog.js",["342"],"import React, { useContext, useEffect, useState } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport Typography from '@material-ui/core/Typography'\nimport { Grid, Paper } from '@material-ui/core'\nimport { UserContext } from '../Helpers/UserContext'\nimport LoadingIcon from './LoadingIcon'\n\nexport default function ChooseCatalogSponsorDialog(props) {\n  const userData = useContext(UserContext).user\n\n  const handleClose = () => {\n    props.dialogProps.setDialogIsOpenState(false)\n  }\n\n  const [registeredSponsors, setRegisteredSponsors] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      let GET_DRIVERS_SPONSORS_URL = `https://8mhdaeq2kl.execute-api.us-east-1.amazonaws.com/dev/getuserdetails/?DriverID=${userData.Username}`\n      let partnered_sponsors_response = await fetch(GET_DRIVERS_SPONSORS_URL)\n      let partnered_sponsors_data = await partnered_sponsors_response.json()\n      let partnered_sponsors_array = await JSON.parse(\n        partnered_sponsors_data.body.toString(),\n      ).Items\n\n      let active_sponsors_array = partnered_sponsors_array.filter(\n        (element) =>\n          parseInt(element.Status.N) === 2 &&\n          parseInt(element.AccountStatus.N) === 1,\n      )\n\n      let active_sponsors_formatted = active_sponsors_array.map((element) => {\n        return {\n          SponsorID: element.SponsorID.S,\n          SponsorName: element.FirstName.S + ' ' + element.LastName.S,\n          Points: parseInt(element.Points.N),\n          SponsorOrganization: element.Organization.S,\n          PointToDollarRatio: parseFloat(element.PointDollarRatio.N),\n        }\n      })\n\n      setRegisteredSponsors(active_sponsors_formatted)\n    })()\n    setIsLoading(false)\n  }, [])\n\n  return (\n    <div>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={props.dialogProps.dialogIsOpen}\n        fullWidth\n        maxWidth=\"md\"\n      >\n        <Grid container style={{ padding: 20 }}>\n          <Grid item xs={12} container justify=\"flex-start\" alignItems=\"center\">\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" id=\"alert-dialog-title\">\n                Which sponsor's catalog do you want to view?\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <Grid item align=\"center\" xs={12}>\n            <br />\n          </Grid>\n\n          {isLoading || !registeredSponsors ? (\n            <LoadingIcon />\n          ) : (\n            <Grid container justify=\"center\" spacing={3}>\n              {registeredSponsors.map((element) => {\n                return (\n                  <Grid\n                    key={element.SponsorID}\n                    item\n                    container\n                    spacing={2}\n                    xs={4}\n                    component={Paper}\n                    style={{ cursor: 'pointer', margin: 10 }}\n                    onClick={(event) => {\n                      props.dialogProps.setActiveSponsor({\n                        ...element,\n                      })\n\n                      handleClose()\n                    }}\n                  >\n                    {/* <Paper style={{ padding: 20, cursor: 'pointer' }}> */}\n                    <Grid item align=\"center\" xs={12}>\n                      <br />\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      {element.SponsorID}\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      {element.SponsorName}\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      {element.SponsorOrganization}\n                    </Grid>\n\n                    <Grid item align=\"center\" xs={12}>\n                      {element.Points} points\n                    </Grid>\n                    <Grid item align=\"center\" xs={12}>\n                      <br />\n                    </Grid>\n                    {/* </Paper> */}\n                  </Grid>\n                )\n              })}\n            </Grid>\n          )}\n\n          <Grid item align=\"center\" xs={12}>\n            <br />\n          </Grid>\n        </Grid>\n      </Dialog>\n    </div>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectableSpecial.js",["343"],"import React, { useEffect, useState } from 'react'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { Box, Checkbox, TableSortLabel } from '@material-ui/core'\n\nimport orderBy from 'lodash/orderBy'\nimport LoadingIcon from './LoadingIcon'\n\nrequire('datejs')\n\nexport default function GenericTableSelectable(props) {\n  const [rows, setRows] = useState(null)\n\n  const [columnToSort, setColumnToSort] = useState(props.initialSortedColumn)\n  const [allSelected, setAllSelected] = useState(false)\n  const [sortDirection, setSortDirection] = useState(\n    props.initialSortedDirection,\n  )\n  function handleSort(columnName) {\n    if (columnName === columnToSort) {\n      setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc')\n    } else {\n      setSortDirection('desc')\n    }\n\n    setColumnToSort(columnName)\n  }\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    setIsLoading(true)\n    let dataList = props.data\n    setRows(dataList)\n    setIsLoading(false)\n  }, [])\n\n  function onSelectAllClick(curr_state) {\n    let updated_items = props.checkedItems.map((element) => {\n      return {\n        ...element,\n        isChecked: !curr_state,\n      }\n    })\n\n    props.setCheckedItems(updated_items)\n  }\n\n  // returns whether or not a row is marked as 'checked' in program state. true if yes. false if no.\n  function isSelected(row_key) {\n    let selectedItem = props.checkedItems.find((element) => {\n      return element.key === row_key\n    })\n    return selectedItem ? selectedItem.isChecked : false\n  }\n\n  function setIsSelected(row_key, state) {\n    let updated_items = props.checkedItems.map((element) => {\n      if (element.key === row_key) {\n        return { ...element, isChecked: !element.isChecked }\n      } else {\n        return element\n      }\n    })\n\n    props.setCheckedItems(updated_items)\n  }\n\n  if (!isLoading) {\n    return (\n      <TableContainer\n        style={{ maxHeight: 370, minHeight: 370 }}\n        component={Paper}\n      >\n        <Table stickyHeader aria-label=\"simple table\">\n          {/* Table header */}\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  // onChange={onSelectAllClick}\n                  onClick={(event) => {\n                    event.stopPropagation()\n                    setAllSelected(!allSelected)\n                    onSelectAllClick(allSelected)\n                  }}\n                />\n              </TableCell>\n\n              {/* map the head cells to the table header */}\n              {props.headCells.map((headCell) => (\n                <TableCell\n                  width={headCell.width}\n                  key={headCell.id}\n                  sortDirection={\n                    columnToSort === headCell.id ? sortDirection : false\n                  }\n                >\n                  <TableSortLabel\n                    active={columnToSort === headCell.id}\n                    direction={\n                      columnToSort === headCell.id ? sortDirection : 'asc'\n                    }\n                    hideSortIcon={columnToSort === headCell.id ? false : true}\n                    onClick={() => {\n                      handleSort(headCell.id)\n                    }}\n                  >\n                    <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\n                  </TableSortLabel>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n\n          {/* Table content */}\n          <TableBody>\n            {/* map the data to the table rows */}\n            {orderBy(rows, columnToSort, sortDirection).map((row) => (\n              <TableRow\n                hover={true}\n                key={row[props.tableKey]}\n                style={props.setSelectedRow ? { cursor: 'pointer' } : null}\n                onClick={\n                  props.setSelectedRow\n                    ? () => {\n                        let selectedRow = rows.find((element) => {\n                          return element[props.tableKey] === row[props.tableKey]\n                        })\n\n                        if (props.setSelectedRow)\n                          props.setSelectedRow(selectedRow)\n\n                        if (props.setDialogIsOpenState) {\n                          props.setDialogIsOpenState(true)\n                        }\n                      }\n                    : null\n                }\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={\n                      props.checkedItems.find((element) => {\n                        return (\n                          element.isChecked === true &&\n                          element.key === row[props.tableKey]\n                        )\n                      })\n                        ? true\n                        : false\n                    }\n                    onClick={(event) => {\n                      event.stopPropagation()\n                      setIsSelected(\n                        row[props.tableKey],\n                        !isSelected(row[props.tableKey]),\n                      )\n                    }}\n                  />\n                </TableCell>\n\n                {/* display the row key if requested */}\n                {props.showKey ? (\n                  <TableCell>{row[props.tableKey]}</TableCell>\n                ) : null}\n\n                {/* display the row cells */}\n                {Object.entries(row).map((cell) => {\n                  if (cell[0].toUpperCase().includes('DATE') && cell[1]) {\n                    return (\n                      <TableCell>{Date.parse(cell[1]).toUTCString()}</TableCell>\n                    )\n                  } else if (cell[0] !== props.tableKey) {\n                    return <TableCell>{cell[1]}</TableCell>\n                  } else {\n                    return null\n                  }\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  } else {\n    return <LoadingIcon />\n  }\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\OrganizationSponsorManagementPanel.js",["344"],"import { Button, Grid, Paper, Typography } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport AddSponsorProfileDialog from './AddSponsorProfileDialog'\nimport ViewSponsorProfileDialog from './ViewSponsorProfileDialog'\nimport GenericTable from './GenericTable'\nimport LoadingIcon from './LoadingIcon'\nrequire('datejs')\n\nconst OrganizationSponsorManagementPanel = (props) => {\n  const [isLoading, setIsLoading] = useState(true)\n\n  // dialog control\n  const [\n    addSponsorProfileDialogIsOpen,\n    setAddSponsorProfileDialogIsOpen,\n  ] = useState(false)\n\n  const [pageUpdate, setPageUpdate] = useState(0)\n  function fullPageUpdateState() {\n    setPageUpdate(pageUpdate + 1)\n  }\n  function setAddSponsorProfileDialogIsOpenState(state, refresh) {\n    setAddSponsorProfileDialogIsOpen(state)\n\n    if (refresh) {\n      props.parentProps.pageProps.updatePage()\n    }\n  }\n\n  const [\n    viewSponsorProfileDialogIsOpen,\n    setViewSponsorProfileDialogIsOpen,\n  ] = useState(false)\n  function setViewSponsorProfileDialogIsOpenState(state, refresh) {\n    setViewSponsorProfileDialogIsOpen(state)\n\n    if (refresh) {\n      props.parentProps.pageProps.updatePage()\n    }\n  }\n\n  const [\n    viewTerminatedProfileDialogIsOpen,\n    setViewTerminatedProfileDialogIsOpen,\n  ] = useState(false)\n  function setViewTerminatedProfileDialogIsOpenState(state, refresh) {\n    setViewTerminatedProfileDialogIsOpen(state)\n\n    if (refresh) {\n      props.parentProps.pageProps.updatePage()\n    }\n  }\n\n  const [table1HeadCells, setTable1HeadCells] = useState(null)\n\n  const [table1Data, setTable1Data] = useState(null)\n  function setTable1DataState(state) {\n    setTable1Data(state)\n  }\n\n  const [table2Data, setTable2Data] = useState(null)\n  function setTable2DataState(state) {\n    setTable2Data(state)\n  }\n\n  const [selectedEntry, setSelectedEntry] = useState(null)\n  function setSelectedEntryState(state) {\n    setSelectedEntry(state)\n  }\n\n  const orgProps = props.parentProps.orgProps\n\n  useEffect(() => {\n    ;(async () => {\n      setIsLoading(true)\n      let org_sponsor_profiles = orgProps.organizationUsers.filter(\n        (element) => {\n          return element.AccountType === 'Sponsor'\n        },\n      )\n\n      let active_sponsor_profiles = org_sponsor_profiles.filter((element) => {\n        return element.AccountStatus === 1\n      })\n\n      let terminated_sonsor_profiles = org_sponsor_profiles.filter(\n        (element) => {\n          return element.AccountStatus === 2\n        },\n      )\n\n      let active_profile_table_data = active_sponsor_profiles.map((element) => {\n        return {\n          Username: element.Username,\n          FirstName: element.FirstName,\n          LastName: element.LastName,\n          CreatedDate: element.SignupDate,\n        }\n      })\n\n      let terminated_profile_table_data = terminated_sonsor_profiles.map(\n        (element) => {\n          return {\n            Username: element.Username,\n            FirstName: element.FirstName,\n            LastName: element.LastName,\n            CreatedDate: element.SignupDate,\n          }\n        },\n      )\n\n      setTable1Data(active_profile_table_data)\n      setTable2Data(terminated_profile_table_data)\n    })().then(() => {\n      setIsLoading(false)\n    })\n\n    setTable1HeadCells([\n      {\n        id: 'Username',\n        label: 'Username',\n        isDate: false,\n        width: 150,\n      },\n      {\n        id: 'FirstName',\n        label: 'First name',\n        isDate: false,\n        width: 50,\n      },\n      {\n        id: 'LastName',\n        label: 'Last name',\n        isDate: false,\n        width: 50,\n      },\n      {\n        id: 'CreatedDate',\n        label: 'Member since',\n        isDate: true,\n        width: 200,\n      },\n    ])\n  }, [pageUpdate])\n\n  if (isLoading) {\n    return <LoadingIcon />\n  } else {\n    return (\n      <Grid container>\n        <Grid item xs={12} container component={Paper} style={{ padding: 20 }}>\n          <AddSponsorProfileDialog\n            dialogProps={{\n              parentProps: props,\n              selectionDialogIsOpen: addSponsorProfileDialogIsOpen,\n              setSelectionDialogIsOpenState: setAddSponsorProfileDialogIsOpenState,\n              fullPageUpdateState: fullPageUpdateState,\n            }}\n          />\n          {/* active sponsor dialog */}\n          {!selectedEntry ? null : (\n            <ViewSponsorProfileDialog\n              dialogProps={{\n                parentProps: props,\n                selectionDialogIsOpen: viewSponsorProfileDialogIsOpen,\n                setSelectionDialogIsOpenState: setViewSponsorProfileDialogIsOpenState,\n                selectedEntry: selectedEntry,\n                setSelectedEntryState: setSelectedEntryState,\n                fullPageUpdateState: fullPageUpdateState,\n                action: selectedEntry.Username.includes('@') ? null : (\n                  <Button\n                    variant=\"contained\"\n                    style={{ backgroundColor: '#444444', color: 'white' }}\n                    onClick={() => {\n                      let SAVE_USER_PROFILE_URL =\n                        'https://u902s79wa3.execute-api.us-east-1.amazonaws.com/dev/saveuserdetails'\n                      let requestOptions = {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({\n                          Username: selectedEntry.Username,\n                          AccountStatus: 2,\n                        }),\n                      }\n\n                      fetch(SAVE_USER_PROFILE_URL, requestOptions).then(() => {\n                        setViewSponsorProfileDialogIsOpenState(false, true)\n                      })\n                    }}\n                  >\n                    Delete profile\n                  </Button>\n                ),\n              }}\n            />\n          )}\n\n          {/* deleted sponsor dialog */}\n          <ViewSponsorProfileDialog\n            dialogProps={{\n              parentProps: props,\n              selectionDialogIsOpen: viewTerminatedProfileDialogIsOpen,\n              setSelectionDialogIsOpenState: setViewTerminatedProfileDialogIsOpenState,\n              selectedEntry: selectedEntry,\n              setSelectedEntryState: setSelectedEntryState,\n              fullPageUpdateState: fullPageUpdateState,\n              action: (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    let SAVE_USER_PROFILE_URL =\n                      'https://u902s79wa3.execute-api.us-east-1.amazonaws.com/dev/saveuserdetails'\n                    let requestOptions = {\n                      method: 'POST',\n                      headers: { 'Content-Type': 'application/json' },\n                      body: JSON.stringify({\n                        Username: selectedEntry.Username,\n                        AccountStatus: 1,\n                      }),\n                    }\n                    fetch(SAVE_USER_PROFILE_URL, requestOptions).then(() => {\n                      setViewTerminatedProfileDialogIsOpenState(false, true)\n                    })\n                  }}\n                >\n                  Reinstate profile\n                </Button>\n              ),\n            }}\n          />\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">Manage your sponsors</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography>Add, view, and remove your sponsor profiles</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <br />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            container\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Grid item align=\"left\">\n              <Typography variant=\"h6\">Active profiles</Typography>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  setAddSponsorProfileDialogIsOpenState(true)\n                }}\n              >\n                Create sponsor profile\n              </Button>\n            </Grid>\n            <Grid item xs={12}>\n              <br />\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <GenericTable\n              headCells={table1HeadCells}\n              data={table1Data}\n              setDataState={setTable1DataState}\n              tableKey=\"Username\"\n              showKey={true}\n              initialSortedColumn=\"CreatedDate\"\n              initialSortedDirection=\"desc\"\n              selectedRow={selectedEntry}\n              setSelectedRow={setSelectedEntryState}\n              dialogIsOpen={setViewSponsorProfileDialogIsOpen}\n              setDialogIsOpenState={setViewSponsorProfileDialogIsOpenState}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <br></br>\n          </Grid>\n          <Grid item xs={12}>\n            <br></br>\n          </Grid>\n        </Grid>\n\n        <Grid item>\n          <br />\n        </Grid>\n\n        {/* part 2 */}\n        <Grid item xs={12} container component={Paper} style={{ padding: 20 }}>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">Deleted sponsor profiles</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography>\n              View and reinstate the sponsor profiles you have deleted\n            </Typography>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            container\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={12}>\n              <br />\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <GenericTable\n              headCells={table1HeadCells}\n              data={table2Data}\n              setDataState={setTable2DataState}\n              tableKey=\"Username\"\n              showKey={true}\n              initialSortedColumn=\"CreatedDate\"\n              initialSortedDirection=\"desc\"\n              selectedRow={selectedEntry}\n              setSelectedRow={setSelectedEntryState}\n              dialogIsOpen={setViewTerminatedProfileDialogIsOpen}\n              setDialogIsOpenState={setViewTerminatedProfileDialogIsOpenState}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <br />\n          </Grid>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default OrganizationSponsorManagementPanel\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\DeleteSponsorshipDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ApplyAgainDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\GenericTableSelectable.js",["345","346"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Box, Checkbox, TableSortLabel } from '@material-ui/core'\r\n\r\nimport orderBy from 'lodash/orderBy'\r\nimport LoadingIcon from './LoadingIcon'\r\n\r\nrequire('datejs')\r\n\r\nexport default function GenericTableSelectable(props) {\r\n  const [rows, setRows] = useState(null)\r\n\r\n  const [columnToSort, setColumnToSort] = useState(props.initialSortedColumn)\r\n  const [allSelected, setAllSelected] = useState(false)\r\n  const [sortDirection, setSortDirection] = useState(\r\n    props.initialSortedDirection,\r\n  )\r\n  function handleSort(columnName) {\r\n    if (columnName === columnToSort) {\r\n      setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc')\r\n    } else {\r\n      setSortDirection('desc')\r\n    }\r\n\r\n    setColumnToSort(columnName)\r\n  }\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    let dataList = props.data\r\n    setRows(dataList)\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  function onSelectAllClick(curr_state) {\r\n    let updated_items = props.checkedItems.map((element) => {\r\n      return {\r\n        ...element,\r\n        isChecked: !curr_state,\r\n      }\r\n    })\r\n\r\n    props.setCheckedItems(updated_items)\r\n  }\r\n\r\n  // returns whether or not a row is marked as 'checked' in program state. true if yes. false if no.\r\n  function isSelected(row_key) {\r\n    let selectedItem = props.checkedItems.find((element) => {\r\n      return element.key === row_key\r\n    })\r\n    return selectedItem.isChecked\r\n  }\r\n\r\n  function setIsSelected(row_key, state) {\r\n    let updated_items = props.checkedItems.map((element) => {\r\n      if (element.key === row_key) {\r\n        return { ...element, isChecked: !element.isChecked }\r\n      } else {\r\n        return element\r\n      }\r\n    })\r\n\r\n    props.setCheckedItems(updated_items)\r\n  }\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <TableContainer\r\n        style={{ maxHeight: 370, minHeight: 370 }}\r\n        component={Paper}\r\n      >\r\n        <Table stickyHeader aria-label=\"simple table\">\r\n          {/* Table header */}\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                  // onChange={onSelectAllClick}\r\n                  onClick={(event) => {\r\n                    event.stopPropagation()\r\n                    setAllSelected(!allSelected)\r\n                    onSelectAllClick(allSelected)\r\n                  }}\r\n                />\r\n              </TableCell>\r\n\r\n              {/* map the head cells to the table header */}\r\n              {props.headCells.map((headCell) => (\r\n                <TableCell\r\n                  width={headCell.width}\r\n                  key={headCell.id}\r\n                  sortDirection={\r\n                    columnToSort === headCell.id ? sortDirection : false\r\n                  }\r\n                >\r\n                  <TableSortLabel\r\n                    active={columnToSort === headCell.id}\r\n                    direction={\r\n                      columnToSort === headCell.id ? sortDirection : 'asc'\r\n                    }\r\n                    hideSortIcon={columnToSort === headCell.id ? false : true}\r\n                    onClick={() => {\r\n                      handleSort(headCell.id)\r\n                    }}\r\n                  >\r\n                    <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          {/* Table content */}\r\n          <TableBody>\r\n            {/* map the data to the table rows */}\r\n            {orderBy(rows, columnToSort, sortDirection).map((row) => (\r\n              <TableRow\r\n                hover={true}\r\n                key={row[props.tableKey]}\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  let selectedRow = rows.find((element) => {\r\n                    return element[props.tableKey] === row[props.tableKey]\r\n                  })\r\n\r\n                  props.setSelectedRow(selectedRow)\r\n\r\n                  props.setDialogIsOpenState(true)\r\n                }}\r\n              >\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={\r\n                      props.checkedItems.find((element) => {\r\n                        return (\r\n                          element.isChecked === true &&\r\n                          element.key === row[props.tableKey]\r\n                        )\r\n                      })\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    onClick={(event) => {\r\n                      event.stopPropagation()\r\n                      setIsSelected(\r\n                        row[props.tableKey],\r\n                        !isSelected(row[props.tableKey]),\r\n                      )\r\n                    }}\r\n                  />\r\n                </TableCell>\r\n\r\n                {/* display the row key if requested */}\r\n                {props.showKey ? (\r\n                  <TableCell>{row[props.tableKey]}</TableCell>\r\n                ) : null}\r\n\r\n                {/* display the row cells */}\r\n                {Object.entries(row).map((cell) => {\r\n                  if (cell[0].toUpperCase().includes('DATE') && cell[1]) {\r\n                    return (\r\n                      <TableCell>{Date.parse(cell[1]).toUTCString()}</TableCell>\r\n                    )\r\n                  } else if (cell[0] !== props.tableKey) {\r\n                    return <TableCell>{cell[1]}</TableCell>\r\n                  } else {\r\n                    return null\r\n                  }\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  } else {\r\n    return <LoadingIcon />\r\n  }\r\n}\r\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\ViewSponsorProfileDialog.js",[],"C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\Components\\AddSponsorProfileDialog.js",["347"],"import React, { useContext, useEffect, useState } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Grid, TextField, Typography } from '@material-ui/core'\nimport { UserContext } from '../Helpers/UserContext'\n\nexport default function AddSponsorProfileDialog(props) {\n  const handleClose = () => {\n    props.dialogProps.setSelectionDialogIsOpenState(false)\n  }\n  const userData = useContext(UserContext).user\n  const [username, setUsername] = useState(null)\n  const [usernameHelperText, setUsernameHelperText] = useState(null)\n  const [firstName, setFirstName] = useState(null)\n  const [firstNameHelperText, setFirstNameHelperText] = useState(null)\n  const [lastName, setLastName] = useState(null)\n  const [lastNameHelperText, setLastNameHelperText] = useState(null)\n  const [bio, setBio] = useState(null)\n  const [bioHelperText, setBioHelperText] = useState(null)\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [usernameList, setUsernameList] = useState(false)\n\n  useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      let get_usernames_url =\n        'https://hym6oy13e9.execute-api.us-east-1.amazonaws.com/dev/getusernames'\n      let usernames_raw = await fetch(get_usernames_url)\n      let usernames_json = await usernames_raw.json()\n      let username_array = usernames_json.body\n      setUsernameList(username_array)\n    })().then(() => {\n      setIsLoading(false)\n    })\n  }, [])\n\n  return (\n    <div>\n      <Dialog\n        open={props.dialogProps.selectionDialogIsOpen}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{'Add a sponsor?'}</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} justify=\"center\">\n            <Grid item xs={12}>\n              <Typography>\n                Enter the profile details of the sponsor you would like to\n                create\n              </Typography>\n            </Grid>\n            <Grid item container xs={6} justify=\"center\">\n              <TextField\n                fullWidth\n                label=\"Username\"\n                helperText={usernameHelperText}\n                error={usernameHelperText}\n                variant=\"filled\"\n                onChange={(event) => {\n                  setUsernameHelperText(null)\n                  setUsername(event.target.value)\n                }}\n              />\n            </Grid>\n            <Grid item container xs={12} spacing={2} justify=\"center\">\n              <Grid item xs={3}>\n                <TextField\n                  fullwidth\n                  label=\"First name\"\n                  helperText={firstNameHelperText}\n                  error={firstNameHelperText}\n                  variant=\"filled\"\n                  onChange={(event) => {\n                    setFirstNameHelperText(null)\n                    setFirstName(event.target.value)\n                  }}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  fullwidth\n                  label=\"Last name\"\n                  helperText={lastNameHelperText}\n                  error={lastNameHelperText}\n                  variant=\"filled\"\n                  onChange={(event) => {\n                    setLastNameHelperText(null)\n                    setLastName(event.target.value)\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid item container xs={6}>\n              <TextField\n                label=\"Bio\"\n                multiline\n                rows={4}\n                variant=\"filled\"\n                fullWidth\n                helperText={bioHelperText}\n                error={bioHelperText}\n                onChange={(event) => {\n                  setBioHelperText(null)\n                  setBio(event.target.value)\n                }}\n              />\n            </Grid>\n\n            <Grid item container xs={12} justify=\"center\">\n              <Grid item container justify=\"flex-end\" xs={6}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    // username validation\n                    let validationFailed = false\n                    if (!username) {\n                      setUsernameHelperText('Required')\n                      validationFailed = true\n                    } else if (\n                      username.includes(\"'\") ||\n                      username.includes(' ') ||\n                      username.includes('\"') ||\n                      username.includes('@')\n                    ) {\n                      setUsernameHelperText(\n                        'Avoid special characters (\\', \", @, etc)',\n                      )\n                      validationFailed = true\n                    } else if (\n                      usernameList.find((element) => {\n                        return element === username\n                      })\n                    ) {\n                      setUsernameHelperText('Choose a unique name')\n                      validationFailed = true\n                    }\n\n                    // first name validation\n                    if (!firstName) {\n                      setFirstNameHelperText('Required')\n                      validationFailed = true\n                    }\n\n                    // last name validation\n                    if (!lastName) {\n                      setLastNameHelperText('Required')\n                      validationFailed = true\n                    }\n\n                    // bio validation\n                    if (!bio) {\n                      setBioHelperText('Required')\n                      validationFailed = true\n                    }\n\n                    if (validationFailed) return\n\n                    let REGISTER_PROFILE_URL = `https://thuv0o9tqa.execute-api.us-east-1.amazonaws.com/dev/saveuserdetails`\n                    let requestOptions = {\n                      method: 'POST',\n                      headers: { 'Content-Type': 'application/json' },\n                      body: JSON.stringify({\n                        Username: username,\n                        Organization: userData.Organization,\n                        FirstName: firstName,\n                        LastName: lastName,\n                        Bio: bio,\n                        AccountType: 'Sponsor',\n                        AccountStatus: 1,\n                      }),\n                    }\n                    fetch(REGISTER_PROFILE_URL, requestOptions).then(() => {\n                      props.dialogProps.setSelectionDialogIsOpenState(\n                        false,\n                        true,\n                      )\n                    })\n                  }}\n                >\n                  Create profile\n                </Button>\n              </Grid>\n            </Grid>\n\n            <Grid item container xs={12}>\n              <br />\n            </Grid>\n            <Grid item container xs={12}>\n              <br />\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","C:\\Users\\jeffr\\Downloads\\4910\\Master\\src\\aws-exports.js",[],{"ruleId":"348","severity":1,"message":"349","line":60,"column":6,"nodeType":"350","endLine":60,"endColumn":8,"suggestions":"351"},{"ruleId":"352","severity":1,"message":"353","line":10,"column":10,"nodeType":"354","messageId":"355","endLine":10,"endColumn":26},{"ruleId":"352","severity":1,"message":"356","line":10,"column":28,"nodeType":"354","messageId":"355","endLine":10,"endColumn":32},{"ruleId":"348","severity":1,"message":"357","line":39,"column":6,"nodeType":"350","endLine":39,"endColumn":8,"suggestions":"358"},{"ruleId":"348","severity":1,"message":"359","line":55,"column":6,"nodeType":"350","endLine":55,"endColumn":8,"suggestions":"360"},{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"348","severity":1,"message":"365","line":43,"column":6,"nodeType":"350","endLine":43,"endColumn":8,"suggestions":"366"},{"ruleId":"352","severity":1,"message":"367","line":39,"column":10,"nodeType":"354","messageId":"355","endLine":39,"endColumn":19},{"ruleId":"352","severity":1,"message":"368","line":180,"column":21,"nodeType":"354","messageId":"355","endLine":180,"endColumn":33},{"ruleId":"348","severity":1,"message":"369","line":75,"column":6,"nodeType":"350","endLine":75,"endColumn":8,"suggestions":"370"},{"ruleId":"348","severity":1,"message":"371","line":203,"column":6,"nodeType":"350","endLine":203,"endColumn":18,"suggestions":"372"},{"ruleId":"352","severity":1,"message":"373","line":34,"column":10,"nodeType":"354","messageId":"355","endLine":34,"endColumn":23},{"ruleId":"348","severity":1,"message":"371","line":150,"column":6,"nodeType":"350","endLine":150,"endColumn":18,"suggestions":"374"},{"ruleId":"348","severity":1,"message":"371","line":203,"column":6,"nodeType":"350","endLine":203,"endColumn":8,"suggestions":"375"},{"ruleId":"348","severity":1,"message":"371","line":205,"column":6,"nodeType":"350","endLine":205,"endColumn":18,"suggestions":"376"},{"ruleId":"348","severity":1,"message":"377","line":91,"column":6,"nodeType":"350","endLine":91,"endColumn":18,"suggestions":"378"},{"ruleId":"352","severity":1,"message":"379","line":93,"column":10,"nodeType":"354","messageId":"355","endLine":93,"endColumn":19},{"ruleId":"348","severity":1,"message":"380","line":200,"column":6,"nodeType":"350","endLine":200,"endColumn":8,"suggestions":"381"},{"ruleId":"348","severity":1,"message":"371","line":247,"column":6,"nodeType":"350","endLine":247,"endColumn":18,"suggestions":"382"},{"ruleId":"352","severity":1,"message":"383","line":258,"column":10,"nodeType":"354","messageId":"355","endLine":258,"endColumn":34},{"ruleId":"352","severity":1,"message":"384","line":261,"column":12,"nodeType":"354","messageId":"355","endLine":261,"endColumn":44},{"ruleId":"352","severity":1,"message":"368","line":7,"column":21,"nodeType":"354","messageId":"355","endLine":7,"endColumn":33},{"ruleId":"348","severity":1,"message":"377","line":42,"column":6,"nodeType":"350","endLine":42,"endColumn":8,"suggestions":"385"},{"ruleId":"352","severity":1,"message":"386","line":2,"column":10,"nodeType":"354","messageId":"355","endLine":2,"endColumn":20},{"ruleId":"348","severity":1,"message":"387","line":40,"column":6,"nodeType":"350","endLine":40,"endColumn":8,"suggestions":"388"},{"ruleId":"348","severity":1,"message":"389","line":56,"column":6,"nodeType":"350","endLine":56,"endColumn":8,"suggestions":"390"},{"ruleId":"352","severity":1,"message":"391","line":31,"column":10,"nodeType":"354","messageId":"355","endLine":31,"endColumn":24},{"ruleId":"348","severity":1,"message":"371","line":77,"column":6,"nodeType":"350","endLine":77,"endColumn":8,"suggestions":"392"},{"ruleId":"352","severity":1,"message":"393","line":6,"column":8,"nodeType":"354","messageId":"355","endLine":6,"endColumn":25},{"ruleId":"352","severity":1,"message":"394","line":8,"column":10,"nodeType":"354","messageId":"355","endLine":8,"endColumn":17},{"ruleId":"352","severity":1,"message":"395","line":14,"column":9,"nodeType":"354","messageId":"355","endLine":14,"endColumn":24},{"ruleId":"348","severity":1,"message":"396","line":107,"column":6,"nodeType":"350","endLine":107,"endColumn":8,"suggestions":"397"},{"ruleId":"352","severity":1,"message":"398","line":20,"column":28,"nodeType":"354","messageId":"355","endLine":20,"endColumn":47},{"ruleId":"352","severity":1,"message":"398","line":241,"column":28,"nodeType":"354","messageId":"355","endLine":241,"endColumn":47},{"ruleId":"352","severity":1,"message":"399","line":559,"column":12,"nodeType":"354","messageId":"355","endLine":559,"endColumn":29},{"ruleId":"352","severity":1,"message":"400","line":702,"column":10,"nodeType":"354","messageId":"355","endLine":702,"endColumn":22},{"ruleId":"352","severity":1,"message":"399","line":704,"column":12,"nodeType":"354","messageId":"355","endLine":704,"endColumn":29},{"ruleId":"352","severity":1,"message":"368","line":44,"column":21,"nodeType":"354","messageId":"355","endLine":44,"endColumn":33},{"ruleId":"352","severity":1,"message":"401","line":5,"column":8,"nodeType":"354","messageId":"355","endLine":5,"endColumn":19},{"ruleId":"352","severity":1,"message":"368","line":17,"column":21,"nodeType":"354","messageId":"355","endLine":17,"endColumn":33},{"ruleId":"348","severity":1,"message":"371","line":47,"column":6,"nodeType":"350","endLine":47,"endColumn":8,"suggestions":"402"},{"ruleId":"348","severity":1,"message":"387","line":40,"column":6,"nodeType":"350","endLine":40,"endColumn":8,"suggestions":"403"},{"ruleId":"348","severity":1,"message":"404","line":144,"column":6,"nodeType":"350","endLine":144,"endColumn":18,"suggestions":"405"},{"ruleId":"352","severity":1,"message":"386","line":2,"column":10,"nodeType":"354","messageId":"355","endLine":2,"endColumn":20},{"ruleId":"348","severity":1,"message":"387","line":41,"column":6,"nodeType":"350","endLine":41,"endColumn":8,"suggestions":"406"},{"ruleId":"352","severity":1,"message":"367","line":23,"column":10,"nodeType":"354","messageId":"355","endLine":23,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'userProfileDetails'. Either include them or remove the dependency array.","ArrayExpression",["407"],"no-unused-vars","'CircularProgress' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","React Hook useEffect has a missing dependency: 'userProfileDetails.Email_ID'. Either include it or remove the dependency array.",["408"],"React Hook useEffect has missing dependencies: 'applicationDetails' and 'props.accountEmail'. Either include them or remove the dependency array.",["409"],"no-native-reassign",["410"],"no-negated-in-lhs",["411"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["412"],"'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeProfile', 'history', 'setProfileSelectionDialogIsOpenState', 'userData.AccountStatus', 'userData.AccountType', and 'userData.Organization'. Either include them or remove the dependency array.",["413"],"React Hook useEffect has a missing dependency: 'userData.Username'. Either include it or remove the dependency array.",["414"],"'itemTableData' is assigned a value but never used.",["415"],["416"],["417"],"React Hook useEffect has a missing dependency: 'userData.Organization'. Either include it or remove the dependency array.",["418"],"'allOrders' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentOrders', 'previousOrders', and 'userData.Username'. Either include them or remove the dependency array. You can also do a functional update 'setPreviousOrders(p => ...)' if you only need 'previousOrders' in the 'setPreviousOrders' call.",["419"],["420"],"'pointRatioDialogResponse' is assigned a value but never used.","'setPointRatioDialogResponseState' is defined but never used.",["421"],"'makeStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["422"],"React Hook useEffect has a missing dependency: 'props.tableProps.data'. Either include it or remove the dependency array. If 'setTable1Data' needs the current value of 'props.tableProps.data', you can also switch to useReducer instead of useState and read 'props.tableProps.data' in the reducer.",["423"],"'dialogResponse' is assigned a value but never used.",["424"],"'DialogContentText' is defined but never used.","'Divider' is defined but never used.","'handleClickOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ebayItems' and 'props.dialogProps.allCatalogData'. Either include them or remove the dependency array. You can also do a functional update 'setEbayItems(e => ...)' if you only need 'ebayItems' in the 'setEbayItems' call.",["425"],"'setPointDollarRatio' is assigned a value but never used.","'triggerPageUpdate' is defined but never used.","'dialogIsOpen' is assigned a value but never used.","'LoadingIcon' is defined but never used.",["426"],["427"],"React Hook useEffect has a missing dependency: 'orgProps.organizationUsers'. Either include it or remove the dependency array.",["428"],["429"],{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},"no-global-assign","no-unsafe-negation",{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"440","fix":"442"},{"desc":"443","fix":"444"},{"desc":"440","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"440","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"443","fix":"457"},{"desc":"458","fix":"459"},{"desc":"443","fix":"460"},{"desc":"453","fix":"461"},{"desc":"462","fix":"463"},{"desc":"453","fix":"464"},"Update the dependencies array to be: [history, userProfileDetails]",{"range":"465","text":"466"},"Update the dependencies array to be: [userProfileDetails.Email_ID]",{"range":"467","text":"468"},"Update the dependencies array to be: [applicationDetails, props.accountEmail]",{"range":"469","text":"470"},"Update the dependencies array to be: [user]",{"range":"471","text":"472"},"Update the dependencies array to be: [activeProfile, history, setProfileSelectionDialogIsOpenState, userData.AccountStatus, userData.AccountType, userData.Organization]",{"range":"473","text":"474"},"Update the dependencies array to be: [pageUpdate, userData.Username]",{"range":"475","text":"476"},{"range":"477","text":"476"},"Update the dependencies array to be: [userData.Username]",{"range":"478","text":"479"},{"range":"480","text":"476"},"Update the dependencies array to be: [pageUpdate, userData.Organization]",{"range":"481","text":"482"},"Update the dependencies array to be: [currentOrders, previousOrders, userData.Username]",{"range":"483","text":"484"},{"range":"485","text":"476"},"Update the dependencies array to be: [userData.Organization]",{"range":"486","text":"487"},"Update the dependencies array to be: [props.data]",{"range":"488","text":"489"},"Update the dependencies array to be: [props.tableProps.data]",{"range":"490","text":"491"},{"range":"492","text":"479"},"Update the dependencies array to be: [ebayItems, props.dialogProps.allCatalogData]",{"range":"493","text":"494"},{"range":"495","text":"479"},{"range":"496","text":"489"},"Update the dependencies array to be: [orgProps.organizationUsers, pageUpdate]",{"range":"497","text":"498"},{"range":"499","text":"489"},[2043,2045],"[history, userProfileDetails]",[1277,1279],"[userProfileDetails.Email_ID]",[1608,1610],"[applicationDetails, props.accountEmail]",[1783,1785],"[user]",[2225,2227],"[activeProfile, history, setProfileSelectionDialogIsOpenState, userData.AccountStatus, userData.AccountType, userData.Organization]",[6381,6393],"[pageUpdate, userData.Username]",[4850,4862],[6340,6342],"[userData.Username]",[6108,6120],[3337,3349],"[pageUpdate, userData.Organization]",[5645,5647],"[currentOrders, previousOrders, userData.Username]",[7664,7676],[1639,1641],"[userData.Organization]",[1316,1318],"[props.data]",[1357,1359],"[props.tableProps.data]",[2746,2748],[3177,3179],"[ebayItems, props.dialogProps.allCatalogData]",[1835,1837],[1338,1340],[3886,3898],"[orgProps.organizationUsers, pageUpdate]",[1393,1395]]